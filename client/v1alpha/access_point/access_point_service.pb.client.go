// Code generated by protoc-gen-goten-client
// API: AccessPointService
// DO NOT EDIT!!!

package access_point_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	access_point "github.com/cloudwan/ztna-sdk/resources/v1alpha/access_point"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &access_point.AccessPoint{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// AccessPointServiceClient is the client API for AccessPointService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type AccessPointServiceClient interface {
	GetAccessPoint(ctx context.Context, in *GetAccessPointRequest, opts ...grpc.CallOption) (*access_point.AccessPoint, error)
	BatchGetAccessPoints(ctx context.Context, in *BatchGetAccessPointsRequest, opts ...grpc.CallOption) (*BatchGetAccessPointsResponse, error)
	ListAccessPoints(ctx context.Context, in *ListAccessPointsRequest, opts ...grpc.CallOption) (*ListAccessPointsResponse, error)
	WatchAccessPoint(ctx context.Context, in *WatchAccessPointRequest, opts ...grpc.CallOption) (WatchAccessPointClientStream, error)
	WatchAccessPoints(ctx context.Context, in *WatchAccessPointsRequest, opts ...grpc.CallOption) (WatchAccessPointsClientStream, error)
	CreateAccessPoint(ctx context.Context, in *CreateAccessPointRequest, opts ...grpc.CallOption) (*access_point.AccessPoint, error)
	UpdateAccessPoint(ctx context.Context, in *UpdateAccessPointRequest, opts ...grpc.CallOption) (*access_point.AccessPoint, error)
	DeleteAccessPoint(ctx context.Context, in *DeleteAccessPointRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewAccessPointServiceClient(cc grpc.ClientConnInterface) AccessPointServiceClient {
	return &client{cc}
}

func (c *client) GetAccessPoint(ctx context.Context, in *GetAccessPointRequest, opts ...grpc.CallOption) (*access_point.AccessPoint, error) {
	out := new(access_point.AccessPoint)
	err := c.cc.Invoke(ctx, "/ntt.ztna.v1alpha.AccessPointService/GetAccessPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetAccessPoints(ctx context.Context, in *BatchGetAccessPointsRequest, opts ...grpc.CallOption) (*BatchGetAccessPointsResponse, error) {
	out := new(BatchGetAccessPointsResponse)
	err := c.cc.Invoke(ctx, "/ntt.ztna.v1alpha.AccessPointService/BatchGetAccessPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListAccessPoints(ctx context.Context, in *ListAccessPointsRequest, opts ...grpc.CallOption) (*ListAccessPointsResponse, error) {
	out := new(ListAccessPointsResponse)
	err := c.cc.Invoke(ctx, "/ntt.ztna.v1alpha.AccessPointService/ListAccessPoints", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchAccessPoint(ctx context.Context, in *WatchAccessPointRequest, opts ...grpc.CallOption) (WatchAccessPointClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAccessPoint",
			ServerStreams: true,
		},
		"/ntt.ztna.v1alpha.AccessPointService/WatchAccessPoint", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAccessPointWatchAccessPointClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAccessPointClientStream interface {
	Recv() (*WatchAccessPointResponse, error)
	grpc.ClientStream
}

type watchAccessPointWatchAccessPointClient struct {
	grpc.ClientStream
}

func (x *watchAccessPointWatchAccessPointClient) Recv() (*WatchAccessPointResponse, error) {
	m := new(WatchAccessPointResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchAccessPoints(ctx context.Context, in *WatchAccessPointsRequest, opts ...grpc.CallOption) (WatchAccessPointsClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchAccessPoints",
			ServerStreams: true,
		},
		"/ntt.ztna.v1alpha.AccessPointService/WatchAccessPoints", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchAccessPointsWatchAccessPointsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchAccessPointsClientStream interface {
	Recv() (*WatchAccessPointsResponse, error)
	grpc.ClientStream
}

type watchAccessPointsWatchAccessPointsClient struct {
	grpc.ClientStream
}

func (x *watchAccessPointsWatchAccessPointsClient) Recv() (*WatchAccessPointsResponse, error) {
	m := new(WatchAccessPointsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreateAccessPoint(ctx context.Context, in *CreateAccessPointRequest, opts ...grpc.CallOption) (*access_point.AccessPoint, error) {
	out := new(access_point.AccessPoint)
	err := c.cc.Invoke(ctx, "/ntt.ztna.v1alpha.AccessPointService/CreateAccessPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdateAccessPoint(ctx context.Context, in *UpdateAccessPointRequest, opts ...grpc.CallOption) (*access_point.AccessPoint, error) {
	out := new(access_point.AccessPoint)
	err := c.cc.Invoke(ctx, "/ntt.ztna.v1alpha.AccessPointService/UpdateAccessPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeleteAccessPoint(ctx context.Context, in *DeleteAccessPointRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.ztna.v1alpha.AccessPointService/DeleteAccessPoint", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
