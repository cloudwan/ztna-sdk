// Code generated by protoc-gen-goten-client
// API: AccessPointService
// DO NOT EDIT!!!

package access_point_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	access_point "github.com/cloudwan/ztna-sdk/resources/v1alpha/access_point"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = proto.Message(nil)
	_ = gotenclient.MethodDescriptor(nil)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &access_point.AccessPoint{}
)

var (
	descriptorsInitialized         bool
	accessPointServiceDescriptor   *AccessPointServiceDescriptor
	getAccessPointDescriptor       *GetAccessPointDescriptor
	batchGetAccessPointsDescriptor *BatchGetAccessPointsDescriptor
	listAccessPointsDescriptor     *ListAccessPointsDescriptor
	watchAccessPointDescriptor     *WatchAccessPointDescriptor
	watchAccessPointsDescriptor    *WatchAccessPointsDescriptor
	createAccessPointDescriptor    *CreateAccessPointDescriptor
	updateAccessPointDescriptor    *UpdateAccessPointDescriptor
	deleteAccessPointDescriptor    *DeleteAccessPointDescriptor
)

type GetAccessPointDescriptor struct{}

type GetAccessPointDescriptorClientMsgHandle struct{}

type GetAccessPointDescriptorServerMsgHandle struct{}

func (d *GetAccessPointDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetAccessPointRequest{}
}

func (d *GetAccessPointDescriptor) NewEmptyServerMsg() proto.Message {
	return &access_point.AccessPoint{}
}

func (d *GetAccessPointDescriptor) IsUnary() bool {
	return true
}

func (d *GetAccessPointDescriptor) IsClientStream() bool {
	return false
}

func (d *GetAccessPointDescriptor) IsServerStream() bool {
	return false
}

func (d *GetAccessPointDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *GetAccessPointDescriptor) IsPluralSubject() bool {
	return false
}

func (d *GetAccessPointDescriptor) HasSubjectResource() bool {
	return true
}

func (d *GetAccessPointDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetAccessPointDescriptor) GetVerb() string {
	return "get"
}

func (d *GetAccessPointDescriptor) GetMethodName() string {
	return "GetAccessPoint"
}

func (d *GetAccessPointDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/GetAccessPoint"
}

func (d *GetAccessPointDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *GetAccessPointDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *GetAccessPointDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *GetAccessPointDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *GetAccessPointDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *GetAccessPointDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *GetAccessPointDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAccessPointDescriptorClientMsgHandle{}
}

func (d *GetAccessPointDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAccessPointDescriptorServerMsgHandle{}
}

func (h *GetAccessPointDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*GetAccessPointRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*access_point.Name)(nil)
}

func (h *GetAccessPointDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*GetAccessPointRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAccessPointDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*GetAccessPointRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *GetAccessPointDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*access_point.AccessPoint) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *GetAccessPointDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*access_point.AccessPoint) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAccessPointDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*access_point.AccessPoint) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetGetAccessPointDescriptor() *GetAccessPointDescriptor {
	return getAccessPointDescriptor
}

type BatchGetAccessPointsDescriptor struct{}

type BatchGetAccessPointsDescriptorClientMsgHandle struct{}

type BatchGetAccessPointsDescriptorServerMsgHandle struct{}

func (d *BatchGetAccessPointsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetAccessPointsRequest{}
}

func (d *BatchGetAccessPointsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetAccessPointsResponse{}
}

func (d *BatchGetAccessPointsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetAccessPointsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetAccessPointsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetAccessPointsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *BatchGetAccessPointsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *BatchGetAccessPointsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *BatchGetAccessPointsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetAccessPointsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetAccessPointsDescriptor) GetMethodName() string {
	return "BatchGetAccessPoints"
}

func (d *BatchGetAccessPointsDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/BatchGetAccessPoints"
}

func (d *BatchGetAccessPointsDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *BatchGetAccessPointsDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *BatchGetAccessPointsDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *BatchGetAccessPointsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *BatchGetAccessPointsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *BatchGetAccessPointsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *BatchGetAccessPointsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAccessPointsDescriptorClientMsgHandle{}
}

func (d *BatchGetAccessPointsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAccessPointsDescriptorServerMsgHandle{}
}

func (h *BatchGetAccessPointsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetAccessPointsRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAccessPointsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetAccessPointsRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	if refs := typedMsg.GetNames(); len(refs) > 0 {
		list := make(access_point.AccessPointNameList, 0, len(refs))
		for _, ref := range refs {
			list = append(list, &ref.Name)
		}
		return list
	}
	return (access_point.AccessPointNameList)(nil)
}

func (h *BatchGetAccessPointsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetAccessPointsRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetAccessPointsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*BatchGetAccessPointsResponse) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAccessPointsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*BatchGetAccessPointsResponse) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetAccessPoints()
	list := make(access_point.AccessPointNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *BatchGetAccessPointsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*BatchGetAccessPointsResponse) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetAccessPointsDescriptor() *BatchGetAccessPointsDescriptor {
	return batchGetAccessPointsDescriptor
}

type ListAccessPointsDescriptor struct{}

type ListAccessPointsDescriptorClientMsgHandle struct{}

type ListAccessPointsDescriptorServerMsgHandle struct{}

func (d *ListAccessPointsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListAccessPointsRequest{}
}

func (d *ListAccessPointsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListAccessPointsResponse{}
}

func (d *ListAccessPointsDescriptor) IsUnary() bool {
	return true
}

func (d *ListAccessPointsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListAccessPointsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListAccessPointsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *ListAccessPointsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *ListAccessPointsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *ListAccessPointsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListAccessPointsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListAccessPointsDescriptor) GetMethodName() string {
	return "ListAccessPoints"
}

func (d *ListAccessPointsDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/ListAccessPoints"
}

func (d *ListAccessPointsDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *ListAccessPointsDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *ListAccessPointsDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *ListAccessPointsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ListAccessPointsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *ListAccessPointsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *ListAccessPointsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAccessPointsDescriptorClientMsgHandle{}
}

func (d *ListAccessPointsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAccessPointsDescriptorServerMsgHandle{}
}

func (h *ListAccessPointsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListAccessPointsRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListAccessPointsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListAccessPointsRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *ListAccessPointsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListAccessPointsRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return typedMsg.GetParent()
}

func (h *ListAccessPointsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*ListAccessPointsResponse) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *ListAccessPointsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*ListAccessPointsResponse) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resources := typedMsg.GetAccessPoints()
	list := make(access_point.AccessPointNameList, 0, len(resources))
	for _, res := range resources {
		list = append(list, res.GetName())
	}
	return list
}

func (h *ListAccessPointsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*ListAccessPointsResponse) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetListAccessPointsDescriptor() *ListAccessPointsDescriptor {
	return listAccessPointsDescriptor
}

type WatchAccessPointDescriptor struct{}

type WatchAccessPointDescriptorClientMsgHandle struct{}

type WatchAccessPointDescriptorServerMsgHandle struct{}

func (d *WatchAccessPointDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAccessPointRequest{}
}

func (d *WatchAccessPointDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAccessPointResponse{}
}

func (d *WatchAccessPointDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAccessPointDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAccessPointDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAccessPointDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *WatchAccessPointDescriptor) IsPluralSubject() bool {
	return false
}

func (d *WatchAccessPointDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchAccessPointDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAccessPointDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAccessPointDescriptor) GetMethodName() string {
	return "WatchAccessPoint"
}

func (d *WatchAccessPointDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/WatchAccessPoint"
}

func (d *WatchAccessPointDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *WatchAccessPointDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *WatchAccessPointDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *WatchAccessPointDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchAccessPointDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *WatchAccessPointDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *WatchAccessPointDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAccessPointDescriptorClientMsgHandle{}
}

func (d *WatchAccessPointDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAccessPointDescriptorServerMsgHandle{}
}

func (h *WatchAccessPointDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAccessPointRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*access_point.Name)(nil)
}

func (h *WatchAccessPointDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAccessPointRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAccessPointDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAccessPointRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchAccessPointDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAccessPointResponse) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if typedMsg.GetChange() != nil {
		switch tResChange := typedMsg.GetChange().ChangeType.(type) {
		case *access_point.AccessPointChange_Added_:
			return tResChange.Added.GetAccessPoint().GetName()
		case *access_point.AccessPointChange_Modified_:
			return tResChange.Modified.GetName()
		case *access_point.AccessPointChange_Removed_:
			return tResChange.Removed.GetName()
		case *access_point.AccessPointChange_Current_:
			return tResChange.Current.GetAccessPoint().GetName()
		}
	}
	return (*access_point.Name)(nil)
}

func (h *WatchAccessPointDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAccessPointResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAccessPointResponse) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAccessPointDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAccessPointResponse) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchAccessPointDescriptor() *WatchAccessPointDescriptor {
	return watchAccessPointDescriptor
}

type WatchAccessPointsDescriptor struct{}

type WatchAccessPointsDescriptorClientMsgHandle struct{}

type WatchAccessPointsDescriptorServerMsgHandle struct{}

func (d *WatchAccessPointsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAccessPointsRequest{}
}

func (d *WatchAccessPointsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAccessPointsResponse{}
}

func (d *WatchAccessPointsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAccessPointsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAccessPointsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAccessPointsDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *WatchAccessPointsDescriptor) IsPluralSubject() bool {
	return true
}

func (d *WatchAccessPointsDescriptor) HasSubjectResource() bool {
	return true
}

func (d *WatchAccessPointsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAccessPointsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAccessPointsDescriptor) GetMethodName() string {
	return "WatchAccessPoints"
}

func (d *WatchAccessPointsDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/WatchAccessPoints"
}

func (d *WatchAccessPointsDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *WatchAccessPointsDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *WatchAccessPointsDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *WatchAccessPointsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchAccessPointsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *WatchAccessPointsDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *WatchAccessPointsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAccessPointsDescriptorClientMsgHandle{}
}

func (d *WatchAccessPointsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAccessPointsDescriptorServerMsgHandle{}
}

func (h *WatchAccessPointsDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAccessPointsRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAccessPointsDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAccessPointsRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAccessPointsDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAccessPointsRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*access_point.ParentName)(nil)
}

func (h *WatchAccessPointsDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*WatchAccessPointsResponse) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAccessPointsDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*WatchAccessPointsResponse) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	resourceChanges := typedMsg.GetAccessPointChanges()
	list := make(access_point.AccessPointNameList, 0, len(resourceChanges))
	for _, resChange := range resourceChanges {
		switch tResChange := resChange.ChangeType.(type) {
		case *access_point.AccessPointChange_Added_:
			list = append(list, tResChange.Added.GetAccessPoint().GetName())
		case *access_point.AccessPointChange_Modified_:
			list = append(list, tResChange.Modified.GetName())
		case *access_point.AccessPointChange_Removed_:
			list = append(list, tResChange.Removed.GetName())
		case *access_point.AccessPointChange_Current_:
			list = append(list, tResChange.Current.GetAccessPoint().GetName())
		}
	}
	return list
}

func (h *WatchAccessPointsDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*WatchAccessPointsResponse) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetWatchAccessPointsDescriptor() *WatchAccessPointsDescriptor {
	return watchAccessPointsDescriptor
}

type CreateAccessPointDescriptor struct{}

type CreateAccessPointDescriptorClientMsgHandle struct{}

type CreateAccessPointDescriptorServerMsgHandle struct{}

func (d *CreateAccessPointDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateAccessPointRequest{}
}

func (d *CreateAccessPointDescriptor) NewEmptyServerMsg() proto.Message {
	return &access_point.AccessPoint{}
}

func (d *CreateAccessPointDescriptor) IsUnary() bool {
	return true
}

func (d *CreateAccessPointDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateAccessPointDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateAccessPointDescriptor) IsCollectionSubject() bool {
	return true
}

func (d *CreateAccessPointDescriptor) IsPluralSubject() bool {
	return false
}

func (d *CreateAccessPointDescriptor) HasSubjectResource() bool {
	return true
}

func (d *CreateAccessPointDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateAccessPointDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateAccessPointDescriptor) GetMethodName() string {
	return "CreateAccessPoint"
}

func (d *CreateAccessPointDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/CreateAccessPoint"
}

func (d *CreateAccessPointDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *CreateAccessPointDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *CreateAccessPointDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *CreateAccessPointDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *CreateAccessPointDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *CreateAccessPointDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *CreateAccessPointDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAccessPointDescriptorClientMsgHandle{}
}

func (d *CreateAccessPointDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAccessPointDescriptorServerMsgHandle{}
}

func (h *CreateAccessPointDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*CreateAccessPointRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetAccessPoint().GetName()
}

func (h *CreateAccessPointDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*CreateAccessPointRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAccessPointDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*CreateAccessPointRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	if ref := typedMsg.GetParent(); ref != nil {
		return &ref.ParentName
	}
	return (*access_point.ParentName)(nil)
}

func (h *CreateAccessPointDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*access_point.AccessPoint) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *CreateAccessPointDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*access_point.AccessPoint) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAccessPointDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*access_point.AccessPoint) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetCreateAccessPointDescriptor() *CreateAccessPointDescriptor {
	return createAccessPointDescriptor
}

type UpdateAccessPointDescriptor struct{}

type UpdateAccessPointDescriptorClientMsgHandle struct{}

type UpdateAccessPointDescriptorServerMsgHandle struct{}

func (d *UpdateAccessPointDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateAccessPointRequest{}
}

func (d *UpdateAccessPointDescriptor) NewEmptyServerMsg() proto.Message {
	return &access_point.AccessPoint{}
}

func (d *UpdateAccessPointDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateAccessPointDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateAccessPointDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateAccessPointDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *UpdateAccessPointDescriptor) IsPluralSubject() bool {
	return false
}

func (d *UpdateAccessPointDescriptor) HasSubjectResource() bool {
	return true
}

func (d *UpdateAccessPointDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateAccessPointDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateAccessPointDescriptor) GetMethodName() string {
	return "UpdateAccessPoint"
}

func (d *UpdateAccessPointDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/UpdateAccessPoint"
}

func (d *UpdateAccessPointDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *UpdateAccessPointDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *UpdateAccessPointDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *UpdateAccessPointDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *UpdateAccessPointDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *UpdateAccessPointDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *UpdateAccessPointDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAccessPointDescriptorClientMsgHandle{}
}

func (d *UpdateAccessPointDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAccessPointDescriptorServerMsgHandle{}
}

func (h *UpdateAccessPointDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*UpdateAccessPointRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetAccessPoint().GetName()
}

func (h *UpdateAccessPointDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*UpdateAccessPointRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAccessPointDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*UpdateAccessPointRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateAccessPointDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*access_point.AccessPoint) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return typedMsg.GetName()
}

func (h *UpdateAccessPointDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*access_point.AccessPoint) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAccessPointDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*access_point.AccessPoint) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateAccessPointDescriptor() *UpdateAccessPointDescriptor {
	return updateAccessPointDescriptor
}

type DeleteAccessPointDescriptor struct{}

type DeleteAccessPointDescriptorClientMsgHandle struct{}

type DeleteAccessPointDescriptorServerMsgHandle struct{}

func (d *DeleteAccessPointDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteAccessPointRequest{}
}

func (d *DeleteAccessPointDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteAccessPointDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteAccessPointDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteAccessPointDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteAccessPointDescriptor) IsCollectionSubject() bool {
	return false
}

func (d *DeleteAccessPointDescriptor) IsPluralSubject() bool {
	return false
}

func (d *DeleteAccessPointDescriptor) HasSubjectResource() bool {
	return true
}

func (d *DeleteAccessPointDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteAccessPointDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteAccessPointDescriptor) GetMethodName() string {
	return "DeleteAccessPoint"
}

func (d *DeleteAccessPointDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/DeleteAccessPoint"
}

func (d *DeleteAccessPointDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *DeleteAccessPointDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *DeleteAccessPointDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *DeleteAccessPointDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *DeleteAccessPointDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *DeleteAccessPointDescriptor) GetSubjectResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *DeleteAccessPointDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteAccessPointDescriptorClientMsgHandle{}
}

func (d *DeleteAccessPointDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteAccessPointDescriptorServerMsgHandle{}
}

func (h *DeleteAccessPointDescriptorClientMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*DeleteAccessPointRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	if ref := typedMsg.GetName(); ref != nil {
		return &ref.Name
	}
	return (*access_point.Name)(nil)
}

func (h *DeleteAccessPointDescriptorClientMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*DeleteAccessPointRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteAccessPointDescriptorClientMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*DeleteAccessPointRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteAccessPointDescriptorServerMsgHandle) ExtractSubjectResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceName(*empty.Empty) *access_point.Name
	})
	if ok {
		return override.OverrideExtractSubjectResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteAccessPointDescriptorServerMsgHandle) ExtractSubjectResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectResourceNames(*empty.Empty) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractSubjectResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteAccessPointDescriptorServerMsgHandle) ExtractSubjectCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractSubjectCollectionName(*empty.Empty) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractSubjectCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteAccessPointDescriptor() *DeleteAccessPointDescriptor {
	return deleteAccessPointDescriptor
}

type AccessPointServiceDescriptor struct{}

func (d *AccessPointServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getAccessPointDescriptor,
		batchGetAccessPointsDescriptor,
		listAccessPointsDescriptor,
		watchAccessPointDescriptor,
		watchAccessPointsDescriptor,
		createAccessPointDescriptor,
		updateAccessPointDescriptor,
		deleteAccessPointDescriptor,
	}
}

func (d *AccessPointServiceDescriptor) GetFullAPIName() string {
	return "/ntt.ztna.v1alpha.AccessPointService"
}

func (d *AccessPointServiceDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *AccessPointServiceDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *AccessPointServiceDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *AccessPointServiceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func GetAccessPointServiceDescriptor() *AccessPointServiceDescriptor {
	return accessPointServiceDescriptor
}

func initDescriptors() {
	accessPointServiceDescriptor = &AccessPointServiceDescriptor{}
	getAccessPointDescriptor = &GetAccessPointDescriptor{}
	batchGetAccessPointsDescriptor = &BatchGetAccessPointsDescriptor{}
	listAccessPointsDescriptor = &ListAccessPointsDescriptor{}
	watchAccessPointDescriptor = &WatchAccessPointDescriptor{}
	watchAccessPointsDescriptor = &WatchAccessPointsDescriptor{}
	createAccessPointDescriptor = &CreateAccessPointDescriptor{}
	updateAccessPointDescriptor = &UpdateAccessPointDescriptor{}
	deleteAccessPointDescriptor = &DeleteAccessPointDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(accessPointServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getAccessPointDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetAccessPointsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listAccessPointsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAccessPointDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAccessPointsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createAccessPointDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateAccessPointDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteAccessPointDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
