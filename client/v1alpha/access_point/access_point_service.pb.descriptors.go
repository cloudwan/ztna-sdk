// Code generated by protoc-gen-goten-client
// API: AccessPointService
// DO NOT EDIT!!!

package access_point_client

import (
	"google.golang.org/protobuf/proto"

	gotenclient "github.com/cloudwan/goten-sdk/runtime/client"
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	access_point "github.com/cloudwan/ztna-sdk/resources/v1alpha/access_point"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = new(proto.Message)
	_ = new(gotenclient.MethodDescriptor)
	_ = gotenresource.WildcardId
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &access_point.AccessPoint{}
)

var (
	descriptorsInitialized         bool
	accessPointServiceDescriptor   *AccessPointServiceDescriptor
	getAccessPointDescriptor       *GetAccessPointDescriptor
	batchGetAccessPointsDescriptor *BatchGetAccessPointsDescriptor
	listAccessPointsDescriptor     *ListAccessPointsDescriptor
	watchAccessPointDescriptor     *WatchAccessPointDescriptor
	watchAccessPointsDescriptor    *WatchAccessPointsDescriptor
	createAccessPointDescriptor    *CreateAccessPointDescriptor
	updateAccessPointDescriptor    *UpdateAccessPointDescriptor
	deleteAccessPointDescriptor    *DeleteAccessPointDescriptor
)

type GetAccessPointDescriptor struct{}

type GetAccessPointDescriptorClientMsgHandle struct{}

type GetAccessPointDescriptorServerMsgHandle struct{}

func (d *GetAccessPointDescriptor) NewEmptyClientMsg() proto.Message {
	return &GetAccessPointRequest{}
}

func (d *GetAccessPointDescriptor) NewEmptyServerMsg() proto.Message {
	return &access_point.AccessPoint{}
}

func (d *GetAccessPointDescriptor) IsUnary() bool {
	return true
}

func (d *GetAccessPointDescriptor) IsClientStream() bool {
	return false
}

func (d *GetAccessPointDescriptor) IsServerStream() bool {
	return false
}

func (d *GetAccessPointDescriptor) IsCollection() bool {
	return false
}

func (d *GetAccessPointDescriptor) IsPlural() bool {
	return false
}

func (d *GetAccessPointDescriptor) HasResource() bool {
	return true
}

func (d *GetAccessPointDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *GetAccessPointDescriptor) GetVerb() string {
	return "get"
}

func (d *GetAccessPointDescriptor) GetMethodName() string {
	return "GetAccessPoint"
}

func (d *GetAccessPointDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/GetAccessPoint"
}

func (d *GetAccessPointDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *GetAccessPointDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *GetAccessPointDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *GetAccessPointDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *GetAccessPointDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *GetAccessPointDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *GetAccessPointDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAccessPointDescriptorClientMsgHandle{}
}

func (d *GetAccessPointDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &GetAccessPointDescriptorServerMsgHandle{}
}

func (h *GetAccessPointDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*GetAccessPointRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*access_point.Name)(nil)
}

func (h *GetAccessPointDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*GetAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*GetAccessPointRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAccessPointDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*GetAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*GetAccessPointRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *GetAccessPointDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*access_point.AccessPoint) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*access_point.Name)(nil)
}

func (h *GetAccessPointDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*access_point.AccessPoint) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *GetAccessPointDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*access_point.AccessPoint) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetGetAccessPointDescriptor() *GetAccessPointDescriptor {
	return getAccessPointDescriptor
}

type BatchGetAccessPointsDescriptor struct{}

type BatchGetAccessPointsDescriptorClientMsgHandle struct{}

type BatchGetAccessPointsDescriptorServerMsgHandle struct{}

func (d *BatchGetAccessPointsDescriptor) NewEmptyClientMsg() proto.Message {
	return &BatchGetAccessPointsRequest{}
}

func (d *BatchGetAccessPointsDescriptor) NewEmptyServerMsg() proto.Message {
	return &BatchGetAccessPointsResponse{}
}

func (d *BatchGetAccessPointsDescriptor) IsUnary() bool {
	return true
}

func (d *BatchGetAccessPointsDescriptor) IsClientStream() bool {
	return false
}

func (d *BatchGetAccessPointsDescriptor) IsServerStream() bool {
	return false
}

func (d *BatchGetAccessPointsDescriptor) IsCollection() bool {
	return false
}

func (d *BatchGetAccessPointsDescriptor) IsPlural() bool {
	return true
}

func (d *BatchGetAccessPointsDescriptor) HasResource() bool {
	return true
}

func (d *BatchGetAccessPointsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *BatchGetAccessPointsDescriptor) GetVerb() string {
	return "batchGet"
}

func (d *BatchGetAccessPointsDescriptor) GetMethodName() string {
	return "BatchGetAccessPoints"
}

func (d *BatchGetAccessPointsDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/BatchGetAccessPoints"
}

func (d *BatchGetAccessPointsDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *BatchGetAccessPointsDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *BatchGetAccessPointsDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *BatchGetAccessPointsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *BatchGetAccessPointsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *BatchGetAccessPointsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *BatchGetAccessPointsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAccessPointsDescriptorClientMsgHandle{}
}

func (d *BatchGetAccessPointsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &BatchGetAccessPointsDescriptorServerMsgHandle{}
}

func (h *BatchGetAccessPointsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetAccessPointsRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAccessPointsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetAccessPointsRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if refs := typedMsg.GetNames(); len(refs) > 0 {
			list := make(access_point.AccessPointNameList, 0, len(refs))
			for _, ref := range refs {
				list = append(list, &ref.Name)
			}
			return list
		}
	}
	return (access_point.AccessPointNameList)(nil)
}

func (h *BatchGetAccessPointsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetAccessPointsRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *BatchGetAccessPointsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*BatchGetAccessPointsResponse) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *BatchGetAccessPointsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*BatchGetAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*BatchGetAccessPointsResponse) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetAccessPoints(); len(resources) > 0 {
			list := make(access_point.AccessPointNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (access_point.AccessPointNameList)(nil)
}

func (h *BatchGetAccessPointsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*BatchGetAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*BatchGetAccessPointsResponse) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetBatchGetAccessPointsDescriptor() *BatchGetAccessPointsDescriptor {
	return batchGetAccessPointsDescriptor
}

type ListAccessPointsDescriptor struct{}

type ListAccessPointsDescriptorClientMsgHandle struct{}

type ListAccessPointsDescriptorServerMsgHandle struct{}

func (d *ListAccessPointsDescriptor) NewEmptyClientMsg() proto.Message {
	return &ListAccessPointsRequest{}
}

func (d *ListAccessPointsDescriptor) NewEmptyServerMsg() proto.Message {
	return &ListAccessPointsResponse{}
}

func (d *ListAccessPointsDescriptor) IsUnary() bool {
	return true
}

func (d *ListAccessPointsDescriptor) IsClientStream() bool {
	return false
}

func (d *ListAccessPointsDescriptor) IsServerStream() bool {
	return false
}

func (d *ListAccessPointsDescriptor) IsCollection() bool {
	return true
}

func (d *ListAccessPointsDescriptor) IsPlural() bool {
	return true
}

func (d *ListAccessPointsDescriptor) HasResource() bool {
	return true
}

func (d *ListAccessPointsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *ListAccessPointsDescriptor) GetVerb() string {
	return "list"
}

func (d *ListAccessPointsDescriptor) GetMethodName() string {
	return "ListAccessPoints"
}

func (d *ListAccessPointsDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/ListAccessPoints"
}

func (d *ListAccessPointsDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *ListAccessPointsDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *ListAccessPointsDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *ListAccessPointsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *ListAccessPointsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *ListAccessPointsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *ListAccessPointsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAccessPointsDescriptorClientMsgHandle{}
}

func (d *ListAccessPointsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &ListAccessPointsDescriptorServerMsgHandle{}
}

func (h *ListAccessPointsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListAccessPointsRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListAccessPointsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListAccessPointsRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *ListAccessPointsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListAccessPointsRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if parentName := typedMsg.GetParent(); parentName != nil {
			return parentName
		}
	}
	return (*access_point.ParentName)(nil)
}

func (h *ListAccessPointsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*ListAccessPointsResponse) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *ListAccessPointsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*ListAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*ListAccessPointsResponse) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resources := typedMsg.GetAccessPoints(); len(resources) > 0 {
			list := make(access_point.AccessPointNameList, 0, len(resources))
			for _, res := range resources {
				list = append(list, res.GetName())
			}
			return list
		}
	}
	return (access_point.AccessPointNameList)(nil)
}

func (h *ListAccessPointsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*ListAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*ListAccessPointsResponse) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetListAccessPointsDescriptor() *ListAccessPointsDescriptor {
	return listAccessPointsDescriptor
}

type WatchAccessPointDescriptor struct{}

type WatchAccessPointDescriptorClientMsgHandle struct{}

type WatchAccessPointDescriptorServerMsgHandle struct{}

func (d *WatchAccessPointDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAccessPointRequest{}
}

func (d *WatchAccessPointDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAccessPointResponse{}
}

func (d *WatchAccessPointDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAccessPointDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAccessPointDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAccessPointDescriptor) IsCollection() bool {
	return false
}

func (d *WatchAccessPointDescriptor) IsPlural() bool {
	return false
}

func (d *WatchAccessPointDescriptor) HasResource() bool {
	return true
}

func (d *WatchAccessPointDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAccessPointDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAccessPointDescriptor) GetMethodName() string {
	return "WatchAccessPoint"
}

func (d *WatchAccessPointDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/WatchAccessPoint"
}

func (d *WatchAccessPointDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *WatchAccessPointDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *WatchAccessPointDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *WatchAccessPointDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchAccessPointDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *WatchAccessPointDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *WatchAccessPointDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAccessPointDescriptorClientMsgHandle{}
}

func (d *WatchAccessPointDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAccessPointDescriptorServerMsgHandle{}
}

func (h *WatchAccessPointDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAccessPointRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*access_point.Name)(nil)
}

func (h *WatchAccessPointDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAccessPointRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAccessPointDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchAccessPointRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *WatchAccessPointDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAccessPointResponse) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if resChange := typedMsg.GetChange(); resChange != nil {
			switch tResChange := resChange.ChangeType.(type) {
			case *access_point.AccessPointChange_Added_:
				return tResChange.Added.GetAccessPoint().GetName()
			case *access_point.AccessPointChange_Modified_:
				return tResChange.Modified.GetName()
			case *access_point.AccessPointChange_Removed_:
				return tResChange.Removed.GetName()
			case *access_point.AccessPointChange_Current_:
				return tResChange.Current.GetAccessPoint().GetName()
			}
		}
	}
	return (*access_point.Name)(nil)
}

func (h *WatchAccessPointDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAccessPointResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAccessPointResponse) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAccessPointDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchAccessPointResponse) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchAccessPointDescriptor() *WatchAccessPointDescriptor {
	return watchAccessPointDescriptor
}

type WatchAccessPointsDescriptor struct{}

type WatchAccessPointsDescriptorClientMsgHandle struct{}

type WatchAccessPointsDescriptorServerMsgHandle struct{}

func (d *WatchAccessPointsDescriptor) NewEmptyClientMsg() proto.Message {
	return &WatchAccessPointsRequest{}
}

func (d *WatchAccessPointsDescriptor) NewEmptyServerMsg() proto.Message {
	return &WatchAccessPointsResponse{}
}

func (d *WatchAccessPointsDescriptor) IsUnary() bool {
	return false
}

func (d *WatchAccessPointsDescriptor) IsClientStream() bool {
	return false
}

func (d *WatchAccessPointsDescriptor) IsServerStream() bool {
	return true
}

func (d *WatchAccessPointsDescriptor) IsCollection() bool {
	return true
}

func (d *WatchAccessPointsDescriptor) IsPlural() bool {
	return true
}

func (d *WatchAccessPointsDescriptor) HasResource() bool {
	return true
}

func (d *WatchAccessPointsDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *WatchAccessPointsDescriptor) GetVerb() string {
	return "watch"
}

func (d *WatchAccessPointsDescriptor) GetMethodName() string {
	return "WatchAccessPoints"
}

func (d *WatchAccessPointsDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/WatchAccessPoints"
}

func (d *WatchAccessPointsDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *WatchAccessPointsDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *WatchAccessPointsDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *WatchAccessPointsDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *WatchAccessPointsDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *WatchAccessPointsDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *WatchAccessPointsDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAccessPointsDescriptorClientMsgHandle{}
}

func (d *WatchAccessPointsDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &WatchAccessPointsDescriptorServerMsgHandle{}
}

func (h *WatchAccessPointsDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAccessPointsRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAccessPointsDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAccessPointsRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *WatchAccessPointsDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointsRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchAccessPointsRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*access_point.ParentName)(nil)
}

func (h *WatchAccessPointsDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*WatchAccessPointsResponse) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *WatchAccessPointsDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*WatchAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*WatchAccessPointsResponse) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	{
		if resChanges := typedMsg.GetAccessPointChanges(); len(resChanges) > 0 {
			list := make(access_point.AccessPointNameList, 0, len(resChanges))
			for _, resChange := range resChanges {
				switch tResChange := resChange.ChangeType.(type) {
				case *access_point.AccessPointChange_Added_:
					list = append(list, tResChange.Added.GetAccessPoint().GetName())
				case *access_point.AccessPointChange_Modified_:
					list = append(list, tResChange.Modified.GetName())
				case *access_point.AccessPointChange_Removed_:
					list = append(list, tResChange.Removed.GetName())
				case *access_point.AccessPointChange_Current_:
					list = append(list, tResChange.Current.GetAccessPoint().GetName())
				}
			}
			return list
		}
	}
	return (access_point.AccessPointNameList)(nil)
}

func (h *WatchAccessPointsDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*WatchAccessPointsResponse)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*WatchAccessPointsResponse) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetWatchAccessPointsDescriptor() *WatchAccessPointsDescriptor {
	return watchAccessPointsDescriptor
}

type CreateAccessPointDescriptor struct{}

type CreateAccessPointDescriptorClientMsgHandle struct{}

type CreateAccessPointDescriptorServerMsgHandle struct{}

func (d *CreateAccessPointDescriptor) NewEmptyClientMsg() proto.Message {
	return &CreateAccessPointRequest{}
}

func (d *CreateAccessPointDescriptor) NewEmptyServerMsg() proto.Message {
	return &access_point.AccessPoint{}
}

func (d *CreateAccessPointDescriptor) IsUnary() bool {
	return true
}

func (d *CreateAccessPointDescriptor) IsClientStream() bool {
	return false
}

func (d *CreateAccessPointDescriptor) IsServerStream() bool {
	return false
}

func (d *CreateAccessPointDescriptor) IsCollection() bool {
	return true
}

func (d *CreateAccessPointDescriptor) IsPlural() bool {
	return false
}

func (d *CreateAccessPointDescriptor) HasResource() bool {
	return true
}

func (d *CreateAccessPointDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *CreateAccessPointDescriptor) GetVerb() string {
	return "create"
}

func (d *CreateAccessPointDescriptor) GetMethodName() string {
	return "CreateAccessPoint"
}

func (d *CreateAccessPointDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/CreateAccessPoint"
}

func (d *CreateAccessPointDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *CreateAccessPointDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *CreateAccessPointDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *CreateAccessPointDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *CreateAccessPointDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *CreateAccessPointDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *CreateAccessPointDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAccessPointDescriptorClientMsgHandle{}
}

func (d *CreateAccessPointDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &CreateAccessPointDescriptorServerMsgHandle{}
}

func (h *CreateAccessPointDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*CreateAccessPointRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetAccessPoint()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*access_point.Name)(nil)
}

func (h *CreateAccessPointDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*CreateAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*CreateAccessPointRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAccessPointDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*CreateAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*CreateAccessPointRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	{
		if ref := typedMsg.GetParent(); ref != nil {
			return &ref.ParentName
		}
	}
	return (*access_point.ParentName)(nil)
}

func (h *CreateAccessPointDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*access_point.AccessPoint) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*access_point.Name)(nil)
}

func (h *CreateAccessPointDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*access_point.AccessPoint) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *CreateAccessPointDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*access_point.AccessPoint) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetCreateAccessPointDescriptor() *CreateAccessPointDescriptor {
	return createAccessPointDescriptor
}

type UpdateAccessPointDescriptor struct{}

type UpdateAccessPointDescriptorClientMsgHandle struct{}

type UpdateAccessPointDescriptorServerMsgHandle struct{}

func (d *UpdateAccessPointDescriptor) NewEmptyClientMsg() proto.Message {
	return &UpdateAccessPointRequest{}
}

func (d *UpdateAccessPointDescriptor) NewEmptyServerMsg() proto.Message {
	return &access_point.AccessPoint{}
}

func (d *UpdateAccessPointDescriptor) IsUnary() bool {
	return true
}

func (d *UpdateAccessPointDescriptor) IsClientStream() bool {
	return false
}

func (d *UpdateAccessPointDescriptor) IsServerStream() bool {
	return false
}

func (d *UpdateAccessPointDescriptor) IsCollection() bool {
	return false
}

func (d *UpdateAccessPointDescriptor) IsPlural() bool {
	return false
}

func (d *UpdateAccessPointDescriptor) HasResource() bool {
	return true
}

func (d *UpdateAccessPointDescriptor) RequestHasResourceBody() bool {
	return true
}

func (d *UpdateAccessPointDescriptor) GetVerb() string {
	return "update"
}

func (d *UpdateAccessPointDescriptor) GetMethodName() string {
	return "UpdateAccessPoint"
}

func (d *UpdateAccessPointDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/UpdateAccessPoint"
}

func (d *UpdateAccessPointDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *UpdateAccessPointDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *UpdateAccessPointDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *UpdateAccessPointDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *UpdateAccessPointDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *UpdateAccessPointDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *UpdateAccessPointDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAccessPointDescriptorClientMsgHandle{}
}

func (d *UpdateAccessPointDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &UpdateAccessPointDescriptorServerMsgHandle{}
}

func (h *UpdateAccessPointDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*UpdateAccessPointRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		res := typedMsg.GetAccessPoint()
		if name := res.GetName(); name != nil {
			return name
		}
	}
	return (*access_point.Name)(nil)
}

func (h *UpdateAccessPointDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*UpdateAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*UpdateAccessPointRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAccessPointDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*UpdateAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*UpdateAccessPointRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *UpdateAccessPointDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*access_point.AccessPoint) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if name := typedMsg.GetName(); name != nil {
			return name
		}
	}
	return (*access_point.Name)(nil)
}

func (h *UpdateAccessPointDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*access_point.AccessPoint) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *UpdateAccessPointDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*access_point.AccessPoint)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*access_point.AccessPoint) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetUpdateAccessPointDescriptor() *UpdateAccessPointDescriptor {
	return updateAccessPointDescriptor
}

type DeleteAccessPointDescriptor struct{}

type DeleteAccessPointDescriptorClientMsgHandle struct{}

type DeleteAccessPointDescriptorServerMsgHandle struct{}

func (d *DeleteAccessPointDescriptor) NewEmptyClientMsg() proto.Message {
	return &DeleteAccessPointRequest{}
}

func (d *DeleteAccessPointDescriptor) NewEmptyServerMsg() proto.Message {
	return &empty.Empty{}
}

func (d *DeleteAccessPointDescriptor) IsUnary() bool {
	return true
}

func (d *DeleteAccessPointDescriptor) IsClientStream() bool {
	return false
}

func (d *DeleteAccessPointDescriptor) IsServerStream() bool {
	return false
}

func (d *DeleteAccessPointDescriptor) IsCollection() bool {
	return false
}

func (d *DeleteAccessPointDescriptor) IsPlural() bool {
	return false
}

func (d *DeleteAccessPointDescriptor) HasResource() bool {
	return true
}

func (d *DeleteAccessPointDescriptor) RequestHasResourceBody() bool {
	return false
}

func (d *DeleteAccessPointDescriptor) GetVerb() string {
	return "delete"
}

func (d *DeleteAccessPointDescriptor) GetMethodName() string {
	return "DeleteAccessPoint"
}

func (d *DeleteAccessPointDescriptor) GetFullMethodName() string {
	return "/ntt.ztna.v1alpha.AccessPointService/DeleteAccessPoint"
}

func (d *DeleteAccessPointDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *DeleteAccessPointDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *DeleteAccessPointDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *DeleteAccessPointDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func (d *DeleteAccessPointDescriptor) GetApiDescriptor() gotenclient.ApiDescriptor {
	return accessPointServiceDescriptor
}

func (d *DeleteAccessPointDescriptor) GetResourceDescriptor() gotenresource.Descriptor {
	return access_point.GetDescriptor()
}

func (d *DeleteAccessPointDescriptor) GetClientMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteAccessPointDescriptorClientMsgHandle{}
}

func (d *DeleteAccessPointDescriptor) GetServerMsgReflectHandle() gotenclient.MethodMsgHandle {
	return &DeleteAccessPointDescriptorServerMsgHandle{}
}

func (h *DeleteAccessPointDescriptorClientMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*DeleteAccessPointRequest) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	{
		if ref := typedMsg.GetName(); ref != nil {
			return &ref.Name
		}
	}
	return (*access_point.Name)(nil)
}

func (h *DeleteAccessPointDescriptorClientMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*DeleteAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*DeleteAccessPointRequest) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteAccessPointDescriptorClientMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*DeleteAccessPointRequest)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*DeleteAccessPointRequest) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func (h *DeleteAccessPointDescriptorServerMsgHandle) ExtractResourceName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceName(*empty.Empty) *access_point.Name
	})
	if ok {
		return override.OverrideExtractResourceName(typedMsg)
	}
	return nil
}

func (h *DeleteAccessPointDescriptorServerMsgHandle) ExtractResourceNames(msg proto.Message) gotenresource.NameList {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractResourceNames(*empty.Empty) []*access_point.Name
	})
	if ok {
		return access_point.AccessPointNameList(override.OverrideExtractResourceNames(typedMsg))
	}
	return nil
}

func (h *DeleteAccessPointDescriptorServerMsgHandle) ExtractCollectionName(msg proto.Message) gotenresource.Name {
	typedMsg := msg.(*empty.Empty)
	var asInterface interface{} = h
	override, ok := asInterface.(interface {
		OverrideExtractCollectionName(*empty.Empty) *access_point.ParentName
	})
	if ok {
		return override.OverrideExtractCollectionName(typedMsg)
	}
	return nil
}

func GetDeleteAccessPointDescriptor() *DeleteAccessPointDescriptor {
	return deleteAccessPointDescriptor
}

type AccessPointServiceDescriptor struct{}

func (d *AccessPointServiceDescriptor) AllMethodDescriptors() []gotenclient.MethodDescriptor {
	return []gotenclient.MethodDescriptor{
		getAccessPointDescriptor,
		batchGetAccessPointsDescriptor,
		listAccessPointsDescriptor,
		watchAccessPointDescriptor,
		watchAccessPointsDescriptor,
		createAccessPointDescriptor,
		updateAccessPointDescriptor,
		deleteAccessPointDescriptor,
	}
}

func (d *AccessPointServiceDescriptor) GetFullAPIName() string {
	return "/ntt.ztna.v1alpha.AccessPointService"
}

func (d *AccessPointServiceDescriptor) GetProtoPkgName() string {
	return "ntt.ztna.v1alpha"
}

func (d *AccessPointServiceDescriptor) GetApiName() string {
	return "AccessPointService"
}

func (d *AccessPointServiceDescriptor) GetServiceDomain() string {
	return "ztna.edgelq.com"
}

func (d *AccessPointServiceDescriptor) GetServiceVersion() string {
	return "v1alpha"
}

func GetAccessPointServiceDescriptor() *AccessPointServiceDescriptor {
	return accessPointServiceDescriptor
}

func initDescriptors() {
	accessPointServiceDescriptor = &AccessPointServiceDescriptor{}
	getAccessPointDescriptor = &GetAccessPointDescriptor{}
	batchGetAccessPointsDescriptor = &BatchGetAccessPointsDescriptor{}
	listAccessPointsDescriptor = &ListAccessPointsDescriptor{}
	watchAccessPointDescriptor = &WatchAccessPointDescriptor{}
	watchAccessPointsDescriptor = &WatchAccessPointsDescriptor{}
	createAccessPointDescriptor = &CreateAccessPointDescriptor{}
	updateAccessPointDescriptor = &UpdateAccessPointDescriptor{}
	deleteAccessPointDescriptor = &DeleteAccessPointDescriptor{}
	gotenclient.GetRegistry().RegisterApiDescriptor(accessPointServiceDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(getAccessPointDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(batchGetAccessPointsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(listAccessPointsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAccessPointDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(watchAccessPointsDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(createAccessPointDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(updateAccessPointDescriptor)
	gotenclient.GetRegistry().RegisterMethodDescriptor(deleteAccessPointDescriptor)
}

func init() {
	if !descriptorsInitialized {
		initDescriptors()
		descriptorsInitialized = true
	}
}
