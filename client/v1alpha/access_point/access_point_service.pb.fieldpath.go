// Code generated by protoc-gen-goten-object
// File: ztna/proto/v1alpha/access_point_service.proto
// DO NOT EDIT!!!

package access_point_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	access_point "github.com/cloudwan/ztna-sdk/resources/v1alpha/access_point"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &access_point.AccessPoint{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetAccessPointRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetAccessPointRequest_FieldPathSelector
	Get(source *GetAccessPointRequest) []interface{}
	GetSingle(source *GetAccessPointRequest) (interface{}, bool)
	ClearValue(item *GetAccessPointRequest)

	// Those methods build corresponding GetAccessPointRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetAccessPointRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetAccessPointRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetAccessPointRequest_FieldPathArrayItemValue
}

type GetAccessPointRequest_FieldPathSelector int32

const (
	GetAccessPointRequest_FieldPathSelectorName      GetAccessPointRequest_FieldPathSelector = 0
	GetAccessPointRequest_FieldPathSelectorFieldMask GetAccessPointRequest_FieldPathSelector = 1
	GetAccessPointRequest_FieldPathSelectorView      GetAccessPointRequest_FieldPathSelector = 2
)

func (s GetAccessPointRequest_FieldPathSelector) String() string {
	switch s {
	case GetAccessPointRequest_FieldPathSelectorName:
		return "name"
	case GetAccessPointRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetAccessPointRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetAccessPointRequest: %d", s))
	}
}

func BuildGetAccessPointRequest_FieldPath(fp gotenobject.RawFieldPath) (GetAccessPointRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetAccessPointRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetAccessPointRequest_FieldTerminalPath{selector: GetAccessPointRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetAccessPointRequest_FieldTerminalPath{selector: GetAccessPointRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetAccessPointRequest_FieldTerminalPath{selector: GetAccessPointRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetAccessPointRequest", fp)
}

func ParseGetAccessPointRequest_FieldPath(rawField string) (GetAccessPointRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetAccessPointRequest_FieldPath(fp)
}

func MustParseGetAccessPointRequest_FieldPath(rawField string) GetAccessPointRequest_FieldPath {
	fp, err := ParseGetAccessPointRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetAccessPointRequest_FieldTerminalPath struct {
	selector GetAccessPointRequest_FieldPathSelector
}

var _ GetAccessPointRequest_FieldPath = (*GetAccessPointRequest_FieldTerminalPath)(nil)

func (fp *GetAccessPointRequest_FieldTerminalPath) Selector() GetAccessPointRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetAccessPointRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetAccessPointRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetAccessPointRequest
func (fp *GetAccessPointRequest_FieldTerminalPath) Get(source *GetAccessPointRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetAccessPointRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetAccessPointRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetAccessPointRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetAccessPointRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetAccessPointRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetAccessPointRequest))
}

// GetSingle returns value pointed by specific field of from source GetAccessPointRequest
func (fp *GetAccessPointRequest_FieldTerminalPath) GetSingle(source *GetAccessPointRequest) (interface{}, bool) {
	switch fp.selector {
	case GetAccessPointRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetAccessPointRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetAccessPointRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetAccessPointRequest: %d", fp.selector))
	}
}

func (fp *GetAccessPointRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetAccessPointRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetAccessPointRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetAccessPointRequest_FieldPathSelectorName:
		return (*access_point.Reference)(nil)
	case GetAccessPointRequest_FieldPathSelectorFieldMask:
		return (*access_point.AccessPoint_FieldMask)(nil)
	case GetAccessPointRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetAccessPointRequest: %d", fp.selector))
	}
}

func (fp *GetAccessPointRequest_FieldTerminalPath) ClearValue(item *GetAccessPointRequest) {
	if item != nil {
		switch fp.selector {
		case GetAccessPointRequest_FieldPathSelectorName:
			item.Name = nil
		case GetAccessPointRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetAccessPointRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetAccessPointRequest: %d", fp.selector))
		}
	}
}

func (fp *GetAccessPointRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetAccessPointRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetAccessPointRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetAccessPointRequest_FieldPathSelectorName ||
		fp.selector == GetAccessPointRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetAccessPointRequest_FieldPathSelectorView
}

func (fp *GetAccessPointRequest_FieldTerminalPath) WithIValue(value interface{}) GetAccessPointRequest_FieldPathValue {
	switch fp.selector {
	case GetAccessPointRequest_FieldPathSelectorName:
		return &GetAccessPointRequest_FieldTerminalPathValue{GetAccessPointRequest_FieldTerminalPath: *fp, value: value.(*access_point.Reference)}
	case GetAccessPointRequest_FieldPathSelectorFieldMask:
		return &GetAccessPointRequest_FieldTerminalPathValue{GetAccessPointRequest_FieldTerminalPath: *fp, value: value.(*access_point.AccessPoint_FieldMask)}
	case GetAccessPointRequest_FieldPathSelectorView:
		return &GetAccessPointRequest_FieldTerminalPathValue{GetAccessPointRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAccessPointRequest: %d", fp.selector))
	}
}

func (fp *GetAccessPointRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetAccessPointRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetAccessPointRequest_FieldPathArrayOfValues {
	fpaov := &GetAccessPointRequest_FieldTerminalPathArrayOfValues{GetAccessPointRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetAccessPointRequest_FieldPathSelectorName:
		return &GetAccessPointRequest_FieldTerminalPathArrayOfValues{GetAccessPointRequest_FieldTerminalPath: *fp, values: values.([]*access_point.Reference)}
	case GetAccessPointRequest_FieldPathSelectorFieldMask:
		return &GetAccessPointRequest_FieldTerminalPathArrayOfValues{GetAccessPointRequest_FieldTerminalPath: *fp, values: values.([]*access_point.AccessPoint_FieldMask)}
	case GetAccessPointRequest_FieldPathSelectorView:
		return &GetAccessPointRequest_FieldTerminalPathArrayOfValues{GetAccessPointRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAccessPointRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetAccessPointRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetAccessPointRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetAccessPointRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetAccessPointRequest: %d", fp.selector))
	}
}

func (fp *GetAccessPointRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetAccessPointRequest_FieldPathValue allows storing values for GetAccessPointRequest fields according to their type
type GetAccessPointRequest_FieldPathValue interface {
	GetAccessPointRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetAccessPointRequest)
	CompareWith(*GetAccessPointRequest) (cmp int, comparable bool)
}

func ParseGetAccessPointRequest_FieldPathValue(pathStr, valueStr string) (GetAccessPointRequest_FieldPathValue, error) {
	fp, err := ParseGetAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAccessPointRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetAccessPointRequest_FieldPathValue), nil
}

func MustParseGetAccessPointRequest_FieldPathValue(pathStr, valueStr string) GetAccessPointRequest_FieldPathValue {
	fpv, err := ParseGetAccessPointRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetAccessPointRequest_FieldTerminalPathValue struct {
	GetAccessPointRequest_FieldTerminalPath
	value interface{}
}

var _ GetAccessPointRequest_FieldPathValue = (*GetAccessPointRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetAccessPointRequest' as interface{}
func (fpv *GetAccessPointRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetAccessPointRequest_FieldTerminalPathValue) AsNameValue() (*access_point.Reference, bool) {
	res, ok := fpv.value.(*access_point.Reference)
	return res, ok
}
func (fpv *GetAccessPointRequest_FieldTerminalPathValue) AsFieldMaskValue() (*access_point.AccessPoint_FieldMask, bool) {
	res, ok := fpv.value.(*access_point.AccessPoint_FieldMask)
	return res, ok
}
func (fpv *GetAccessPointRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetAccessPointRequest
func (fpv *GetAccessPointRequest_FieldTerminalPathValue) SetTo(target **GetAccessPointRequest) {
	if *target == nil {
		*target = new(GetAccessPointRequest)
	}
	switch fpv.selector {
	case GetAccessPointRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*access_point.Reference)
	case GetAccessPointRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*access_point.AccessPoint_FieldMask)
	case GetAccessPointRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetAccessPointRequest: %d", fpv.selector))
	}
}

func (fpv *GetAccessPointRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetAccessPointRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetAccessPointRequest_FieldTerminalPathValue' with the value under path in 'GetAccessPointRequest'.
func (fpv *GetAccessPointRequest_FieldTerminalPathValue) CompareWith(source *GetAccessPointRequest) (int, bool) {
	switch fpv.selector {
	case GetAccessPointRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*access_point.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetAccessPointRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetAccessPointRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetAccessPointRequest: %d", fpv.selector))
	}
}

func (fpv *GetAccessPointRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetAccessPointRequest))
}

// GetAccessPointRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetAccessPointRequest according to their type
// Present only for array (repeated) types.
type GetAccessPointRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetAccessPointRequest_FieldPath
	ContainsValue(*GetAccessPointRequest) bool
}

// ParseGetAccessPointRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetAccessPointRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAccessPointRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetAccessPointRequest_FieldPathArrayItemValue), nil
}

func MustParseGetAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetAccessPointRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetAccessPointRequest_FieldTerminalPathArrayItemValue struct {
	GetAccessPointRequest_FieldTerminalPath
	value interface{}
}

var _ GetAccessPointRequest_FieldPathArrayItemValue = (*GetAccessPointRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetAccessPointRequest as interface{}
func (fpaiv *GetAccessPointRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetAccessPointRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetAccessPointRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetAccessPointRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetAccessPointRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetAccessPointRequest'
func (fpaiv *GetAccessPointRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetAccessPointRequest) bool {
	slice := fpaiv.GetAccessPointRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetAccessPointRequest_FieldPathArrayOfValues allows storing slice of values for GetAccessPointRequest fields according to their type
type GetAccessPointRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetAccessPointRequest_FieldPath
}

func ParseGetAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetAccessPointRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetAccessPointRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetAccessPointRequest_FieldPathArrayOfValues), nil
}

func MustParseGetAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetAccessPointRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetAccessPointRequest_FieldTerminalPathArrayOfValues struct {
	GetAccessPointRequest_FieldTerminalPath
	values interface{}
}

var _ GetAccessPointRequest_FieldPathArrayOfValues = (*GetAccessPointRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetAccessPointRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetAccessPointRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*access_point.Reference) {
			values = append(values, v)
		}
	case GetAccessPointRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*access_point.AccessPoint_FieldMask) {
			values = append(values, v)
		}
	case GetAccessPointRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetAccessPointRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*access_point.Reference, bool) {
	res, ok := fpaov.values.([]*access_point.Reference)
	return res, ok
}
func (fpaov *GetAccessPointRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*access_point.AccessPoint_FieldMask, bool) {
	res, ok := fpaov.values.([]*access_point.AccessPoint_FieldMask)
	return res, ok
}
func (fpaov *GetAccessPointRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAccessPointsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAccessPointsRequest_FieldPathSelector
	Get(source *BatchGetAccessPointsRequest) []interface{}
	GetSingle(source *BatchGetAccessPointsRequest) (interface{}, bool)
	ClearValue(item *BatchGetAccessPointsRequest)

	// Those methods build corresponding BatchGetAccessPointsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAccessPointsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAccessPointsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAccessPointsRequest_FieldPathArrayItemValue
}

type BatchGetAccessPointsRequest_FieldPathSelector int32

const (
	BatchGetAccessPointsRequest_FieldPathSelectorParent    BatchGetAccessPointsRequest_FieldPathSelector = 0
	BatchGetAccessPointsRequest_FieldPathSelectorNames     BatchGetAccessPointsRequest_FieldPathSelector = 1
	BatchGetAccessPointsRequest_FieldPathSelectorFieldMask BatchGetAccessPointsRequest_FieldPathSelector = 2
	BatchGetAccessPointsRequest_FieldPathSelectorView      BatchGetAccessPointsRequest_FieldPathSelector = 3
)

func (s BatchGetAccessPointsRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetAccessPointsRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetAccessPointsRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetAccessPointsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetAccessPointsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsRequest: %d", s))
	}
}

func BuildBatchGetAccessPointsRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAccessPointsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAccessPointsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetAccessPointsRequest_FieldTerminalPath{selector: BatchGetAccessPointsRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetAccessPointsRequest_FieldTerminalPath{selector: BatchGetAccessPointsRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetAccessPointsRequest_FieldTerminalPath{selector: BatchGetAccessPointsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetAccessPointsRequest_FieldTerminalPath{selector: BatchGetAccessPointsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAccessPointsRequest", fp)
}

func ParseBatchGetAccessPointsRequest_FieldPath(rawField string) (BatchGetAccessPointsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAccessPointsRequest_FieldPath(fp)
}

func MustParseBatchGetAccessPointsRequest_FieldPath(rawField string) BatchGetAccessPointsRequest_FieldPath {
	fp, err := ParseBatchGetAccessPointsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAccessPointsRequest_FieldTerminalPath struct {
	selector BatchGetAccessPointsRequest_FieldPathSelector
}

var _ BatchGetAccessPointsRequest_FieldPath = (*BatchGetAccessPointsRequest_FieldTerminalPath)(nil)

func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) Selector() BatchGetAccessPointsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAccessPointsRequest
func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) Get(source *BatchGetAccessPointsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAccessPointsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetAccessPointsRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetAccessPointsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetAccessPointsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAccessPointsRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetAccessPointsRequest
func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) GetSingle(source *BatchGetAccessPointsRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAccessPointsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetAccessPointsRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetAccessPointsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetAccessPointsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAccessPointsRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAccessPointsRequest_FieldPathSelectorParent:
		return (*access_point.Reference)(nil)
	case BatchGetAccessPointsRequest_FieldPathSelectorNames:
		return ([]*access_point.Reference)(nil)
	case BatchGetAccessPointsRequest_FieldPathSelectorFieldMask:
		return (*access_point.AccessPoint_FieldMask)(nil)
	case BatchGetAccessPointsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) ClearValue(item *BatchGetAccessPointsRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetAccessPointsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetAccessPointsRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetAccessPointsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetAccessPointsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAccessPointsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAccessPointsRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetAccessPointsRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetAccessPointsRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetAccessPointsRequest_FieldPathSelectorView
}

func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetAccessPointsRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetAccessPointsRequest_FieldPathSelectorParent:
		return &BatchGetAccessPointsRequest_FieldTerminalPathValue{BatchGetAccessPointsRequest_FieldTerminalPath: *fp, value: value.(*access_point.Reference)}
	case BatchGetAccessPointsRequest_FieldPathSelectorNames:
		return &BatchGetAccessPointsRequest_FieldTerminalPathValue{BatchGetAccessPointsRequest_FieldTerminalPath: *fp, value: value.([]*access_point.Reference)}
	case BatchGetAccessPointsRequest_FieldPathSelectorFieldMask:
		return &BatchGetAccessPointsRequest_FieldTerminalPathValue{BatchGetAccessPointsRequest_FieldTerminalPath: *fp, value: value.(*access_point.AccessPoint_FieldMask)}
	case BatchGetAccessPointsRequest_FieldPathSelectorView:
		return &BatchGetAccessPointsRequest_FieldTerminalPathValue{BatchGetAccessPointsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAccessPointsRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetAccessPointsRequest_FieldTerminalPathArrayOfValues{BatchGetAccessPointsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAccessPointsRequest_FieldPathSelectorParent:
		return &BatchGetAccessPointsRequest_FieldTerminalPathArrayOfValues{BatchGetAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]*access_point.Reference)}
	case BatchGetAccessPointsRequest_FieldPathSelectorNames:
		return &BatchGetAccessPointsRequest_FieldTerminalPathArrayOfValues{BatchGetAccessPointsRequest_FieldTerminalPath: *fp, values: values.([][]*access_point.Reference)}
	case BatchGetAccessPointsRequest_FieldPathSelectorFieldMask:
		return &BatchGetAccessPointsRequest_FieldTerminalPathArrayOfValues{BatchGetAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]*access_point.AccessPoint_FieldMask)}
	case BatchGetAccessPointsRequest_FieldPathSelectorView:
		return &BatchGetAccessPointsRequest_FieldTerminalPathArrayOfValues{BatchGetAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAccessPointsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAccessPointsRequest_FieldPathSelectorNames:
		return &BatchGetAccessPointsRequest_FieldTerminalPathArrayItemValue{BatchGetAccessPointsRequest_FieldTerminalPath: *fp, value: value.(*access_point.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsRequest: %d", fp.selector))
	}
}

func (fp *BatchGetAccessPointsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetAccessPointsRequest_FieldPathValue allows storing values for BatchGetAccessPointsRequest fields according to their type
type BatchGetAccessPointsRequest_FieldPathValue interface {
	BatchGetAccessPointsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAccessPointsRequest)
	CompareWith(*BatchGetAccessPointsRequest) (cmp int, comparable bool)
}

func ParseBatchGetAccessPointsRequest_FieldPathValue(pathStr, valueStr string) (BatchGetAccessPointsRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetAccessPointsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAccessPointsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAccessPointsRequest_FieldPathValue), nil
}

func MustParseBatchGetAccessPointsRequest_FieldPathValue(pathStr, valueStr string) BatchGetAccessPointsRequest_FieldPathValue {
	fpv, err := ParseBatchGetAccessPointsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAccessPointsRequest_FieldTerminalPathValue struct {
	BatchGetAccessPointsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAccessPointsRequest_FieldPathValue = (*BatchGetAccessPointsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAccessPointsRequest' as interface{}
func (fpv *BatchGetAccessPointsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAccessPointsRequest_FieldTerminalPathValue) AsParentValue() (*access_point.Reference, bool) {
	res, ok := fpv.value.(*access_point.Reference)
	return res, ok
}
func (fpv *BatchGetAccessPointsRequest_FieldTerminalPathValue) AsNamesValue() ([]*access_point.Reference, bool) {
	res, ok := fpv.value.([]*access_point.Reference)
	return res, ok
}
func (fpv *BatchGetAccessPointsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*access_point.AccessPoint_FieldMask, bool) {
	res, ok := fpv.value.(*access_point.AccessPoint_FieldMask)
	return res, ok
}
func (fpv *BatchGetAccessPointsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAccessPointsRequest
func (fpv *BatchGetAccessPointsRequest_FieldTerminalPathValue) SetTo(target **BatchGetAccessPointsRequest) {
	if *target == nil {
		*target = new(BatchGetAccessPointsRequest)
	}
	switch fpv.selector {
	case BatchGetAccessPointsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*access_point.Reference)
	case BatchGetAccessPointsRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*access_point.Reference)
	case BatchGetAccessPointsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*access_point.AccessPoint_FieldMask)
	case BatchGetAccessPointsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAccessPointsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAccessPointsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAccessPointsRequest_FieldTerminalPathValue' with the value under path in 'BatchGetAccessPointsRequest'.
func (fpv *BatchGetAccessPointsRequest_FieldTerminalPathValue) CompareWith(source *BatchGetAccessPointsRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetAccessPointsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*access_point.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetAccessPointsRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetAccessPointsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetAccessPointsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetAccessPointsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAccessPointsRequest))
}

// BatchGetAccessPointsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAccessPointsRequest according to their type
// Present only for array (repeated) types.
type BatchGetAccessPointsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAccessPointsRequest_FieldPath
	ContainsValue(*BatchGetAccessPointsRequest) bool
}

// ParseBatchGetAccessPointsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAccessPointsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAccessPointsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAccessPointsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAccessPointsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAccessPointsRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAccessPointsRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAccessPointsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAccessPointsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAccessPointsRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetAccessPointsRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetAccessPointsRequest_FieldPathArrayItemValue = (*BatchGetAccessPointsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAccessPointsRequest as interface{}
func (fpaiv *BatchGetAccessPointsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAccessPointsRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*access_point.Reference, bool) {
	res, ok := fpaiv.value.(*access_point.Reference)
	return res, ok
}

func (fpaiv *BatchGetAccessPointsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAccessPointsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAccessPointsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAccessPointsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAccessPointsRequest'
func (fpaiv *BatchGetAccessPointsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAccessPointsRequest) bool {
	slice := fpaiv.BatchGetAccessPointsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetAccessPointsRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetAccessPointsRequest fields according to their type
type BatchGetAccessPointsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAccessPointsRequest_FieldPath
}

func ParseBatchGetAccessPointsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAccessPointsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAccessPointsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAccessPointsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAccessPointsRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAccessPointsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAccessPointsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAccessPointsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAccessPointsRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetAccessPointsRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetAccessPointsRequest_FieldPathArrayOfValues = (*BatchGetAccessPointsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAccessPointsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAccessPointsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*access_point.Reference) {
			values = append(values, v)
		}
	case BatchGetAccessPointsRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*access_point.Reference) {
			values = append(values, v)
		}
	case BatchGetAccessPointsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*access_point.AccessPoint_FieldMask) {
			values = append(values, v)
		}
	case BatchGetAccessPointsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAccessPointsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*access_point.Reference, bool) {
	res, ok := fpaov.values.([]*access_point.Reference)
	return res, ok
}
func (fpaov *BatchGetAccessPointsRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*access_point.Reference, bool) {
	res, ok := fpaov.values.([][]*access_point.Reference)
	return res, ok
}
func (fpaov *BatchGetAccessPointsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*access_point.AccessPoint_FieldMask, bool) {
	res, ok := fpaov.values.([]*access_point.AccessPoint_FieldMask)
	return res, ok
}
func (fpaov *BatchGetAccessPointsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetAccessPointsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetAccessPointsResponse_FieldPathSelector
	Get(source *BatchGetAccessPointsResponse) []interface{}
	GetSingle(source *BatchGetAccessPointsResponse) (interface{}, bool)
	ClearValue(item *BatchGetAccessPointsResponse)

	// Those methods build corresponding BatchGetAccessPointsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetAccessPointsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetAccessPointsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetAccessPointsResponse_FieldPathArrayItemValue
}

type BatchGetAccessPointsResponse_FieldPathSelector int32

const (
	BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints BatchGetAccessPointsResponse_FieldPathSelector = 0
	BatchGetAccessPointsResponse_FieldPathSelectorMissing      BatchGetAccessPointsResponse_FieldPathSelector = 1
)

func (s BatchGetAccessPointsResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
		return "access_points"
	case BatchGetAccessPointsResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", s))
	}
}

func BuildBatchGetAccessPointsResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetAccessPointsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetAccessPointsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "access_points", "accessPoints", "access-points":
			return &BatchGetAccessPointsResponse_FieldTerminalPath{selector: BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints}, nil
		case "missing":
			return &BatchGetAccessPointsResponse_FieldTerminalPath{selector: BatchGetAccessPointsResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "access_points", "accessPoints", "access-points":
			if subpath, err := access_point.BuildAccessPoint_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetAccessPointsResponse_FieldSubPath{selector: BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetAccessPointsResponse", fp)
}

func ParseBatchGetAccessPointsResponse_FieldPath(rawField string) (BatchGetAccessPointsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetAccessPointsResponse_FieldPath(fp)
}

func MustParseBatchGetAccessPointsResponse_FieldPath(rawField string) BatchGetAccessPointsResponse_FieldPath {
	fp, err := ParseBatchGetAccessPointsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetAccessPointsResponse_FieldTerminalPath struct {
	selector BatchGetAccessPointsResponse_FieldPathSelector
}

var _ BatchGetAccessPointsResponse_FieldPath = (*BatchGetAccessPointsResponse_FieldTerminalPath)(nil)

func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) Selector() BatchGetAccessPointsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetAccessPointsResponse
func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) Get(source *BatchGetAccessPointsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
			for _, value := range source.GetAccessPoints() {
				values = append(values, value)
			}
		case BatchGetAccessPointsResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetAccessPointsResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetAccessPointsResponse
func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) GetSingle(source *BatchGetAccessPointsResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
		res := source.GetAccessPoints()
		return res, res != nil
	case BatchGetAccessPointsResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetAccessPointsResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
		return ([]*access_point.AccessPoint)(nil)
	case BatchGetAccessPointsResponse_FieldPathSelectorMissing:
		return ([]*access_point.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) ClearValue(item *BatchGetAccessPointsResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
			item.AccessPoints = nil
		case BatchGetAccessPointsResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetAccessPointsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetAccessPointsResponse_FieldPathSelectorMissing
}

func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetAccessPointsResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
		return &BatchGetAccessPointsResponse_FieldTerminalPathValue{BatchGetAccessPointsResponse_FieldTerminalPath: *fp, value: value.([]*access_point.AccessPoint)}
	case BatchGetAccessPointsResponse_FieldPathSelectorMissing:
		return &BatchGetAccessPointsResponse_FieldTerminalPathValue{BatchGetAccessPointsResponse_FieldTerminalPath: *fp, value: value.([]*access_point.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetAccessPointsResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetAccessPointsResponse_FieldTerminalPathArrayOfValues{BatchGetAccessPointsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
		return &BatchGetAccessPointsResponse_FieldTerminalPathArrayOfValues{BatchGetAccessPointsResponse_FieldTerminalPath: *fp, values: values.([][]*access_point.AccessPoint)}
	case BatchGetAccessPointsResponse_FieldPathSelectorMissing:
		return &BatchGetAccessPointsResponse_FieldTerminalPathArrayOfValues{BatchGetAccessPointsResponse_FieldTerminalPath: *fp, values: values.([][]*access_point.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetAccessPointsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
		return &BatchGetAccessPointsResponse_FieldTerminalPathArrayItemValue{BatchGetAccessPointsResponse_FieldTerminalPath: *fp, value: value.(*access_point.AccessPoint)}
	case BatchGetAccessPointsResponse_FieldPathSelectorMissing:
		return &BatchGetAccessPointsResponse_FieldTerminalPathArrayItemValue{BatchGetAccessPointsResponse_FieldTerminalPath: *fp, value: value.(*access_point.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fp.selector))
	}
}

func (fp *BatchGetAccessPointsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetAccessPointsResponse_FieldSubPath struct {
	selector BatchGetAccessPointsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetAccessPointsResponse_FieldPath = (*BatchGetAccessPointsResponse_FieldSubPath)(nil)

func (fps *BatchGetAccessPointsResponse_FieldSubPath) Selector() BatchGetAccessPointsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetAccessPointsResponse_FieldSubPath) AsAccessPointsSubPath() (access_point.AccessPoint_FieldPath, bool) {
	res, ok := fps.subPath.(access_point.AccessPoint_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetAccessPointsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetAccessPointsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetAccessPointsResponse
func (fps *BatchGetAccessPointsResponse_FieldSubPath) Get(source *BatchGetAccessPointsResponse) (values []interface{}) {
	if asAccessPointFieldPath, ok := fps.AsAccessPointsSubPath(); ok {
		for _, item := range source.GetAccessPoints() {
			values = append(values, asAccessPointFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetAccessPointsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetAccessPointsResponse))
}

// GetSingle returns value of selected field from source BatchGetAccessPointsResponse
func (fps *BatchGetAccessPointsResponse_FieldSubPath) GetSingle(source *BatchGetAccessPointsResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
		if len(source.GetAccessPoints()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAccessPoints()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fps.selector))
	}
}

func (fps *BatchGetAccessPointsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetAccessPointsResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetAccessPointsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetAccessPointsResponse_FieldSubPath) ClearValue(item *BatchGetAccessPointsResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
			for _, subItem := range item.AccessPoints {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetAccessPointsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetAccessPointsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetAccessPointsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetAccessPointsResponse_FieldSubPath) WithIValue(value interface{}) BatchGetAccessPointsResponse_FieldPathValue {
	return &BatchGetAccessPointsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetAccessPointsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetAccessPointsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetAccessPointsResponse_FieldPathArrayOfValues {
	return &BatchGetAccessPointsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetAccessPointsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetAccessPointsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetAccessPointsResponse_FieldPathArrayItemValue {
	return &BatchGetAccessPointsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetAccessPointsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetAccessPointsResponse_FieldPathValue allows storing values for BatchGetAccessPointsResponse fields according to their type
type BatchGetAccessPointsResponse_FieldPathValue interface {
	BatchGetAccessPointsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetAccessPointsResponse)
	CompareWith(*BatchGetAccessPointsResponse) (cmp int, comparable bool)
}

func ParseBatchGetAccessPointsResponse_FieldPathValue(pathStr, valueStr string) (BatchGetAccessPointsResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetAccessPointsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAccessPointsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetAccessPointsResponse_FieldPathValue), nil
}

func MustParseBatchGetAccessPointsResponse_FieldPathValue(pathStr, valueStr string) BatchGetAccessPointsResponse_FieldPathValue {
	fpv, err := ParseBatchGetAccessPointsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetAccessPointsResponse_FieldTerminalPathValue struct {
	BatchGetAccessPointsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAccessPointsResponse_FieldPathValue = (*BatchGetAccessPointsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetAccessPointsResponse' as interface{}
func (fpv *BatchGetAccessPointsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetAccessPointsResponse_FieldTerminalPathValue) AsAccessPointsValue() ([]*access_point.AccessPoint, bool) {
	res, ok := fpv.value.([]*access_point.AccessPoint)
	return res, ok
}
func (fpv *BatchGetAccessPointsResponse_FieldTerminalPathValue) AsMissingValue() ([]*access_point.Reference, bool) {
	res, ok := fpv.value.([]*access_point.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetAccessPointsResponse
func (fpv *BatchGetAccessPointsResponse_FieldTerminalPathValue) SetTo(target **BatchGetAccessPointsResponse) {
	if *target == nil {
		*target = new(BatchGetAccessPointsResponse)
	}
	switch fpv.selector {
	case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
		(*target).AccessPoints = fpv.value.([]*access_point.AccessPoint)
	case BatchGetAccessPointsResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*access_point.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAccessPointsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAccessPointsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetAccessPointsResponse_FieldTerminalPathValue' with the value under path in 'BatchGetAccessPointsResponse'.
func (fpv *BatchGetAccessPointsResponse_FieldTerminalPathValue) CompareWith(source *BatchGetAccessPointsResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
		return 0, false
	case BatchGetAccessPointsResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetAccessPointsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetAccessPointsResponse))
}

type BatchGetAccessPointsResponse_FieldSubPathValue struct {
	BatchGetAccessPointsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetAccessPointsResponse_FieldPathValue = (*BatchGetAccessPointsResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetAccessPointsResponse_FieldSubPathValue) AsAccessPointsPathValue() (access_point.AccessPoint_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(access_point.AccessPoint_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetAccessPointsResponse_FieldSubPathValue) SetTo(target **BatchGetAccessPointsResponse) {
	if *target == nil {
		*target = new(BatchGetAccessPointsResponse)
	}
	switch fpvs.Selector() {
	case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAccessPointsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetAccessPointsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetAccessPointsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetAccessPointsResponse_FieldSubPathValue) CompareWith(source *BatchGetAccessPointsResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetAccessPointsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetAccessPointsResponse))
}

// BatchGetAccessPointsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetAccessPointsResponse according to their type
// Present only for array (repeated) types.
type BatchGetAccessPointsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetAccessPointsResponse_FieldPath
	ContainsValue(*BatchGetAccessPointsResponse) bool
}

// ParseBatchGetAccessPointsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetAccessPointsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetAccessPointsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetAccessPointsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAccessPointsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetAccessPointsResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetAccessPointsResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetAccessPointsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetAccessPointsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetAccessPointsResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetAccessPointsResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetAccessPointsResponse_FieldPathArrayItemValue = (*BatchGetAccessPointsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetAccessPointsResponse as interface{}
func (fpaiv *BatchGetAccessPointsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetAccessPointsResponse_FieldTerminalPathArrayItemValue) AsAccessPointsItemValue() (*access_point.AccessPoint, bool) {
	res, ok := fpaiv.value.(*access_point.AccessPoint)
	return res, ok
}
func (fpaiv *BatchGetAccessPointsResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*access_point.Reference, bool) {
	res, ok := fpaiv.value.(*access_point.Reference)
	return res, ok
}

func (fpaiv *BatchGetAccessPointsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetAccessPointsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetAccessPointsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetAccessPointsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAccessPointsResponse'
func (fpaiv *BatchGetAccessPointsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetAccessPointsResponse) bool {
	slice := fpaiv.BatchGetAccessPointsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetAccessPointsResponse_FieldSubPathArrayItemValue struct {
	BatchGetAccessPointsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetAccessPointsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetAccessPointsResponse_FieldSubPathArrayItemValue) AsAccessPointsPathItemValue() (access_point.AccessPoint_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(access_point.AccessPoint_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetAccessPointsResponse'
func (fpaivs *BatchGetAccessPointsResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetAccessPointsResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetAccessPointsResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetAccessPointsResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetAccessPointsResponse fields according to their type
type BatchGetAccessPointsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetAccessPointsResponse_FieldPath
}

func ParseBatchGetAccessPointsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetAccessPointsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetAccessPointsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetAccessPointsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetAccessPointsResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetAccessPointsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetAccessPointsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetAccessPointsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetAccessPointsResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetAccessPointsResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetAccessPointsResponse_FieldPathArrayOfValues = (*BatchGetAccessPointsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetAccessPointsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints:
		for _, v := range fpaov.values.([][]*access_point.AccessPoint) {
			values = append(values, v)
		}
	case BatchGetAccessPointsResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*access_point.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetAccessPointsResponse_FieldTerminalPathArrayOfValues) AsAccessPointsArrayOfValues() ([][]*access_point.AccessPoint, bool) {
	res, ok := fpaov.values.([][]*access_point.AccessPoint)
	return res, ok
}
func (fpaov *BatchGetAccessPointsResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*access_point.Reference, bool) {
	res, ok := fpaov.values.([][]*access_point.Reference)
	return res, ok
}

type BatchGetAccessPointsResponse_FieldSubPathArrayOfValues struct {
	BatchGetAccessPointsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetAccessPointsResponse_FieldPathArrayOfValues = (*BatchGetAccessPointsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetAccessPointsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetAccessPointsResponse_FieldSubPathArrayOfValues) AsAccessPointsPathArrayOfValues() (access_point.AccessPoint_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(access_point.AccessPoint_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAccessPointsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAccessPointsRequest_FieldPathSelector
	Get(source *ListAccessPointsRequest) []interface{}
	GetSingle(source *ListAccessPointsRequest) (interface{}, bool)
	ClearValue(item *ListAccessPointsRequest)

	// Those methods build corresponding ListAccessPointsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAccessPointsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAccessPointsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAccessPointsRequest_FieldPathArrayItemValue
}

type ListAccessPointsRequest_FieldPathSelector int32

const (
	ListAccessPointsRequest_FieldPathSelectorParent    ListAccessPointsRequest_FieldPathSelector = 0
	ListAccessPointsRequest_FieldPathSelectorPageSize  ListAccessPointsRequest_FieldPathSelector = 1
	ListAccessPointsRequest_FieldPathSelectorPageToken ListAccessPointsRequest_FieldPathSelector = 2
	ListAccessPointsRequest_FieldPathSelectorOrderBy   ListAccessPointsRequest_FieldPathSelector = 3
	ListAccessPointsRequest_FieldPathSelectorFilter    ListAccessPointsRequest_FieldPathSelector = 4
	ListAccessPointsRequest_FieldPathSelectorFieldMask ListAccessPointsRequest_FieldPathSelector = 5
	ListAccessPointsRequest_FieldPathSelectorView      ListAccessPointsRequest_FieldPathSelector = 6
)

func (s ListAccessPointsRequest_FieldPathSelector) String() string {
	switch s {
	case ListAccessPointsRequest_FieldPathSelectorParent:
		return "parent"
	case ListAccessPointsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListAccessPointsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListAccessPointsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListAccessPointsRequest_FieldPathSelectorFilter:
		return "filter"
	case ListAccessPointsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListAccessPointsRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsRequest: %d", s))
	}
}

func BuildListAccessPointsRequest_FieldPath(fp gotenobject.RawFieldPath) (ListAccessPointsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAccessPointsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListAccessPointsRequest_FieldTerminalPath{selector: ListAccessPointsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListAccessPointsRequest_FieldTerminalPath{selector: ListAccessPointsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListAccessPointsRequest_FieldTerminalPath{selector: ListAccessPointsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListAccessPointsRequest_FieldTerminalPath{selector: ListAccessPointsRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListAccessPointsRequest_FieldTerminalPath{selector: ListAccessPointsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListAccessPointsRequest_FieldTerminalPath{selector: ListAccessPointsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListAccessPointsRequest_FieldTerminalPath{selector: ListAccessPointsRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAccessPointsRequest", fp)
}

func ParseListAccessPointsRequest_FieldPath(rawField string) (ListAccessPointsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAccessPointsRequest_FieldPath(fp)
}

func MustParseListAccessPointsRequest_FieldPath(rawField string) ListAccessPointsRequest_FieldPath {
	fp, err := ParseListAccessPointsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAccessPointsRequest_FieldTerminalPath struct {
	selector ListAccessPointsRequest_FieldPathSelector
}

var _ ListAccessPointsRequest_FieldPath = (*ListAccessPointsRequest_FieldTerminalPath)(nil)

func (fp *ListAccessPointsRequest_FieldTerminalPath) Selector() ListAccessPointsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAccessPointsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAccessPointsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAccessPointsRequest
func (fp *ListAccessPointsRequest_FieldTerminalPath) Get(source *ListAccessPointsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAccessPointsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListAccessPointsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListAccessPointsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListAccessPointsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListAccessPointsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListAccessPointsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListAccessPointsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListAccessPointsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAccessPointsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAccessPointsRequest))
}

// GetSingle returns value pointed by specific field of from source ListAccessPointsRequest
func (fp *ListAccessPointsRequest_FieldTerminalPath) GetSingle(source *ListAccessPointsRequest) (interface{}, bool) {
	switch fp.selector {
	case ListAccessPointsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListAccessPointsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListAccessPointsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListAccessPointsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListAccessPointsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListAccessPointsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListAccessPointsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsRequest: %d", fp.selector))
	}
}

func (fp *ListAccessPointsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAccessPointsRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListAccessPointsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAccessPointsRequest_FieldPathSelectorParent:
		return (*access_point.ParentName)(nil)
	case ListAccessPointsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListAccessPointsRequest_FieldPathSelectorPageToken:
		return (*access_point.PagerCursor)(nil)
	case ListAccessPointsRequest_FieldPathSelectorOrderBy:
		return (*access_point.OrderBy)(nil)
	case ListAccessPointsRequest_FieldPathSelectorFilter:
		return (*access_point.Filter)(nil)
	case ListAccessPointsRequest_FieldPathSelectorFieldMask:
		return (*access_point.AccessPoint_FieldMask)(nil)
	case ListAccessPointsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsRequest: %d", fp.selector))
	}
}

func (fp *ListAccessPointsRequest_FieldTerminalPath) ClearValue(item *ListAccessPointsRequest) {
	if item != nil {
		switch fp.selector {
		case ListAccessPointsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListAccessPointsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListAccessPointsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListAccessPointsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListAccessPointsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListAccessPointsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListAccessPointsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListAccessPointsRequest: %d", fp.selector))
		}
	}
}

func (fp *ListAccessPointsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAccessPointsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAccessPointsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAccessPointsRequest_FieldPathSelectorParent ||
		fp.selector == ListAccessPointsRequest_FieldPathSelectorPageSize ||
		fp.selector == ListAccessPointsRequest_FieldPathSelectorPageToken ||
		fp.selector == ListAccessPointsRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListAccessPointsRequest_FieldPathSelectorFilter ||
		fp.selector == ListAccessPointsRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListAccessPointsRequest_FieldPathSelectorView
}

func (fp *ListAccessPointsRequest_FieldTerminalPath) WithIValue(value interface{}) ListAccessPointsRequest_FieldPathValue {
	switch fp.selector {
	case ListAccessPointsRequest_FieldPathSelectorParent:
		return &ListAccessPointsRequest_FieldTerminalPathValue{ListAccessPointsRequest_FieldTerminalPath: *fp, value: value.(*access_point.ParentName)}
	case ListAccessPointsRequest_FieldPathSelectorPageSize:
		return &ListAccessPointsRequest_FieldTerminalPathValue{ListAccessPointsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListAccessPointsRequest_FieldPathSelectorPageToken:
		return &ListAccessPointsRequest_FieldTerminalPathValue{ListAccessPointsRequest_FieldTerminalPath: *fp, value: value.(*access_point.PagerCursor)}
	case ListAccessPointsRequest_FieldPathSelectorOrderBy:
		return &ListAccessPointsRequest_FieldTerminalPathValue{ListAccessPointsRequest_FieldTerminalPath: *fp, value: value.(*access_point.OrderBy)}
	case ListAccessPointsRequest_FieldPathSelectorFilter:
		return &ListAccessPointsRequest_FieldTerminalPathValue{ListAccessPointsRequest_FieldTerminalPath: *fp, value: value.(*access_point.Filter)}
	case ListAccessPointsRequest_FieldPathSelectorFieldMask:
		return &ListAccessPointsRequest_FieldTerminalPathValue{ListAccessPointsRequest_FieldTerminalPath: *fp, value: value.(*access_point.AccessPoint_FieldMask)}
	case ListAccessPointsRequest_FieldPathSelectorView:
		return &ListAccessPointsRequest_FieldTerminalPathValue{ListAccessPointsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsRequest: %d", fp.selector))
	}
}

func (fp *ListAccessPointsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAccessPointsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAccessPointsRequest_FieldPathArrayOfValues {
	fpaov := &ListAccessPointsRequest_FieldTerminalPathArrayOfValues{ListAccessPointsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAccessPointsRequest_FieldPathSelectorParent:
		return &ListAccessPointsRequest_FieldTerminalPathArrayOfValues{ListAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]*access_point.ParentName)}
	case ListAccessPointsRequest_FieldPathSelectorPageSize:
		return &ListAccessPointsRequest_FieldTerminalPathArrayOfValues{ListAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListAccessPointsRequest_FieldPathSelectorPageToken:
		return &ListAccessPointsRequest_FieldTerminalPathArrayOfValues{ListAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]*access_point.PagerCursor)}
	case ListAccessPointsRequest_FieldPathSelectorOrderBy:
		return &ListAccessPointsRequest_FieldTerminalPathArrayOfValues{ListAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]*access_point.OrderBy)}
	case ListAccessPointsRequest_FieldPathSelectorFilter:
		return &ListAccessPointsRequest_FieldTerminalPathArrayOfValues{ListAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]*access_point.Filter)}
	case ListAccessPointsRequest_FieldPathSelectorFieldMask:
		return &ListAccessPointsRequest_FieldTerminalPathArrayOfValues{ListAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]*access_point.AccessPoint_FieldMask)}
	case ListAccessPointsRequest_FieldPathSelectorView:
		return &ListAccessPointsRequest_FieldTerminalPathArrayOfValues{ListAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAccessPointsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAccessPointsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAccessPointsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsRequest: %d", fp.selector))
	}
}

func (fp *ListAccessPointsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListAccessPointsRequest_FieldPathValue allows storing values for ListAccessPointsRequest fields according to their type
type ListAccessPointsRequest_FieldPathValue interface {
	ListAccessPointsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAccessPointsRequest)
	CompareWith(*ListAccessPointsRequest) (cmp int, comparable bool)
}

func ParseListAccessPointsRequest_FieldPathValue(pathStr, valueStr string) (ListAccessPointsRequest_FieldPathValue, error) {
	fp, err := ParseListAccessPointsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAccessPointsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAccessPointsRequest_FieldPathValue), nil
}

func MustParseListAccessPointsRequest_FieldPathValue(pathStr, valueStr string) ListAccessPointsRequest_FieldPathValue {
	fpv, err := ParseListAccessPointsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAccessPointsRequest_FieldTerminalPathValue struct {
	ListAccessPointsRequest_FieldTerminalPath
	value interface{}
}

var _ ListAccessPointsRequest_FieldPathValue = (*ListAccessPointsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAccessPointsRequest' as interface{}
func (fpv *ListAccessPointsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAccessPointsRequest_FieldTerminalPathValue) AsParentValue() (*access_point.ParentName, bool) {
	res, ok := fpv.value.(*access_point.ParentName)
	return res, ok
}
func (fpv *ListAccessPointsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListAccessPointsRequest_FieldTerminalPathValue) AsPageTokenValue() (*access_point.PagerCursor, bool) {
	res, ok := fpv.value.(*access_point.PagerCursor)
	return res, ok
}
func (fpv *ListAccessPointsRequest_FieldTerminalPathValue) AsOrderByValue() (*access_point.OrderBy, bool) {
	res, ok := fpv.value.(*access_point.OrderBy)
	return res, ok
}
func (fpv *ListAccessPointsRequest_FieldTerminalPathValue) AsFilterValue() (*access_point.Filter, bool) {
	res, ok := fpv.value.(*access_point.Filter)
	return res, ok
}
func (fpv *ListAccessPointsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*access_point.AccessPoint_FieldMask, bool) {
	res, ok := fpv.value.(*access_point.AccessPoint_FieldMask)
	return res, ok
}
func (fpv *ListAccessPointsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListAccessPointsRequest
func (fpv *ListAccessPointsRequest_FieldTerminalPathValue) SetTo(target **ListAccessPointsRequest) {
	if *target == nil {
		*target = new(ListAccessPointsRequest)
	}
	switch fpv.selector {
	case ListAccessPointsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*access_point.ParentName)
	case ListAccessPointsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListAccessPointsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*access_point.PagerCursor)
	case ListAccessPointsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*access_point.OrderBy)
	case ListAccessPointsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*access_point.Filter)
	case ListAccessPointsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*access_point.AccessPoint_FieldMask)
	case ListAccessPointsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsRequest: %d", fpv.selector))
	}
}

func (fpv *ListAccessPointsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAccessPointsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAccessPointsRequest_FieldTerminalPathValue' with the value under path in 'ListAccessPointsRequest'.
func (fpv *ListAccessPointsRequest_FieldTerminalPathValue) CompareWith(source *ListAccessPointsRequest) (int, bool) {
	switch fpv.selector {
	case ListAccessPointsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*access_point.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListAccessPointsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListAccessPointsRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListAccessPointsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListAccessPointsRequest_FieldPathSelectorFilter:
		return 0, false
	case ListAccessPointsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListAccessPointsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsRequest: %d", fpv.selector))
	}
}

func (fpv *ListAccessPointsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAccessPointsRequest))
}

// ListAccessPointsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAccessPointsRequest according to their type
// Present only for array (repeated) types.
type ListAccessPointsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAccessPointsRequest_FieldPath
	ContainsValue(*ListAccessPointsRequest) bool
}

// ParseListAccessPointsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAccessPointsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListAccessPointsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListAccessPointsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAccessPointsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAccessPointsRequest_FieldPathArrayItemValue), nil
}

func MustParseListAccessPointsRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListAccessPointsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListAccessPointsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAccessPointsRequest_FieldTerminalPathArrayItemValue struct {
	ListAccessPointsRequest_FieldTerminalPath
	value interface{}
}

var _ ListAccessPointsRequest_FieldPathArrayItemValue = (*ListAccessPointsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAccessPointsRequest as interface{}
func (fpaiv *ListAccessPointsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListAccessPointsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListAccessPointsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAccessPointsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAccessPointsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAccessPointsRequest'
func (fpaiv *ListAccessPointsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAccessPointsRequest) bool {
	slice := fpaiv.ListAccessPointsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListAccessPointsRequest_FieldPathArrayOfValues allows storing slice of values for ListAccessPointsRequest fields according to their type
type ListAccessPointsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAccessPointsRequest_FieldPath
}

func ParseListAccessPointsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAccessPointsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListAccessPointsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAccessPointsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAccessPointsRequest_FieldPathArrayOfValues), nil
}

func MustParseListAccessPointsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListAccessPointsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListAccessPointsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAccessPointsRequest_FieldTerminalPathArrayOfValues struct {
	ListAccessPointsRequest_FieldTerminalPath
	values interface{}
}

var _ ListAccessPointsRequest_FieldPathArrayOfValues = (*ListAccessPointsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAccessPointsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAccessPointsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*access_point.ParentName) {
			values = append(values, v)
		}
	case ListAccessPointsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListAccessPointsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*access_point.PagerCursor) {
			values = append(values, v)
		}
	case ListAccessPointsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*access_point.OrderBy) {
			values = append(values, v)
		}
	case ListAccessPointsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*access_point.Filter) {
			values = append(values, v)
		}
	case ListAccessPointsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*access_point.AccessPoint_FieldMask) {
			values = append(values, v)
		}
	case ListAccessPointsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAccessPointsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*access_point.ParentName, bool) {
	res, ok := fpaov.values.([]*access_point.ParentName)
	return res, ok
}
func (fpaov *ListAccessPointsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListAccessPointsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*access_point.PagerCursor, bool) {
	res, ok := fpaov.values.([]*access_point.PagerCursor)
	return res, ok
}
func (fpaov *ListAccessPointsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*access_point.OrderBy, bool) {
	res, ok := fpaov.values.([]*access_point.OrderBy)
	return res, ok
}
func (fpaov *ListAccessPointsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*access_point.Filter, bool) {
	res, ok := fpaov.values.([]*access_point.Filter)
	return res, ok
}
func (fpaov *ListAccessPointsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*access_point.AccessPoint_FieldMask, bool) {
	res, ok := fpaov.values.([]*access_point.AccessPoint_FieldMask)
	return res, ok
}
func (fpaov *ListAccessPointsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListAccessPointsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListAccessPointsResponse_FieldPathSelector
	Get(source *ListAccessPointsResponse) []interface{}
	GetSingle(source *ListAccessPointsResponse) (interface{}, bool)
	ClearValue(item *ListAccessPointsResponse)

	// Those methods build corresponding ListAccessPointsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListAccessPointsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListAccessPointsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListAccessPointsResponse_FieldPathArrayItemValue
}

type ListAccessPointsResponse_FieldPathSelector int32

const (
	ListAccessPointsResponse_FieldPathSelectorAccessPoints  ListAccessPointsResponse_FieldPathSelector = 0
	ListAccessPointsResponse_FieldPathSelectorPrevPageToken ListAccessPointsResponse_FieldPathSelector = 1
	ListAccessPointsResponse_FieldPathSelectorNextPageToken ListAccessPointsResponse_FieldPathSelector = 2
)

func (s ListAccessPointsResponse_FieldPathSelector) String() string {
	switch s {
	case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
		return "access_points"
	case ListAccessPointsResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListAccessPointsResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", s))
	}
}

func BuildListAccessPointsResponse_FieldPath(fp gotenobject.RawFieldPath) (ListAccessPointsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListAccessPointsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "access_points", "accessPoints", "access-points":
			return &ListAccessPointsResponse_FieldTerminalPath{selector: ListAccessPointsResponse_FieldPathSelectorAccessPoints}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListAccessPointsResponse_FieldTerminalPath{selector: ListAccessPointsResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListAccessPointsResponse_FieldTerminalPath{selector: ListAccessPointsResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "access_points", "accessPoints", "access-points":
			if subpath, err := access_point.BuildAccessPoint_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListAccessPointsResponse_FieldSubPath{selector: ListAccessPointsResponse_FieldPathSelectorAccessPoints, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListAccessPointsResponse", fp)
}

func ParseListAccessPointsResponse_FieldPath(rawField string) (ListAccessPointsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListAccessPointsResponse_FieldPath(fp)
}

func MustParseListAccessPointsResponse_FieldPath(rawField string) ListAccessPointsResponse_FieldPath {
	fp, err := ParseListAccessPointsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListAccessPointsResponse_FieldTerminalPath struct {
	selector ListAccessPointsResponse_FieldPathSelector
}

var _ ListAccessPointsResponse_FieldPath = (*ListAccessPointsResponse_FieldTerminalPath)(nil)

func (fp *ListAccessPointsResponse_FieldTerminalPath) Selector() ListAccessPointsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListAccessPointsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListAccessPointsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListAccessPointsResponse
func (fp *ListAccessPointsResponse_FieldTerminalPath) Get(source *ListAccessPointsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
			for _, value := range source.GetAccessPoints() {
				values = append(values, value)
			}
		case ListAccessPointsResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListAccessPointsResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListAccessPointsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListAccessPointsResponse))
}

// GetSingle returns value pointed by specific field of from source ListAccessPointsResponse
func (fp *ListAccessPointsResponse_FieldTerminalPath) GetSingle(source *ListAccessPointsResponse) (interface{}, bool) {
	switch fp.selector {
	case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
		res := source.GetAccessPoints()
		return res, res != nil
	case ListAccessPointsResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListAccessPointsResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fp.selector))
	}
}

func (fp *ListAccessPointsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListAccessPointsResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListAccessPointsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
		return ([]*access_point.AccessPoint)(nil)
	case ListAccessPointsResponse_FieldPathSelectorPrevPageToken:
		return (*access_point.PagerCursor)(nil)
	case ListAccessPointsResponse_FieldPathSelectorNextPageToken:
		return (*access_point.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fp.selector))
	}
}

func (fp *ListAccessPointsResponse_FieldTerminalPath) ClearValue(item *ListAccessPointsResponse) {
	if item != nil {
		switch fp.selector {
		case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
			item.AccessPoints = nil
		case ListAccessPointsResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListAccessPointsResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fp.selector))
		}
	}
}

func (fp *ListAccessPointsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListAccessPointsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListAccessPointsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListAccessPointsResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListAccessPointsResponse_FieldPathSelectorNextPageToken
}

func (fp *ListAccessPointsResponse_FieldTerminalPath) WithIValue(value interface{}) ListAccessPointsResponse_FieldPathValue {
	switch fp.selector {
	case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
		return &ListAccessPointsResponse_FieldTerminalPathValue{ListAccessPointsResponse_FieldTerminalPath: *fp, value: value.([]*access_point.AccessPoint)}
	case ListAccessPointsResponse_FieldPathSelectorPrevPageToken:
		return &ListAccessPointsResponse_FieldTerminalPathValue{ListAccessPointsResponse_FieldTerminalPath: *fp, value: value.(*access_point.PagerCursor)}
	case ListAccessPointsResponse_FieldPathSelectorNextPageToken:
		return &ListAccessPointsResponse_FieldTerminalPathValue{ListAccessPointsResponse_FieldTerminalPath: *fp, value: value.(*access_point.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fp.selector))
	}
}

func (fp *ListAccessPointsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListAccessPointsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListAccessPointsResponse_FieldPathArrayOfValues {
	fpaov := &ListAccessPointsResponse_FieldTerminalPathArrayOfValues{ListAccessPointsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
		return &ListAccessPointsResponse_FieldTerminalPathArrayOfValues{ListAccessPointsResponse_FieldTerminalPath: *fp, values: values.([][]*access_point.AccessPoint)}
	case ListAccessPointsResponse_FieldPathSelectorPrevPageToken:
		return &ListAccessPointsResponse_FieldTerminalPathArrayOfValues{ListAccessPointsResponse_FieldTerminalPath: *fp, values: values.([]*access_point.PagerCursor)}
	case ListAccessPointsResponse_FieldPathSelectorNextPageToken:
		return &ListAccessPointsResponse_FieldTerminalPathArrayOfValues{ListAccessPointsResponse_FieldTerminalPath: *fp, values: values.([]*access_point.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListAccessPointsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListAccessPointsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListAccessPointsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
		return &ListAccessPointsResponse_FieldTerminalPathArrayItemValue{ListAccessPointsResponse_FieldTerminalPath: *fp, value: value.(*access_point.AccessPoint)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fp.selector))
	}
}

func (fp *ListAccessPointsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListAccessPointsResponse_FieldSubPath struct {
	selector ListAccessPointsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListAccessPointsResponse_FieldPath = (*ListAccessPointsResponse_FieldSubPath)(nil)

func (fps *ListAccessPointsResponse_FieldSubPath) Selector() ListAccessPointsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListAccessPointsResponse_FieldSubPath) AsAccessPointsSubPath() (access_point.AccessPoint_FieldPath, bool) {
	res, ok := fps.subPath.(access_point.AccessPoint_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListAccessPointsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListAccessPointsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListAccessPointsResponse
func (fps *ListAccessPointsResponse_FieldSubPath) Get(source *ListAccessPointsResponse) (values []interface{}) {
	if asAccessPointFieldPath, ok := fps.AsAccessPointsSubPath(); ok {
		for _, item := range source.GetAccessPoints() {
			values = append(values, asAccessPointFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fps.selector))
	}
	return
}

func (fps *ListAccessPointsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListAccessPointsResponse))
}

// GetSingle returns value of selected field from source ListAccessPointsResponse
func (fps *ListAccessPointsResponse_FieldSubPath) GetSingle(source *ListAccessPointsResponse) (interface{}, bool) {
	switch fps.selector {
	case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
		if len(source.GetAccessPoints()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAccessPoints()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fps.selector))
	}
}

func (fps *ListAccessPointsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListAccessPointsResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListAccessPointsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListAccessPointsResponse_FieldSubPath) ClearValue(item *ListAccessPointsResponse) {
	if item != nil {
		switch fps.selector {
		case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
			for _, subItem := range item.AccessPoints {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fps.selector))
		}
	}
}

func (fps *ListAccessPointsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListAccessPointsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListAccessPointsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListAccessPointsResponse_FieldSubPath) WithIValue(value interface{}) ListAccessPointsResponse_FieldPathValue {
	return &ListAccessPointsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListAccessPointsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListAccessPointsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListAccessPointsResponse_FieldPathArrayOfValues {
	return &ListAccessPointsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListAccessPointsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListAccessPointsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListAccessPointsResponse_FieldPathArrayItemValue {
	return &ListAccessPointsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListAccessPointsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListAccessPointsResponse_FieldPathValue allows storing values for ListAccessPointsResponse fields according to their type
type ListAccessPointsResponse_FieldPathValue interface {
	ListAccessPointsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListAccessPointsResponse)
	CompareWith(*ListAccessPointsResponse) (cmp int, comparable bool)
}

func ParseListAccessPointsResponse_FieldPathValue(pathStr, valueStr string) (ListAccessPointsResponse_FieldPathValue, error) {
	fp, err := ParseListAccessPointsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAccessPointsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListAccessPointsResponse_FieldPathValue), nil
}

func MustParseListAccessPointsResponse_FieldPathValue(pathStr, valueStr string) ListAccessPointsResponse_FieldPathValue {
	fpv, err := ParseListAccessPointsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListAccessPointsResponse_FieldTerminalPathValue struct {
	ListAccessPointsResponse_FieldTerminalPath
	value interface{}
}

var _ ListAccessPointsResponse_FieldPathValue = (*ListAccessPointsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListAccessPointsResponse' as interface{}
func (fpv *ListAccessPointsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListAccessPointsResponse_FieldTerminalPathValue) AsAccessPointsValue() ([]*access_point.AccessPoint, bool) {
	res, ok := fpv.value.([]*access_point.AccessPoint)
	return res, ok
}
func (fpv *ListAccessPointsResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*access_point.PagerCursor, bool) {
	res, ok := fpv.value.(*access_point.PagerCursor)
	return res, ok
}
func (fpv *ListAccessPointsResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*access_point.PagerCursor, bool) {
	res, ok := fpv.value.(*access_point.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListAccessPointsResponse
func (fpv *ListAccessPointsResponse_FieldTerminalPathValue) SetTo(target **ListAccessPointsResponse) {
	if *target == nil {
		*target = new(ListAccessPointsResponse)
	}
	switch fpv.selector {
	case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
		(*target).AccessPoints = fpv.value.([]*access_point.AccessPoint)
	case ListAccessPointsResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*access_point.PagerCursor)
	case ListAccessPointsResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*access_point.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fpv.selector))
	}
}

func (fpv *ListAccessPointsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAccessPointsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListAccessPointsResponse_FieldTerminalPathValue' with the value under path in 'ListAccessPointsResponse'.
func (fpv *ListAccessPointsResponse_FieldTerminalPathValue) CompareWith(source *ListAccessPointsResponse) (int, bool) {
	switch fpv.selector {
	case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
		return 0, false
	case ListAccessPointsResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListAccessPointsResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fpv.selector))
	}
}

func (fpv *ListAccessPointsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListAccessPointsResponse))
}

type ListAccessPointsResponse_FieldSubPathValue struct {
	ListAccessPointsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListAccessPointsResponse_FieldPathValue = (*ListAccessPointsResponse_FieldSubPathValue)(nil)

func (fpvs *ListAccessPointsResponse_FieldSubPathValue) AsAccessPointsPathValue() (access_point.AccessPoint_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(access_point.AccessPoint_FieldPathValue)
	return res, ok
}

func (fpvs *ListAccessPointsResponse_FieldSubPathValue) SetTo(target **ListAccessPointsResponse) {
	if *target == nil {
		*target = new(ListAccessPointsResponse)
	}
	switch fpvs.Selector() {
	case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAccessPointsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListAccessPointsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListAccessPointsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListAccessPointsResponse_FieldSubPathValue) CompareWith(source *ListAccessPointsResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListAccessPointsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListAccessPointsResponse))
}

// ListAccessPointsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListAccessPointsResponse according to their type
// Present only for array (repeated) types.
type ListAccessPointsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListAccessPointsResponse_FieldPath
	ContainsValue(*ListAccessPointsResponse) bool
}

// ParseListAccessPointsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListAccessPointsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListAccessPointsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListAccessPointsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAccessPointsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListAccessPointsResponse_FieldPathArrayItemValue), nil
}

func MustParseListAccessPointsResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListAccessPointsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListAccessPointsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListAccessPointsResponse_FieldTerminalPathArrayItemValue struct {
	ListAccessPointsResponse_FieldTerminalPath
	value interface{}
}

var _ ListAccessPointsResponse_FieldPathArrayItemValue = (*ListAccessPointsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListAccessPointsResponse as interface{}
func (fpaiv *ListAccessPointsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListAccessPointsResponse_FieldTerminalPathArrayItemValue) AsAccessPointsItemValue() (*access_point.AccessPoint, bool) {
	res, ok := fpaiv.value.(*access_point.AccessPoint)
	return res, ok
}

func (fpaiv *ListAccessPointsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListAccessPointsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListAccessPointsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListAccessPointsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAccessPointsResponse'
func (fpaiv *ListAccessPointsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListAccessPointsResponse) bool {
	slice := fpaiv.ListAccessPointsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListAccessPointsResponse_FieldSubPathArrayItemValue struct {
	ListAccessPointsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListAccessPointsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListAccessPointsResponse_FieldSubPathArrayItemValue) AsAccessPointsPathItemValue() (access_point.AccessPoint_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(access_point.AccessPoint_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListAccessPointsResponse'
func (fpaivs *ListAccessPointsResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListAccessPointsResponse) bool {
	switch fpaivs.Selector() {
	case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListAccessPointsResponse: %d", fpaivs.Selector()))
	}
}

// ListAccessPointsResponse_FieldPathArrayOfValues allows storing slice of values for ListAccessPointsResponse fields according to their type
type ListAccessPointsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListAccessPointsResponse_FieldPath
}

func ParseListAccessPointsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListAccessPointsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListAccessPointsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListAccessPointsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListAccessPointsResponse_FieldPathArrayOfValues), nil
}

func MustParseListAccessPointsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListAccessPointsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListAccessPointsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListAccessPointsResponse_FieldTerminalPathArrayOfValues struct {
	ListAccessPointsResponse_FieldTerminalPath
	values interface{}
}

var _ ListAccessPointsResponse_FieldPathArrayOfValues = (*ListAccessPointsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListAccessPointsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListAccessPointsResponse_FieldPathSelectorAccessPoints:
		for _, v := range fpaov.values.([][]*access_point.AccessPoint) {
			values = append(values, v)
		}
	case ListAccessPointsResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*access_point.PagerCursor) {
			values = append(values, v)
		}
	case ListAccessPointsResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*access_point.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListAccessPointsResponse_FieldTerminalPathArrayOfValues) AsAccessPointsArrayOfValues() ([][]*access_point.AccessPoint, bool) {
	res, ok := fpaov.values.([][]*access_point.AccessPoint)
	return res, ok
}
func (fpaov *ListAccessPointsResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*access_point.PagerCursor, bool) {
	res, ok := fpaov.values.([]*access_point.PagerCursor)
	return res, ok
}
func (fpaov *ListAccessPointsResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*access_point.PagerCursor, bool) {
	res, ok := fpaov.values.([]*access_point.PagerCursor)
	return res, ok
}

type ListAccessPointsResponse_FieldSubPathArrayOfValues struct {
	ListAccessPointsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListAccessPointsResponse_FieldPathArrayOfValues = (*ListAccessPointsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListAccessPointsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListAccessPointsResponse_FieldSubPathArrayOfValues) AsAccessPointsPathArrayOfValues() (access_point.AccessPoint_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(access_point.AccessPoint_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAccessPointRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAccessPointRequest_FieldPathSelector
	Get(source *WatchAccessPointRequest) []interface{}
	GetSingle(source *WatchAccessPointRequest) (interface{}, bool)
	ClearValue(item *WatchAccessPointRequest)

	// Those methods build corresponding WatchAccessPointRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAccessPointRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAccessPointRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAccessPointRequest_FieldPathArrayItemValue
}

type WatchAccessPointRequest_FieldPathSelector int32

const (
	WatchAccessPointRequest_FieldPathSelectorName      WatchAccessPointRequest_FieldPathSelector = 0
	WatchAccessPointRequest_FieldPathSelectorFieldMask WatchAccessPointRequest_FieldPathSelector = 1
	WatchAccessPointRequest_FieldPathSelectorView      WatchAccessPointRequest_FieldPathSelector = 2
)

func (s WatchAccessPointRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAccessPointRequest_FieldPathSelectorName:
		return "name"
	case WatchAccessPointRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAccessPointRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointRequest: %d", s))
	}
}

func BuildWatchAccessPointRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAccessPointRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAccessPointRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchAccessPointRequest_FieldTerminalPath{selector: WatchAccessPointRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAccessPointRequest_FieldTerminalPath{selector: WatchAccessPointRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAccessPointRequest_FieldTerminalPath{selector: WatchAccessPointRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAccessPointRequest", fp)
}

func ParseWatchAccessPointRequest_FieldPath(rawField string) (WatchAccessPointRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAccessPointRequest_FieldPath(fp)
}

func MustParseWatchAccessPointRequest_FieldPath(rawField string) WatchAccessPointRequest_FieldPath {
	fp, err := ParseWatchAccessPointRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAccessPointRequest_FieldTerminalPath struct {
	selector WatchAccessPointRequest_FieldPathSelector
}

var _ WatchAccessPointRequest_FieldPath = (*WatchAccessPointRequest_FieldTerminalPath)(nil)

func (fp *WatchAccessPointRequest_FieldTerminalPath) Selector() WatchAccessPointRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAccessPointRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAccessPointRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAccessPointRequest
func (fp *WatchAccessPointRequest_FieldTerminalPath) Get(source *WatchAccessPointRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAccessPointRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchAccessPointRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAccessPointRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAccessPointRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAccessPointRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAccessPointRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAccessPointRequest
func (fp *WatchAccessPointRequest_FieldTerminalPath) GetSingle(source *WatchAccessPointRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAccessPointRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchAccessPointRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAccessPointRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointRequest: %d", fp.selector))
	}
}

func (fp *WatchAccessPointRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAccessPointRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAccessPointRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAccessPointRequest_FieldPathSelectorName:
		return (*access_point.Reference)(nil)
	case WatchAccessPointRequest_FieldPathSelectorFieldMask:
		return (*access_point.AccessPoint_FieldMask)(nil)
	case WatchAccessPointRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointRequest: %d", fp.selector))
	}
}

func (fp *WatchAccessPointRequest_FieldTerminalPath) ClearValue(item *WatchAccessPointRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAccessPointRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchAccessPointRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAccessPointRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAccessPointRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAccessPointRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAccessPointRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAccessPointRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAccessPointRequest_FieldPathSelectorName ||
		fp.selector == WatchAccessPointRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAccessPointRequest_FieldPathSelectorView
}

func (fp *WatchAccessPointRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAccessPointRequest_FieldPathValue {
	switch fp.selector {
	case WatchAccessPointRequest_FieldPathSelectorName:
		return &WatchAccessPointRequest_FieldTerminalPathValue{WatchAccessPointRequest_FieldTerminalPath: *fp, value: value.(*access_point.Reference)}
	case WatchAccessPointRequest_FieldPathSelectorFieldMask:
		return &WatchAccessPointRequest_FieldTerminalPathValue{WatchAccessPointRequest_FieldTerminalPath: *fp, value: value.(*access_point.AccessPoint_FieldMask)}
	case WatchAccessPointRequest_FieldPathSelectorView:
		return &WatchAccessPointRequest_FieldTerminalPathValue{WatchAccessPointRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointRequest: %d", fp.selector))
	}
}

func (fp *WatchAccessPointRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAccessPointRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAccessPointRequest_FieldPathArrayOfValues {
	fpaov := &WatchAccessPointRequest_FieldTerminalPathArrayOfValues{WatchAccessPointRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAccessPointRequest_FieldPathSelectorName:
		return &WatchAccessPointRequest_FieldTerminalPathArrayOfValues{WatchAccessPointRequest_FieldTerminalPath: *fp, values: values.([]*access_point.Reference)}
	case WatchAccessPointRequest_FieldPathSelectorFieldMask:
		return &WatchAccessPointRequest_FieldTerminalPathArrayOfValues{WatchAccessPointRequest_FieldTerminalPath: *fp, values: values.([]*access_point.AccessPoint_FieldMask)}
	case WatchAccessPointRequest_FieldPathSelectorView:
		return &WatchAccessPointRequest_FieldTerminalPathArrayOfValues{WatchAccessPointRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAccessPointRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAccessPointRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAccessPointRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointRequest: %d", fp.selector))
	}
}

func (fp *WatchAccessPointRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAccessPointRequest_FieldPathValue allows storing values for WatchAccessPointRequest fields according to their type
type WatchAccessPointRequest_FieldPathValue interface {
	WatchAccessPointRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAccessPointRequest)
	CompareWith(*WatchAccessPointRequest) (cmp int, comparable bool)
}

func ParseWatchAccessPointRequest_FieldPathValue(pathStr, valueStr string) (WatchAccessPointRequest_FieldPathValue, error) {
	fp, err := ParseWatchAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAccessPointRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAccessPointRequest_FieldPathValue), nil
}

func MustParseWatchAccessPointRequest_FieldPathValue(pathStr, valueStr string) WatchAccessPointRequest_FieldPathValue {
	fpv, err := ParseWatchAccessPointRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAccessPointRequest_FieldTerminalPathValue struct {
	WatchAccessPointRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAccessPointRequest_FieldPathValue = (*WatchAccessPointRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAccessPointRequest' as interface{}
func (fpv *WatchAccessPointRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAccessPointRequest_FieldTerminalPathValue) AsNameValue() (*access_point.Reference, bool) {
	res, ok := fpv.value.(*access_point.Reference)
	return res, ok
}
func (fpv *WatchAccessPointRequest_FieldTerminalPathValue) AsFieldMaskValue() (*access_point.AccessPoint_FieldMask, bool) {
	res, ok := fpv.value.(*access_point.AccessPoint_FieldMask)
	return res, ok
}
func (fpv *WatchAccessPointRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchAccessPointRequest
func (fpv *WatchAccessPointRequest_FieldTerminalPathValue) SetTo(target **WatchAccessPointRequest) {
	if *target == nil {
		*target = new(WatchAccessPointRequest)
	}
	switch fpv.selector {
	case WatchAccessPointRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*access_point.Reference)
	case WatchAccessPointRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*access_point.AccessPoint_FieldMask)
	case WatchAccessPointRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAccessPointRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAccessPointRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAccessPointRequest_FieldTerminalPathValue' with the value under path in 'WatchAccessPointRequest'.
func (fpv *WatchAccessPointRequest_FieldTerminalPathValue) CompareWith(source *WatchAccessPointRequest) (int, bool) {
	switch fpv.selector {
	case WatchAccessPointRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*access_point.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAccessPointRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAccessPointRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAccessPointRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAccessPointRequest))
}

// WatchAccessPointRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAccessPointRequest according to their type
// Present only for array (repeated) types.
type WatchAccessPointRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAccessPointRequest_FieldPath
	ContainsValue(*WatchAccessPointRequest) bool
}

// ParseWatchAccessPointRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAccessPointRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAccessPointRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAccessPointRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAccessPointRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAccessPointRequest_FieldTerminalPathArrayItemValue struct {
	WatchAccessPointRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAccessPointRequest_FieldPathArrayItemValue = (*WatchAccessPointRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAccessPointRequest as interface{}
func (fpaiv *WatchAccessPointRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAccessPointRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAccessPointRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAccessPointRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAccessPointRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAccessPointRequest'
func (fpaiv *WatchAccessPointRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAccessPointRequest) bool {
	slice := fpaiv.WatchAccessPointRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAccessPointRequest_FieldPathArrayOfValues allows storing slice of values for WatchAccessPointRequest fields according to their type
type WatchAccessPointRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAccessPointRequest_FieldPath
}

func ParseWatchAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAccessPointRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAccessPointRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAccessPointRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAccessPointRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAccessPointRequest_FieldTerminalPathArrayOfValues struct {
	WatchAccessPointRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAccessPointRequest_FieldPathArrayOfValues = (*WatchAccessPointRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAccessPointRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAccessPointRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*access_point.Reference) {
			values = append(values, v)
		}
	case WatchAccessPointRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*access_point.AccessPoint_FieldMask) {
			values = append(values, v)
		}
	case WatchAccessPointRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAccessPointRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*access_point.Reference, bool) {
	res, ok := fpaov.values.([]*access_point.Reference)
	return res, ok
}
func (fpaov *WatchAccessPointRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*access_point.AccessPoint_FieldMask, bool) {
	res, ok := fpaov.values.([]*access_point.AccessPoint_FieldMask)
	return res, ok
}
func (fpaov *WatchAccessPointRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAccessPointResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAccessPointResponse_FieldPathSelector
	Get(source *WatchAccessPointResponse) []interface{}
	GetSingle(source *WatchAccessPointResponse) (interface{}, bool)
	ClearValue(item *WatchAccessPointResponse)

	// Those methods build corresponding WatchAccessPointResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAccessPointResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAccessPointResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAccessPointResponse_FieldPathArrayItemValue
}

type WatchAccessPointResponse_FieldPathSelector int32

const (
	WatchAccessPointResponse_FieldPathSelectorChange WatchAccessPointResponse_FieldPathSelector = 0
)

func (s WatchAccessPointResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAccessPointResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointResponse: %d", s))
	}
}

func BuildWatchAccessPointResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAccessPointResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAccessPointResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchAccessPointResponse_FieldTerminalPath{selector: WatchAccessPointResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAccessPointResponse", fp)
}

func ParseWatchAccessPointResponse_FieldPath(rawField string) (WatchAccessPointResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAccessPointResponse_FieldPath(fp)
}

func MustParseWatchAccessPointResponse_FieldPath(rawField string) WatchAccessPointResponse_FieldPath {
	fp, err := ParseWatchAccessPointResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAccessPointResponse_FieldTerminalPath struct {
	selector WatchAccessPointResponse_FieldPathSelector
}

var _ WatchAccessPointResponse_FieldPath = (*WatchAccessPointResponse_FieldTerminalPath)(nil)

func (fp *WatchAccessPointResponse_FieldTerminalPath) Selector() WatchAccessPointResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAccessPointResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAccessPointResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAccessPointResponse
func (fp *WatchAccessPointResponse_FieldTerminalPath) Get(source *WatchAccessPointResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAccessPointResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAccessPointResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAccessPointResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAccessPointResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAccessPointResponse
func (fp *WatchAccessPointResponse_FieldTerminalPath) GetSingle(source *WatchAccessPointResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAccessPointResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointResponse: %d", fp.selector))
	}
}

func (fp *WatchAccessPointResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAccessPointResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAccessPointResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAccessPointResponse_FieldPathSelectorChange:
		return (*access_point.AccessPointChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointResponse: %d", fp.selector))
	}
}

func (fp *WatchAccessPointResponse_FieldTerminalPath) ClearValue(item *WatchAccessPointResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAccessPointResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAccessPointResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAccessPointResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAccessPointResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAccessPointResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAccessPointResponse_FieldPathSelectorChange
}

func (fp *WatchAccessPointResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAccessPointResponse_FieldPathValue {
	switch fp.selector {
	case WatchAccessPointResponse_FieldPathSelectorChange:
		return &WatchAccessPointResponse_FieldTerminalPathValue{WatchAccessPointResponse_FieldTerminalPath: *fp, value: value.(*access_point.AccessPointChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointResponse: %d", fp.selector))
	}
}

func (fp *WatchAccessPointResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAccessPointResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAccessPointResponse_FieldPathArrayOfValues {
	fpaov := &WatchAccessPointResponse_FieldTerminalPathArrayOfValues{WatchAccessPointResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAccessPointResponse_FieldPathSelectorChange:
		return &WatchAccessPointResponse_FieldTerminalPathArrayOfValues{WatchAccessPointResponse_FieldTerminalPath: *fp, values: values.([]*access_point.AccessPointChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAccessPointResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAccessPointResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAccessPointResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointResponse: %d", fp.selector))
	}
}

func (fp *WatchAccessPointResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAccessPointResponse_FieldPathValue allows storing values for WatchAccessPointResponse fields according to their type
type WatchAccessPointResponse_FieldPathValue interface {
	WatchAccessPointResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAccessPointResponse)
	CompareWith(*WatchAccessPointResponse) (cmp int, comparable bool)
}

func ParseWatchAccessPointResponse_FieldPathValue(pathStr, valueStr string) (WatchAccessPointResponse_FieldPathValue, error) {
	fp, err := ParseWatchAccessPointResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAccessPointResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAccessPointResponse_FieldPathValue), nil
}

func MustParseWatchAccessPointResponse_FieldPathValue(pathStr, valueStr string) WatchAccessPointResponse_FieldPathValue {
	fpv, err := ParseWatchAccessPointResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAccessPointResponse_FieldTerminalPathValue struct {
	WatchAccessPointResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAccessPointResponse_FieldPathValue = (*WatchAccessPointResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAccessPointResponse' as interface{}
func (fpv *WatchAccessPointResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAccessPointResponse_FieldTerminalPathValue) AsChangeValue() (*access_point.AccessPointChange, bool) {
	res, ok := fpv.value.(*access_point.AccessPointChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchAccessPointResponse
func (fpv *WatchAccessPointResponse_FieldTerminalPathValue) SetTo(target **WatchAccessPointResponse) {
	if *target == nil {
		*target = new(WatchAccessPointResponse)
	}
	switch fpv.selector {
	case WatchAccessPointResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*access_point.AccessPointChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAccessPointResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAccessPointResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAccessPointResponse_FieldTerminalPathValue' with the value under path in 'WatchAccessPointResponse'.
func (fpv *WatchAccessPointResponse_FieldTerminalPathValue) CompareWith(source *WatchAccessPointResponse) (int, bool) {
	switch fpv.selector {
	case WatchAccessPointResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAccessPointResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAccessPointResponse))
}

// WatchAccessPointResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAccessPointResponse according to their type
// Present only for array (repeated) types.
type WatchAccessPointResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAccessPointResponse_FieldPath
	ContainsValue(*WatchAccessPointResponse) bool
}

// ParseWatchAccessPointResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAccessPointResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAccessPointResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAccessPointResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAccessPointResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAccessPointResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAccessPointResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAccessPointResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAccessPointResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAccessPointResponse_FieldTerminalPathArrayItemValue struct {
	WatchAccessPointResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAccessPointResponse_FieldPathArrayItemValue = (*WatchAccessPointResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAccessPointResponse as interface{}
func (fpaiv *WatchAccessPointResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAccessPointResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAccessPointResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAccessPointResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAccessPointResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAccessPointResponse'
func (fpaiv *WatchAccessPointResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAccessPointResponse) bool {
	slice := fpaiv.WatchAccessPointResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAccessPointResponse_FieldPathArrayOfValues allows storing slice of values for WatchAccessPointResponse fields according to their type
type WatchAccessPointResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAccessPointResponse_FieldPath
}

func ParseWatchAccessPointResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAccessPointResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAccessPointResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAccessPointResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAccessPointResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAccessPointResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAccessPointResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAccessPointResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAccessPointResponse_FieldTerminalPathArrayOfValues struct {
	WatchAccessPointResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAccessPointResponse_FieldPathArrayOfValues = (*WatchAccessPointResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAccessPointResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAccessPointResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*access_point.AccessPointChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAccessPointResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*access_point.AccessPointChange, bool) {
	res, ok := fpaov.values.([]*access_point.AccessPointChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAccessPointsRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAccessPointsRequest_FieldPathSelector
	Get(source *WatchAccessPointsRequest) []interface{}
	GetSingle(source *WatchAccessPointsRequest) (interface{}, bool)
	ClearValue(item *WatchAccessPointsRequest)

	// Those methods build corresponding WatchAccessPointsRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAccessPointsRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAccessPointsRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAccessPointsRequest_FieldPathArrayItemValue
}

type WatchAccessPointsRequest_FieldPathSelector int32

const (
	WatchAccessPointsRequest_FieldPathSelectorType         WatchAccessPointsRequest_FieldPathSelector = 0
	WatchAccessPointsRequest_FieldPathSelectorParent       WatchAccessPointsRequest_FieldPathSelector = 1
	WatchAccessPointsRequest_FieldPathSelectorPageSize     WatchAccessPointsRequest_FieldPathSelector = 2
	WatchAccessPointsRequest_FieldPathSelectorPageToken    WatchAccessPointsRequest_FieldPathSelector = 3
	WatchAccessPointsRequest_FieldPathSelectorOrderBy      WatchAccessPointsRequest_FieldPathSelector = 4
	WatchAccessPointsRequest_FieldPathSelectorResumeToken  WatchAccessPointsRequest_FieldPathSelector = 5
	WatchAccessPointsRequest_FieldPathSelectorFilter       WatchAccessPointsRequest_FieldPathSelector = 6
	WatchAccessPointsRequest_FieldPathSelectorFieldMask    WatchAccessPointsRequest_FieldPathSelector = 7
	WatchAccessPointsRequest_FieldPathSelectorView         WatchAccessPointsRequest_FieldPathSelector = 8
	WatchAccessPointsRequest_FieldPathSelectorMaxChunkSize WatchAccessPointsRequest_FieldPathSelector = 9
)

func (s WatchAccessPointsRequest_FieldPathSelector) String() string {
	switch s {
	case WatchAccessPointsRequest_FieldPathSelectorType:
		return "type"
	case WatchAccessPointsRequest_FieldPathSelectorParent:
		return "parent"
	case WatchAccessPointsRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchAccessPointsRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchAccessPointsRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchAccessPointsRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAccessPointsRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchAccessPointsRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchAccessPointsRequest_FieldPathSelectorView:
		return "view"
	case WatchAccessPointsRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsRequest: %d", s))
	}
}

func BuildWatchAccessPointsRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchAccessPointsRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAccessPointsRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAccessPointsRequest", fp)
}

func ParseWatchAccessPointsRequest_FieldPath(rawField string) (WatchAccessPointsRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAccessPointsRequest_FieldPath(fp)
}

func MustParseWatchAccessPointsRequest_FieldPath(rawField string) WatchAccessPointsRequest_FieldPath {
	fp, err := ParseWatchAccessPointsRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAccessPointsRequest_FieldTerminalPath struct {
	selector WatchAccessPointsRequest_FieldPathSelector
}

var _ WatchAccessPointsRequest_FieldPath = (*WatchAccessPointsRequest_FieldTerminalPath)(nil)

func (fp *WatchAccessPointsRequest_FieldTerminalPath) Selector() WatchAccessPointsRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAccessPointsRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAccessPointsRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAccessPointsRequest
func (fp *WatchAccessPointsRequest_FieldTerminalPath) Get(source *WatchAccessPointsRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAccessPointsRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchAccessPointsRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchAccessPointsRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchAccessPointsRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchAccessPointsRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchAccessPointsRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAccessPointsRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchAccessPointsRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchAccessPointsRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchAccessPointsRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAccessPointsRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAccessPointsRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAccessPointsRequest))
}

// GetSingle returns value pointed by specific field of from source WatchAccessPointsRequest
func (fp *WatchAccessPointsRequest_FieldTerminalPath) GetSingle(source *WatchAccessPointsRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchAccessPointsRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchAccessPointsRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchAccessPointsRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchAccessPointsRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchAccessPointsRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchAccessPointsRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAccessPointsRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchAccessPointsRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchAccessPointsRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchAccessPointsRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsRequest: %d", fp.selector))
	}
}

func (fp *WatchAccessPointsRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAccessPointsRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchAccessPointsRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAccessPointsRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchAccessPointsRequest_FieldPathSelectorParent:
		return (*access_point.ParentReference)(nil)
	case WatchAccessPointsRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchAccessPointsRequest_FieldPathSelectorPageToken:
		return (*access_point.PagerCursor)(nil)
	case WatchAccessPointsRequest_FieldPathSelectorOrderBy:
		return (*access_point.OrderBy)(nil)
	case WatchAccessPointsRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchAccessPointsRequest_FieldPathSelectorFilter:
		return (*access_point.Filter)(nil)
	case WatchAccessPointsRequest_FieldPathSelectorFieldMask:
		return (*access_point.AccessPoint_FieldMask)(nil)
	case WatchAccessPointsRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchAccessPointsRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsRequest: %d", fp.selector))
	}
}

func (fp *WatchAccessPointsRequest_FieldTerminalPath) ClearValue(item *WatchAccessPointsRequest) {
	if item != nil {
		switch fp.selector {
		case WatchAccessPointsRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchAccessPointsRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchAccessPointsRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchAccessPointsRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchAccessPointsRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchAccessPointsRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAccessPointsRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchAccessPointsRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchAccessPointsRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchAccessPointsRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAccessPointsRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchAccessPointsRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAccessPointsRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAccessPointsRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAccessPointsRequest_FieldPathSelectorType ||
		fp.selector == WatchAccessPointsRequest_FieldPathSelectorParent ||
		fp.selector == WatchAccessPointsRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchAccessPointsRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchAccessPointsRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchAccessPointsRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchAccessPointsRequest_FieldPathSelectorFilter ||
		fp.selector == WatchAccessPointsRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchAccessPointsRequest_FieldPathSelectorView ||
		fp.selector == WatchAccessPointsRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchAccessPointsRequest_FieldTerminalPath) WithIValue(value interface{}) WatchAccessPointsRequest_FieldPathValue {
	switch fp.selector {
	case WatchAccessPointsRequest_FieldPathSelectorType:
		return &WatchAccessPointsRequest_FieldTerminalPathValue{WatchAccessPointsRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchAccessPointsRequest_FieldPathSelectorParent:
		return &WatchAccessPointsRequest_FieldTerminalPathValue{WatchAccessPointsRequest_FieldTerminalPath: *fp, value: value.(*access_point.ParentReference)}
	case WatchAccessPointsRequest_FieldPathSelectorPageSize:
		return &WatchAccessPointsRequest_FieldTerminalPathValue{WatchAccessPointsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchAccessPointsRequest_FieldPathSelectorPageToken:
		return &WatchAccessPointsRequest_FieldTerminalPathValue{WatchAccessPointsRequest_FieldTerminalPath: *fp, value: value.(*access_point.PagerCursor)}
	case WatchAccessPointsRequest_FieldPathSelectorOrderBy:
		return &WatchAccessPointsRequest_FieldTerminalPathValue{WatchAccessPointsRequest_FieldTerminalPath: *fp, value: value.(*access_point.OrderBy)}
	case WatchAccessPointsRequest_FieldPathSelectorResumeToken:
		return &WatchAccessPointsRequest_FieldTerminalPathValue{WatchAccessPointsRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAccessPointsRequest_FieldPathSelectorFilter:
		return &WatchAccessPointsRequest_FieldTerminalPathValue{WatchAccessPointsRequest_FieldTerminalPath: *fp, value: value.(*access_point.Filter)}
	case WatchAccessPointsRequest_FieldPathSelectorFieldMask:
		return &WatchAccessPointsRequest_FieldTerminalPathValue{WatchAccessPointsRequest_FieldTerminalPath: *fp, value: value.(*access_point.AccessPoint_FieldMask)}
	case WatchAccessPointsRequest_FieldPathSelectorView:
		return &WatchAccessPointsRequest_FieldTerminalPathValue{WatchAccessPointsRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchAccessPointsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAccessPointsRequest_FieldTerminalPathValue{WatchAccessPointsRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsRequest: %d", fp.selector))
	}
}

func (fp *WatchAccessPointsRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAccessPointsRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAccessPointsRequest_FieldPathArrayOfValues {
	fpaov := &WatchAccessPointsRequest_FieldTerminalPathArrayOfValues{WatchAccessPointsRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAccessPointsRequest_FieldPathSelectorType:
		return &WatchAccessPointsRequest_FieldTerminalPathArrayOfValues{WatchAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchAccessPointsRequest_FieldPathSelectorParent:
		return &WatchAccessPointsRequest_FieldTerminalPathArrayOfValues{WatchAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]*access_point.ParentReference)}
	case WatchAccessPointsRequest_FieldPathSelectorPageSize:
		return &WatchAccessPointsRequest_FieldTerminalPathArrayOfValues{WatchAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchAccessPointsRequest_FieldPathSelectorPageToken:
		return &WatchAccessPointsRequest_FieldTerminalPathArrayOfValues{WatchAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]*access_point.PagerCursor)}
	case WatchAccessPointsRequest_FieldPathSelectorOrderBy:
		return &WatchAccessPointsRequest_FieldTerminalPathArrayOfValues{WatchAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]*access_point.OrderBy)}
	case WatchAccessPointsRequest_FieldPathSelectorResumeToken:
		return &WatchAccessPointsRequest_FieldTerminalPathArrayOfValues{WatchAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAccessPointsRequest_FieldPathSelectorFilter:
		return &WatchAccessPointsRequest_FieldTerminalPathArrayOfValues{WatchAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]*access_point.Filter)}
	case WatchAccessPointsRequest_FieldPathSelectorFieldMask:
		return &WatchAccessPointsRequest_FieldTerminalPathArrayOfValues{WatchAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]*access_point.AccessPoint_FieldMask)}
	case WatchAccessPointsRequest_FieldPathSelectorView:
		return &WatchAccessPointsRequest_FieldTerminalPathArrayOfValues{WatchAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchAccessPointsRequest_FieldPathSelectorMaxChunkSize:
		return &WatchAccessPointsRequest_FieldTerminalPathArrayOfValues{WatchAccessPointsRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAccessPointsRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAccessPointsRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAccessPointsRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsRequest: %d", fp.selector))
	}
}

func (fp *WatchAccessPointsRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAccessPointsRequest_FieldPathValue allows storing values for WatchAccessPointsRequest fields according to their type
type WatchAccessPointsRequest_FieldPathValue interface {
	WatchAccessPointsRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAccessPointsRequest)
	CompareWith(*WatchAccessPointsRequest) (cmp int, comparable bool)
}

func ParseWatchAccessPointsRequest_FieldPathValue(pathStr, valueStr string) (WatchAccessPointsRequest_FieldPathValue, error) {
	fp, err := ParseWatchAccessPointsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAccessPointsRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAccessPointsRequest_FieldPathValue), nil
}

func MustParseWatchAccessPointsRequest_FieldPathValue(pathStr, valueStr string) WatchAccessPointsRequest_FieldPathValue {
	fpv, err := ParseWatchAccessPointsRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAccessPointsRequest_FieldTerminalPathValue struct {
	WatchAccessPointsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAccessPointsRequest_FieldPathValue = (*WatchAccessPointsRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAccessPointsRequest' as interface{}
func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) AsParentValue() (*access_point.ParentReference, bool) {
	res, ok := fpv.value.(*access_point.ParentReference)
	return res, ok
}
func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) AsPageTokenValue() (*access_point.PagerCursor, bool) {
	res, ok := fpv.value.(*access_point.PagerCursor)
	return res, ok
}
func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) AsOrderByValue() (*access_point.OrderBy, bool) {
	res, ok := fpv.value.(*access_point.OrderBy)
	return res, ok
}
func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) AsFilterValue() (*access_point.Filter, bool) {
	res, ok := fpv.value.(*access_point.Filter)
	return res, ok
}
func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) AsFieldMaskValue() (*access_point.AccessPoint_FieldMask, bool) {
	res, ok := fpv.value.(*access_point.AccessPoint_FieldMask)
	return res, ok
}
func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchAccessPointsRequest
func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) SetTo(target **WatchAccessPointsRequest) {
	if *target == nil {
		*target = new(WatchAccessPointsRequest)
	}
	switch fpv.selector {
	case WatchAccessPointsRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchAccessPointsRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*access_point.ParentReference)
	case WatchAccessPointsRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchAccessPointsRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*access_point.PagerCursor)
	case WatchAccessPointsRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*access_point.OrderBy)
	case WatchAccessPointsRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAccessPointsRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*access_point.Filter)
	case WatchAccessPointsRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*access_point.AccessPoint_FieldMask)
	case WatchAccessPointsRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchAccessPointsRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAccessPointsRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAccessPointsRequest_FieldTerminalPathValue' with the value under path in 'WatchAccessPointsRequest'.
func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) CompareWith(source *WatchAccessPointsRequest) (int, bool) {
	switch fpv.selector {
	case WatchAccessPointsRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAccessPointsRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*access_point.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAccessPointsRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAccessPointsRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchAccessPointsRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchAccessPointsRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAccessPointsRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchAccessPointsRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchAccessPointsRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAccessPointsRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsRequest: %d", fpv.selector))
	}
}

func (fpv *WatchAccessPointsRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAccessPointsRequest))
}

// WatchAccessPointsRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAccessPointsRequest according to their type
// Present only for array (repeated) types.
type WatchAccessPointsRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAccessPointsRequest_FieldPath
	ContainsValue(*WatchAccessPointsRequest) bool
}

// ParseWatchAccessPointsRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAccessPointsRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAccessPointsRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAccessPointsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAccessPointsRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAccessPointsRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchAccessPointsRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchAccessPointsRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAccessPointsRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAccessPointsRequest_FieldTerminalPathArrayItemValue struct {
	WatchAccessPointsRequest_FieldTerminalPath
	value interface{}
}

var _ WatchAccessPointsRequest_FieldPathArrayItemValue = (*WatchAccessPointsRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAccessPointsRequest as interface{}
func (fpaiv *WatchAccessPointsRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAccessPointsRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAccessPointsRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAccessPointsRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAccessPointsRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAccessPointsRequest'
func (fpaiv *WatchAccessPointsRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAccessPointsRequest) bool {
	slice := fpaiv.WatchAccessPointsRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAccessPointsRequest_FieldPathArrayOfValues allows storing slice of values for WatchAccessPointsRequest fields according to their type
type WatchAccessPointsRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAccessPointsRequest_FieldPath
}

func ParseWatchAccessPointsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAccessPointsRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAccessPointsRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAccessPointsRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAccessPointsRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchAccessPointsRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAccessPointsRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAccessPointsRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAccessPointsRequest_FieldTerminalPathArrayOfValues struct {
	WatchAccessPointsRequest_FieldTerminalPath
	values interface{}
}

var _ WatchAccessPointsRequest_FieldPathArrayOfValues = (*WatchAccessPointsRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAccessPointsRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAccessPointsRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchAccessPointsRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*access_point.ParentReference) {
			values = append(values, v)
		}
	case WatchAccessPointsRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchAccessPointsRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*access_point.PagerCursor) {
			values = append(values, v)
		}
	case WatchAccessPointsRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*access_point.OrderBy) {
			values = append(values, v)
		}
	case WatchAccessPointsRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAccessPointsRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*access_point.Filter) {
			values = append(values, v)
		}
	case WatchAccessPointsRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*access_point.AccessPoint_FieldMask) {
			values = append(values, v)
		}
	case WatchAccessPointsRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchAccessPointsRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAccessPointsRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchAccessPointsRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*access_point.ParentReference, bool) {
	res, ok := fpaov.values.([]*access_point.ParentReference)
	return res, ok
}
func (fpaov *WatchAccessPointsRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchAccessPointsRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*access_point.PagerCursor, bool) {
	res, ok := fpaov.values.([]*access_point.PagerCursor)
	return res, ok
}
func (fpaov *WatchAccessPointsRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*access_point.OrderBy, bool) {
	res, ok := fpaov.values.([]*access_point.OrderBy)
	return res, ok
}
func (fpaov *WatchAccessPointsRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAccessPointsRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*access_point.Filter, bool) {
	res, ok := fpaov.values.([]*access_point.Filter)
	return res, ok
}
func (fpaov *WatchAccessPointsRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*access_point.AccessPoint_FieldMask, bool) {
	res, ok := fpaov.values.([]*access_point.AccessPoint_FieldMask)
	return res, ok
}
func (fpaov *WatchAccessPointsRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchAccessPointsRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAccessPointsResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAccessPointsResponse_FieldPathSelector
	Get(source *WatchAccessPointsResponse) []interface{}
	GetSingle(source *WatchAccessPointsResponse) (interface{}, bool)
	ClearValue(item *WatchAccessPointsResponse)

	// Those methods build corresponding WatchAccessPointsResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAccessPointsResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAccessPointsResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAccessPointsResponse_FieldPathArrayItemValue
}

type WatchAccessPointsResponse_FieldPathSelector int32

const (
	WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges WatchAccessPointsResponse_FieldPathSelector = 0
	WatchAccessPointsResponse_FieldPathSelectorIsCurrent          WatchAccessPointsResponse_FieldPathSelector = 1
	WatchAccessPointsResponse_FieldPathSelectorPageTokenChange    WatchAccessPointsResponse_FieldPathSelector = 2
	WatchAccessPointsResponse_FieldPathSelectorResumeToken        WatchAccessPointsResponse_FieldPathSelector = 3
	WatchAccessPointsResponse_FieldPathSelectorSnapshotSize       WatchAccessPointsResponse_FieldPathSelector = 4
	WatchAccessPointsResponse_FieldPathSelectorIsSoftReset        WatchAccessPointsResponse_FieldPathSelector = 5
	WatchAccessPointsResponse_FieldPathSelectorIsHardReset        WatchAccessPointsResponse_FieldPathSelector = 6
)

func (s WatchAccessPointsResponse_FieldPathSelector) String() string {
	switch s {
	case WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges:
		return "access_point_changes"
	case WatchAccessPointsResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchAccessPointsResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchAccessPointsResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchAccessPointsResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchAccessPointsResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", s))
	}
}

func BuildWatchAccessPointsResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchAccessPointsResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAccessPointsResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "access_point_changes", "accessPointChanges", "access-point-changes":
			return &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchAccessPointsResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchAccessPointsResponse_FieldSubPath{selector: WatchAccessPointsResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAccessPointsResponse", fp)
}

func ParseWatchAccessPointsResponse_FieldPath(rawField string) (WatchAccessPointsResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAccessPointsResponse_FieldPath(fp)
}

func MustParseWatchAccessPointsResponse_FieldPath(rawField string) WatchAccessPointsResponse_FieldPath {
	fp, err := ParseWatchAccessPointsResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAccessPointsResponse_FieldTerminalPath struct {
	selector WatchAccessPointsResponse_FieldPathSelector
}

var _ WatchAccessPointsResponse_FieldPath = (*WatchAccessPointsResponse_FieldTerminalPath)(nil)

func (fp *WatchAccessPointsResponse_FieldTerminalPath) Selector() WatchAccessPointsResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAccessPointsResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAccessPointsResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAccessPointsResponse
func (fp *WatchAccessPointsResponse_FieldTerminalPath) Get(source *WatchAccessPointsResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges:
			for _, value := range source.GetAccessPointChanges() {
				values = append(values, value)
			}
		case WatchAccessPointsResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchAccessPointsResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchAccessPointsResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchAccessPointsResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchAccessPointsResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAccessPointsResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAccessPointsResponse))
}

// GetSingle returns value pointed by specific field of from source WatchAccessPointsResponse
func (fp *WatchAccessPointsResponse_FieldTerminalPath) GetSingle(source *WatchAccessPointsResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges:
		res := source.GetAccessPointChanges()
		return res, res != nil
	case WatchAccessPointsResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchAccessPointsResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchAccessPointsResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchAccessPointsResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchAccessPointsResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fp.selector))
	}
}

func (fp *WatchAccessPointsResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAccessPointsResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchAccessPointsResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges:
		return ([]*access_point.AccessPointChange)(nil)
	case WatchAccessPointsResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
		return (*WatchAccessPointsResponse_PageTokenChange)(nil)
	case WatchAccessPointsResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchAccessPointsResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchAccessPointsResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchAccessPointsResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fp.selector))
	}
}

func (fp *WatchAccessPointsResponse_FieldTerminalPath) ClearValue(item *WatchAccessPointsResponse) {
	if item != nil {
		switch fp.selector {
		case WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges:
			item.AccessPointChanges = nil
		case WatchAccessPointsResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchAccessPointsResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchAccessPointsResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchAccessPointsResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchAccessPointsResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchAccessPointsResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAccessPointsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAccessPointsResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges ||
		fp.selector == WatchAccessPointsResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchAccessPointsResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchAccessPointsResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchAccessPointsResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchAccessPointsResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchAccessPointsResponse_FieldTerminalPath) WithIValue(value interface{}) WatchAccessPointsResponse_FieldPathValue {
	switch fp.selector {
	case WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges:
		return &WatchAccessPointsResponse_FieldTerminalPathValue{WatchAccessPointsResponse_FieldTerminalPath: *fp, value: value.([]*access_point.AccessPointChange)}
	case WatchAccessPointsResponse_FieldPathSelectorIsCurrent:
		return &WatchAccessPointsResponse_FieldTerminalPathValue{WatchAccessPointsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
		return &WatchAccessPointsResponse_FieldTerminalPathValue{WatchAccessPointsResponse_FieldTerminalPath: *fp, value: value.(*WatchAccessPointsResponse_PageTokenChange)}
	case WatchAccessPointsResponse_FieldPathSelectorResumeToken:
		return &WatchAccessPointsResponse_FieldTerminalPathValue{WatchAccessPointsResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchAccessPointsResponse_FieldPathSelectorSnapshotSize:
		return &WatchAccessPointsResponse_FieldTerminalPathValue{WatchAccessPointsResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchAccessPointsResponse_FieldPathSelectorIsSoftReset:
		return &WatchAccessPointsResponse_FieldTerminalPathValue{WatchAccessPointsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchAccessPointsResponse_FieldPathSelectorIsHardReset:
		return &WatchAccessPointsResponse_FieldTerminalPathValue{WatchAccessPointsResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fp.selector))
	}
}

func (fp *WatchAccessPointsResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAccessPointsResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAccessPointsResponse_FieldPathArrayOfValues {
	fpaov := &WatchAccessPointsResponse_FieldTerminalPathArrayOfValues{WatchAccessPointsResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges:
		return &WatchAccessPointsResponse_FieldTerminalPathArrayOfValues{WatchAccessPointsResponse_FieldTerminalPath: *fp, values: values.([][]*access_point.AccessPointChange)}
	case WatchAccessPointsResponse_FieldPathSelectorIsCurrent:
		return &WatchAccessPointsResponse_FieldTerminalPathArrayOfValues{WatchAccessPointsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
		return &WatchAccessPointsResponse_FieldTerminalPathArrayOfValues{WatchAccessPointsResponse_FieldTerminalPath: *fp, values: values.([]*WatchAccessPointsResponse_PageTokenChange)}
	case WatchAccessPointsResponse_FieldPathSelectorResumeToken:
		return &WatchAccessPointsResponse_FieldTerminalPathArrayOfValues{WatchAccessPointsResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchAccessPointsResponse_FieldPathSelectorSnapshotSize:
		return &WatchAccessPointsResponse_FieldTerminalPathArrayOfValues{WatchAccessPointsResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchAccessPointsResponse_FieldPathSelectorIsSoftReset:
		return &WatchAccessPointsResponse_FieldTerminalPathArrayOfValues{WatchAccessPointsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchAccessPointsResponse_FieldPathSelectorIsHardReset:
		return &WatchAccessPointsResponse_FieldTerminalPathArrayOfValues{WatchAccessPointsResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAccessPointsResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAccessPointsResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAccessPointsResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges:
		return &WatchAccessPointsResponse_FieldTerminalPathArrayItemValue{WatchAccessPointsResponse_FieldTerminalPath: *fp, value: value.(*access_point.AccessPointChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fp.selector))
	}
}

func (fp *WatchAccessPointsResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchAccessPointsResponse_FieldSubPath struct {
	selector WatchAccessPointsResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchAccessPointsResponse_FieldPath = (*WatchAccessPointsResponse_FieldSubPath)(nil)

func (fps *WatchAccessPointsResponse_FieldSubPath) Selector() WatchAccessPointsResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchAccessPointsResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchAccessPointsResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchAccessPointsResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchAccessPointsResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchAccessPointsResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchAccessPointsResponse
func (fps *WatchAccessPointsResponse_FieldSubPath) Get(source *WatchAccessPointsResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchAccessPointsResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchAccessPointsResponse))
}

// GetSingle returns value of selected field from source WatchAccessPointsResponse
func (fps *WatchAccessPointsResponse_FieldSubPath) GetSingle(source *WatchAccessPointsResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fps.selector))
	}
}

func (fps *WatchAccessPointsResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchAccessPointsResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchAccessPointsResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchAccessPointsResponse_FieldSubPath) ClearValue(item *WatchAccessPointsResponse) {
	if item != nil {
		switch fps.selector {
		case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchAccessPointsResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchAccessPointsResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchAccessPointsResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchAccessPointsResponse_FieldSubPath) WithIValue(value interface{}) WatchAccessPointsResponse_FieldPathValue {
	return &WatchAccessPointsResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchAccessPointsResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchAccessPointsResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchAccessPointsResponse_FieldPathArrayOfValues {
	return &WatchAccessPointsResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchAccessPointsResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchAccessPointsResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchAccessPointsResponse_FieldPathArrayItemValue {
	return &WatchAccessPointsResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchAccessPointsResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchAccessPointsResponse_FieldPathValue allows storing values for WatchAccessPointsResponse fields according to their type
type WatchAccessPointsResponse_FieldPathValue interface {
	WatchAccessPointsResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAccessPointsResponse)
	CompareWith(*WatchAccessPointsResponse) (cmp int, comparable bool)
}

func ParseWatchAccessPointsResponse_FieldPathValue(pathStr, valueStr string) (WatchAccessPointsResponse_FieldPathValue, error) {
	fp, err := ParseWatchAccessPointsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAccessPointsResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAccessPointsResponse_FieldPathValue), nil
}

func MustParseWatchAccessPointsResponse_FieldPathValue(pathStr, valueStr string) WatchAccessPointsResponse_FieldPathValue {
	fpv, err := ParseWatchAccessPointsResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAccessPointsResponse_FieldTerminalPathValue struct {
	WatchAccessPointsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAccessPointsResponse_FieldPathValue = (*WatchAccessPointsResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchAccessPointsResponse' as interface{}
func (fpv *WatchAccessPointsResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAccessPointsResponse_FieldTerminalPathValue) AsAccessPointChangesValue() ([]*access_point.AccessPointChange, bool) {
	res, ok := fpv.value.([]*access_point.AccessPointChange)
	return res, ok
}
func (fpv *WatchAccessPointsResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAccessPointsResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchAccessPointsResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchAccessPointsResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchAccessPointsResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchAccessPointsResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchAccessPointsResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchAccessPointsResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchAccessPointsResponse
func (fpv *WatchAccessPointsResponse_FieldTerminalPathValue) SetTo(target **WatchAccessPointsResponse) {
	if *target == nil {
		*target = new(WatchAccessPointsResponse)
	}
	switch fpv.selector {
	case WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges:
		(*target).AccessPointChanges = fpv.value.([]*access_point.AccessPointChange)
	case WatchAccessPointsResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchAccessPointsResponse_PageTokenChange)
	case WatchAccessPointsResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchAccessPointsResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchAccessPointsResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchAccessPointsResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAccessPointsResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAccessPointsResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAccessPointsResponse_FieldTerminalPathValue' with the value under path in 'WatchAccessPointsResponse'.
func (fpv *WatchAccessPointsResponse_FieldTerminalPathValue) CompareWith(source *WatchAccessPointsResponse) (int, bool) {
	switch fpv.selector {
	case WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges:
		return 0, false
	case WatchAccessPointsResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchAccessPointsResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAccessPointsResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAccessPointsResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchAccessPointsResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fpv.selector))
	}
}

func (fpv *WatchAccessPointsResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAccessPointsResponse))
}

type WatchAccessPointsResponse_FieldSubPathValue struct {
	WatchAccessPointsResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchAccessPointsResponse_FieldPathValue = (*WatchAccessPointsResponse_FieldSubPathValue)(nil)

func (fpvs *WatchAccessPointsResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchAccessPointsResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchAccessPointsResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchAccessPointsResponse_FieldSubPathValue) SetTo(target **WatchAccessPointsResponse) {
	if *target == nil {
		*target = new(WatchAccessPointsResponse)
	}
	switch fpvs.Selector() {
	case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchAccessPointsResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAccessPointsResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAccessPointsResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchAccessPointsResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchAccessPointsResponse_FieldSubPathValue) CompareWith(source *WatchAccessPointsResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchAccessPointsResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchAccessPointsResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchAccessPointsResponse))
}

// WatchAccessPointsResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchAccessPointsResponse according to their type
// Present only for array (repeated) types.
type WatchAccessPointsResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAccessPointsResponse_FieldPath
	ContainsValue(*WatchAccessPointsResponse) bool
}

// ParseWatchAccessPointsResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAccessPointsResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAccessPointsResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAccessPointsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAccessPointsResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAccessPointsResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchAccessPointsResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchAccessPointsResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAccessPointsResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAccessPointsResponse_FieldTerminalPathArrayItemValue struct {
	WatchAccessPointsResponse_FieldTerminalPath
	value interface{}
}

var _ WatchAccessPointsResponse_FieldPathArrayItemValue = (*WatchAccessPointsResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAccessPointsResponse as interface{}
func (fpaiv *WatchAccessPointsResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchAccessPointsResponse_FieldTerminalPathArrayItemValue) AsAccessPointChangesItemValue() (*access_point.AccessPointChange, bool) {
	res, ok := fpaiv.value.(*access_point.AccessPointChange)
	return res, ok
}

func (fpaiv *WatchAccessPointsResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAccessPointsResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAccessPointsResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAccessPointsResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAccessPointsResponse'
func (fpaiv *WatchAccessPointsResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAccessPointsResponse) bool {
	slice := fpaiv.WatchAccessPointsResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchAccessPointsResponse_FieldSubPathArrayItemValue struct {
	WatchAccessPointsResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchAccessPointsResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchAccessPointsResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchAccessPointsResponse'
func (fpaivs *WatchAccessPointsResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchAccessPointsResponse) bool {
	switch fpaivs.Selector() {
	case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse: %d", fpaivs.Selector()))
	}
}

// WatchAccessPointsResponse_FieldPathArrayOfValues allows storing slice of values for WatchAccessPointsResponse fields according to their type
type WatchAccessPointsResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAccessPointsResponse_FieldPath
}

func ParseWatchAccessPointsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAccessPointsResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAccessPointsResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchAccessPointsResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAccessPointsResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchAccessPointsResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAccessPointsResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAccessPointsResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAccessPointsResponse_FieldTerminalPathArrayOfValues struct {
	WatchAccessPointsResponse_FieldTerminalPath
	values interface{}
}

var _ WatchAccessPointsResponse_FieldPathArrayOfValues = (*WatchAccessPointsResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAccessPointsResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges:
		for _, v := range fpaov.values.([][]*access_point.AccessPointChange) {
			values = append(values, v)
		}
	case WatchAccessPointsResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAccessPointsResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchAccessPointsResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchAccessPointsResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchAccessPointsResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchAccessPointsResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchAccessPointsResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAccessPointsResponse_FieldTerminalPathArrayOfValues) AsAccessPointChangesArrayOfValues() ([][]*access_point.AccessPointChange, bool) {
	res, ok := fpaov.values.([][]*access_point.AccessPointChange)
	return res, ok
}
func (fpaov *WatchAccessPointsResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAccessPointsResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchAccessPointsResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchAccessPointsResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchAccessPointsResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchAccessPointsResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchAccessPointsResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchAccessPointsResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchAccessPointsResponse_FieldSubPathArrayOfValues struct {
	WatchAccessPointsResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchAccessPointsResponse_FieldPathArrayOfValues = (*WatchAccessPointsResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchAccessPointsResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchAccessPointsResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchAccessPointsResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchAccessPointsResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchAccessPointsResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchAccessPointsResponsePageTokenChange_FieldPathSelector
	Get(source *WatchAccessPointsResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchAccessPointsResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchAccessPointsResponse_PageTokenChange)

	// Those methods build corresponding WatchAccessPointsResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchAccessPointsResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchAccessPointsResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchAccessPointsResponsePageTokenChange_FieldPathSelector int32

const (
	WatchAccessPointsResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchAccessPointsResponsePageTokenChange_FieldPathSelector = 0
	WatchAccessPointsResponsePageTokenChange_FieldPathSelectorNextPageToken WatchAccessPointsResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchAccessPointsResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchAccessPointsResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchAccessPointsResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchAccessPointsResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchAccessPointsResponsePageTokenChange_FieldTerminalPath{selector: WatchAccessPointsResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchAccessPointsResponsePageTokenChange_FieldTerminalPath{selector: WatchAccessPointsResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchAccessPointsResponse_PageTokenChange", fp)
}

func ParseWatchAccessPointsResponsePageTokenChange_FieldPath(rawField string) (WatchAccessPointsResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchAccessPointsResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchAccessPointsResponsePageTokenChange_FieldPath(rawField string) WatchAccessPointsResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchAccessPointsResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchAccessPointsResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchAccessPointsResponsePageTokenChange_FieldPathSelector
}

var _ WatchAccessPointsResponsePageTokenChange_FieldPath = (*WatchAccessPointsResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) Selector() WatchAccessPointsResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchAccessPointsResponse_PageTokenChange
func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) Get(source *WatchAccessPointsResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchAccessPointsResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchAccessPointsResponse_PageTokenChange
func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchAccessPointsResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchAccessPointsResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*access_point.PagerCursor)(nil)
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*access_point.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchAccessPointsResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchAccessPointsResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchAccessPointsResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchAccessPointsResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchAccessPointsResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAccessPointsResponsePageTokenChange_FieldTerminalPathValue{WatchAccessPointsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*access_point.PagerCursor)}
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAccessPointsResponsePageTokenChange_FieldTerminalPathValue{WatchAccessPointsResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*access_point.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchAccessPointsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchAccessPointsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAccessPointsResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchAccessPointsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAccessPointsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*access_point.PagerCursor)}
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchAccessPointsResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchAccessPointsResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*access_point.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchAccessPointsResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchAccessPointsResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchAccessPointsResponsePageTokenChange_FieldPathValue interface {
	WatchAccessPointsResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchAccessPointsResponse_PageTokenChange)
	CompareWith(*WatchAccessPointsResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchAccessPointsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchAccessPointsResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchAccessPointsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchAccessPointsResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchAccessPointsResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchAccessPointsResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchAccessPointsResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchAccessPointsResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchAccessPointsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAccessPointsResponsePageTokenChange_FieldPathValue = (*WatchAccessPointsResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchAccessPointsResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchAccessPointsResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*access_point.PagerCursor, bool) {
	res, ok := fpv.value.(*access_point.PagerCursor)
	return res, ok
}
func (fpv *WatchAccessPointsResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*access_point.PagerCursor, bool) {
	res, ok := fpv.value.(*access_point.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchAccessPointsResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchAccessPointsResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchAccessPointsResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*access_point.PagerCursor)
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*access_point.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAccessPointsResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchAccessPointsResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchAccessPointsResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchAccessPointsResponse_PageTokenChange'.
func (fpv *WatchAccessPointsResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchAccessPointsResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchAccessPointsResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchAccessPointsResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchAccessPointsResponse_PageTokenChange))
}

// WatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchAccessPointsResponsePageTokenChange_FieldPath
	ContainsValue(*WatchAccessPointsResponse_PageTokenChange) bool
}

// ParseWatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchAccessPointsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchAccessPointsResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchAccessPointsResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchAccessPointsResponsePageTokenChange_FieldPathArrayItemValue = (*WatchAccessPointsResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchAccessPointsResponse_PageTokenChange as interface{}
func (fpaiv *WatchAccessPointsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchAccessPointsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchAccessPointsResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchAccessPointsResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchAccessPointsResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchAccessPointsResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchAccessPointsResponse_PageTokenChange) bool {
	slice := fpaiv.WatchAccessPointsResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchAccessPointsResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchAccessPointsResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchAccessPointsResponsePageTokenChange_FieldPath
}

func ParseWatchAccessPointsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchAccessPointsResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchAccessPointsResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchAccessPointsResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchAccessPointsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchAccessPointsResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchAccessPointsResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchAccessPointsResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchAccessPointsResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchAccessPointsResponsePageTokenChange_FieldPathArrayOfValues = (*WatchAccessPointsResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchAccessPointsResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*access_point.PagerCursor) {
			values = append(values, v)
		}
	case WatchAccessPointsResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*access_point.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchAccessPointsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*access_point.PagerCursor, bool) {
	res, ok := fpaov.values.([]*access_point.PagerCursor)
	return res, ok
}
func (fpaov *WatchAccessPointsResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*access_point.PagerCursor, bool) {
	res, ok := fpaov.values.([]*access_point.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreateAccessPointRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreateAccessPointRequest_FieldPathSelector
	Get(source *CreateAccessPointRequest) []interface{}
	GetSingle(source *CreateAccessPointRequest) (interface{}, bool)
	ClearValue(item *CreateAccessPointRequest)

	// Those methods build corresponding CreateAccessPointRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreateAccessPointRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreateAccessPointRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreateAccessPointRequest_FieldPathArrayItemValue
}

type CreateAccessPointRequest_FieldPathSelector int32

const (
	CreateAccessPointRequest_FieldPathSelectorParent      CreateAccessPointRequest_FieldPathSelector = 0
	CreateAccessPointRequest_FieldPathSelectorAccessPoint CreateAccessPointRequest_FieldPathSelector = 1
)

func (s CreateAccessPointRequest_FieldPathSelector) String() string {
	switch s {
	case CreateAccessPointRequest_FieldPathSelectorParent:
		return "parent"
	case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
		return "access_point"
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", s))
	}
}

func BuildCreateAccessPointRequest_FieldPath(fp gotenobject.RawFieldPath) (CreateAccessPointRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreateAccessPointRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreateAccessPointRequest_FieldTerminalPath{selector: CreateAccessPointRequest_FieldPathSelectorParent}, nil
		case "access_point", "accessPoint", "access-point":
			return &CreateAccessPointRequest_FieldTerminalPath{selector: CreateAccessPointRequest_FieldPathSelectorAccessPoint}, nil
		}
	} else {
		switch fp[0] {
		case "access_point", "accessPoint", "access-point":
			if subpath, err := access_point.BuildAccessPoint_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreateAccessPointRequest_FieldSubPath{selector: CreateAccessPointRequest_FieldPathSelectorAccessPoint, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreateAccessPointRequest", fp)
}

func ParseCreateAccessPointRequest_FieldPath(rawField string) (CreateAccessPointRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreateAccessPointRequest_FieldPath(fp)
}

func MustParseCreateAccessPointRequest_FieldPath(rawField string) CreateAccessPointRequest_FieldPath {
	fp, err := ParseCreateAccessPointRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreateAccessPointRequest_FieldTerminalPath struct {
	selector CreateAccessPointRequest_FieldPathSelector
}

var _ CreateAccessPointRequest_FieldPath = (*CreateAccessPointRequest_FieldTerminalPath)(nil)

func (fp *CreateAccessPointRequest_FieldTerminalPath) Selector() CreateAccessPointRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreateAccessPointRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreateAccessPointRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreateAccessPointRequest
func (fp *CreateAccessPointRequest_FieldTerminalPath) Get(source *CreateAccessPointRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreateAccessPointRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
			if source.AccessPoint != nil {
				values = append(values, source.AccessPoint)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreateAccessPointRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreateAccessPointRequest))
}

// GetSingle returns value pointed by specific field of from source CreateAccessPointRequest
func (fp *CreateAccessPointRequest_FieldTerminalPath) GetSingle(source *CreateAccessPointRequest) (interface{}, bool) {
	switch fp.selector {
	case CreateAccessPointRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
		res := source.GetAccessPoint()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fp.selector))
	}
}

func (fp *CreateAccessPointRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreateAccessPointRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreateAccessPointRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreateAccessPointRequest_FieldPathSelectorParent:
		return (*access_point.ParentReference)(nil)
	case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
		return (*access_point.AccessPoint)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fp.selector))
	}
}

func (fp *CreateAccessPointRequest_FieldTerminalPath) ClearValue(item *CreateAccessPointRequest) {
	if item != nil {
		switch fp.selector {
		case CreateAccessPointRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
			item.AccessPoint = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fp.selector))
		}
	}
}

func (fp *CreateAccessPointRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreateAccessPointRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreateAccessPointRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreateAccessPointRequest_FieldPathSelectorParent
}

func (fp *CreateAccessPointRequest_FieldTerminalPath) WithIValue(value interface{}) CreateAccessPointRequest_FieldPathValue {
	switch fp.selector {
	case CreateAccessPointRequest_FieldPathSelectorParent:
		return &CreateAccessPointRequest_FieldTerminalPathValue{CreateAccessPointRequest_FieldTerminalPath: *fp, value: value.(*access_point.ParentReference)}
	case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
		return &CreateAccessPointRequest_FieldTerminalPathValue{CreateAccessPointRequest_FieldTerminalPath: *fp, value: value.(*access_point.AccessPoint)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fp.selector))
	}
}

func (fp *CreateAccessPointRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreateAccessPointRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreateAccessPointRequest_FieldPathArrayOfValues {
	fpaov := &CreateAccessPointRequest_FieldTerminalPathArrayOfValues{CreateAccessPointRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreateAccessPointRequest_FieldPathSelectorParent:
		return &CreateAccessPointRequest_FieldTerminalPathArrayOfValues{CreateAccessPointRequest_FieldTerminalPath: *fp, values: values.([]*access_point.ParentReference)}
	case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
		return &CreateAccessPointRequest_FieldTerminalPathArrayOfValues{CreateAccessPointRequest_FieldTerminalPath: *fp, values: values.([]*access_point.AccessPoint)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreateAccessPointRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreateAccessPointRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreateAccessPointRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fp.selector))
	}
}

func (fp *CreateAccessPointRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreateAccessPointRequest_FieldSubPath struct {
	selector CreateAccessPointRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreateAccessPointRequest_FieldPath = (*CreateAccessPointRequest_FieldSubPath)(nil)

func (fps *CreateAccessPointRequest_FieldSubPath) Selector() CreateAccessPointRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreateAccessPointRequest_FieldSubPath) AsAccessPointSubPath() (access_point.AccessPoint_FieldPath, bool) {
	res, ok := fps.subPath.(access_point.AccessPoint_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreateAccessPointRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreateAccessPointRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreateAccessPointRequest
func (fps *CreateAccessPointRequest_FieldSubPath) Get(source *CreateAccessPointRequest) (values []interface{}) {
	if asAccessPointFieldPath, ok := fps.AsAccessPointSubPath(); ok {
		values = append(values, asAccessPointFieldPath.Get(source.GetAccessPoint())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fps.selector))
	}
	return
}

func (fps *CreateAccessPointRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreateAccessPointRequest))
}

// GetSingle returns value of selected field from source CreateAccessPointRequest
func (fps *CreateAccessPointRequest_FieldSubPath) GetSingle(source *CreateAccessPointRequest) (interface{}, bool) {
	switch fps.selector {
	case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
		if source.GetAccessPoint() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAccessPoint())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fps.selector))
	}
}

func (fps *CreateAccessPointRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreateAccessPointRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreateAccessPointRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreateAccessPointRequest_FieldSubPath) ClearValue(item *CreateAccessPointRequest) {
	if item != nil {
		switch fps.selector {
		case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
			fps.subPath.ClearValueRaw(item.AccessPoint)
		default:
			panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fps.selector))
		}
	}
}

func (fps *CreateAccessPointRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreateAccessPointRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreateAccessPointRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreateAccessPointRequest_FieldSubPath) WithIValue(value interface{}) CreateAccessPointRequest_FieldPathValue {
	return &CreateAccessPointRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreateAccessPointRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreateAccessPointRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreateAccessPointRequest_FieldPathArrayOfValues {
	return &CreateAccessPointRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreateAccessPointRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreateAccessPointRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreateAccessPointRequest_FieldPathArrayItemValue {
	return &CreateAccessPointRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreateAccessPointRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreateAccessPointRequest_FieldPathValue allows storing values for CreateAccessPointRequest fields according to their type
type CreateAccessPointRequest_FieldPathValue interface {
	CreateAccessPointRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreateAccessPointRequest)
	CompareWith(*CreateAccessPointRequest) (cmp int, comparable bool)
}

func ParseCreateAccessPointRequest_FieldPathValue(pathStr, valueStr string) (CreateAccessPointRequest_FieldPathValue, error) {
	fp, err := ParseCreateAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAccessPointRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreateAccessPointRequest_FieldPathValue), nil
}

func MustParseCreateAccessPointRequest_FieldPathValue(pathStr, valueStr string) CreateAccessPointRequest_FieldPathValue {
	fpv, err := ParseCreateAccessPointRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreateAccessPointRequest_FieldTerminalPathValue struct {
	CreateAccessPointRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAccessPointRequest_FieldPathValue = (*CreateAccessPointRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreateAccessPointRequest' as interface{}
func (fpv *CreateAccessPointRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreateAccessPointRequest_FieldTerminalPathValue) AsParentValue() (*access_point.ParentReference, bool) {
	res, ok := fpv.value.(*access_point.ParentReference)
	return res, ok
}
func (fpv *CreateAccessPointRequest_FieldTerminalPathValue) AsAccessPointValue() (*access_point.AccessPoint, bool) {
	res, ok := fpv.value.(*access_point.AccessPoint)
	return res, ok
}

// SetTo stores value for selected field for object CreateAccessPointRequest
func (fpv *CreateAccessPointRequest_FieldTerminalPathValue) SetTo(target **CreateAccessPointRequest) {
	if *target == nil {
		*target = new(CreateAccessPointRequest)
	}
	switch fpv.selector {
	case CreateAccessPointRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*access_point.ParentReference)
	case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
		(*target).AccessPoint = fpv.value.(*access_point.AccessPoint)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAccessPointRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAccessPointRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreateAccessPointRequest_FieldTerminalPathValue' with the value under path in 'CreateAccessPointRequest'.
func (fpv *CreateAccessPointRequest_FieldTerminalPathValue) CompareWith(source *CreateAccessPointRequest) (int, bool) {
	switch fpv.selector {
	case CreateAccessPointRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*access_point.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fpv.selector))
	}
}

func (fpv *CreateAccessPointRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreateAccessPointRequest))
}

type CreateAccessPointRequest_FieldSubPathValue struct {
	CreateAccessPointRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreateAccessPointRequest_FieldPathValue = (*CreateAccessPointRequest_FieldSubPathValue)(nil)

func (fpvs *CreateAccessPointRequest_FieldSubPathValue) AsAccessPointPathValue() (access_point.AccessPoint_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(access_point.AccessPoint_FieldPathValue)
	return res, ok
}

func (fpvs *CreateAccessPointRequest_FieldSubPathValue) SetTo(target **CreateAccessPointRequest) {
	if *target == nil {
		*target = new(CreateAccessPointRequest)
	}
	switch fpvs.Selector() {
	case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
		fpvs.subPathValue.(access_point.AccessPoint_FieldPathValue).SetTo(&(*target).AccessPoint)
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAccessPointRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreateAccessPointRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreateAccessPointRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreateAccessPointRequest_FieldSubPathValue) CompareWith(source *CreateAccessPointRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
		return fpvs.subPathValue.(access_point.AccessPoint_FieldPathValue).CompareWith(source.GetAccessPoint())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreateAccessPointRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreateAccessPointRequest))
}

// CreateAccessPointRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreateAccessPointRequest according to their type
// Present only for array (repeated) types.
type CreateAccessPointRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreateAccessPointRequest_FieldPath
	ContainsValue(*CreateAccessPointRequest) bool
}

// ParseCreateAccessPointRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreateAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreateAccessPointRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreateAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAccessPointRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreateAccessPointRequest_FieldPathArrayItemValue), nil
}

func MustParseCreateAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreateAccessPointRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreateAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreateAccessPointRequest_FieldTerminalPathArrayItemValue struct {
	CreateAccessPointRequest_FieldTerminalPath
	value interface{}
}

var _ CreateAccessPointRequest_FieldPathArrayItemValue = (*CreateAccessPointRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreateAccessPointRequest as interface{}
func (fpaiv *CreateAccessPointRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreateAccessPointRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreateAccessPointRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreateAccessPointRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreateAccessPointRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAccessPointRequest'
func (fpaiv *CreateAccessPointRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreateAccessPointRequest) bool {
	slice := fpaiv.CreateAccessPointRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreateAccessPointRequest_FieldSubPathArrayItemValue struct {
	CreateAccessPointRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreateAccessPointRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreateAccessPointRequest_FieldSubPathArrayItemValue) AsAccessPointPathItemValue() (access_point.AccessPoint_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(access_point.AccessPoint_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreateAccessPointRequest'
func (fpaivs *CreateAccessPointRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreateAccessPointRequest) bool {
	switch fpaivs.Selector() {
	case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
		return fpaivs.subPathItemValue.(access_point.AccessPoint_FieldPathArrayItemValue).ContainsValue(source.GetAccessPoint())
	default:
		panic(fmt.Sprintf("Invalid selector for CreateAccessPointRequest: %d", fpaivs.Selector()))
	}
}

// CreateAccessPointRequest_FieldPathArrayOfValues allows storing slice of values for CreateAccessPointRequest fields according to their type
type CreateAccessPointRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreateAccessPointRequest_FieldPath
}

func ParseCreateAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreateAccessPointRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreateAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreateAccessPointRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreateAccessPointRequest_FieldPathArrayOfValues), nil
}

func MustParseCreateAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreateAccessPointRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreateAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreateAccessPointRequest_FieldTerminalPathArrayOfValues struct {
	CreateAccessPointRequest_FieldTerminalPath
	values interface{}
}

var _ CreateAccessPointRequest_FieldPathArrayOfValues = (*CreateAccessPointRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreateAccessPointRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreateAccessPointRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*access_point.ParentReference) {
			values = append(values, v)
		}
	case CreateAccessPointRequest_FieldPathSelectorAccessPoint:
		for _, v := range fpaov.values.([]*access_point.AccessPoint) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreateAccessPointRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*access_point.ParentReference, bool) {
	res, ok := fpaov.values.([]*access_point.ParentReference)
	return res, ok
}
func (fpaov *CreateAccessPointRequest_FieldTerminalPathArrayOfValues) AsAccessPointArrayOfValues() ([]*access_point.AccessPoint, bool) {
	res, ok := fpaov.values.([]*access_point.AccessPoint)
	return res, ok
}

type CreateAccessPointRequest_FieldSubPathArrayOfValues struct {
	CreateAccessPointRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreateAccessPointRequest_FieldPathArrayOfValues = (*CreateAccessPointRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreateAccessPointRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreateAccessPointRequest_FieldSubPathArrayOfValues) AsAccessPointPathArrayOfValues() (access_point.AccessPoint_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(access_point.AccessPoint_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAccessPointRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAccessPointRequest_FieldPathSelector
	Get(source *UpdateAccessPointRequest) []interface{}
	GetSingle(source *UpdateAccessPointRequest) (interface{}, bool)
	ClearValue(item *UpdateAccessPointRequest)

	// Those methods build corresponding UpdateAccessPointRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAccessPointRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAccessPointRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAccessPointRequest_FieldPathArrayItemValue
}

type UpdateAccessPointRequest_FieldPathSelector int32

const (
	UpdateAccessPointRequest_FieldPathSelectorAccessPoint UpdateAccessPointRequest_FieldPathSelector = 0
	UpdateAccessPointRequest_FieldPathSelectorUpdateMask  UpdateAccessPointRequest_FieldPathSelector = 1
	UpdateAccessPointRequest_FieldPathSelectorCas         UpdateAccessPointRequest_FieldPathSelector = 2
)

func (s UpdateAccessPointRequest_FieldPathSelector) String() string {
	switch s {
	case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
		return "access_point"
	case UpdateAccessPointRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdateAccessPointRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", s))
	}
}

func BuildUpdateAccessPointRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdateAccessPointRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAccessPointRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "access_point", "accessPoint", "access-point":
			return &UpdateAccessPointRequest_FieldTerminalPath{selector: UpdateAccessPointRequest_FieldPathSelectorAccessPoint}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdateAccessPointRequest_FieldTerminalPath{selector: UpdateAccessPointRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdateAccessPointRequest_FieldTerminalPath{selector: UpdateAccessPointRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "access_point", "accessPoint", "access-point":
			if subpath, err := access_point.BuildAccessPoint_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAccessPointRequest_FieldSubPath{selector: UpdateAccessPointRequest_FieldPathSelectorAccessPoint, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdateAccessPointRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAccessPointRequest_FieldSubPath{selector: UpdateAccessPointRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAccessPointRequest", fp)
}

func ParseUpdateAccessPointRequest_FieldPath(rawField string) (UpdateAccessPointRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAccessPointRequest_FieldPath(fp)
}

func MustParseUpdateAccessPointRequest_FieldPath(rawField string) UpdateAccessPointRequest_FieldPath {
	fp, err := ParseUpdateAccessPointRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAccessPointRequest_FieldTerminalPath struct {
	selector UpdateAccessPointRequest_FieldPathSelector
}

var _ UpdateAccessPointRequest_FieldPath = (*UpdateAccessPointRequest_FieldTerminalPath)(nil)

func (fp *UpdateAccessPointRequest_FieldTerminalPath) Selector() UpdateAccessPointRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAccessPointRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAccessPointRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAccessPointRequest
func (fp *UpdateAccessPointRequest_FieldTerminalPath) Get(source *UpdateAccessPointRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
			if source.AccessPoint != nil {
				values = append(values, source.AccessPoint)
			}
		case UpdateAccessPointRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdateAccessPointRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAccessPointRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAccessPointRequest))
}

// GetSingle returns value pointed by specific field of from source UpdateAccessPointRequest
func (fp *UpdateAccessPointRequest_FieldTerminalPath) GetSingle(source *UpdateAccessPointRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
		res := source.GetAccessPoint()
		return res, res != nil
	case UpdateAccessPointRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdateAccessPointRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fp.selector))
	}
}

func (fp *UpdateAccessPointRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAccessPointRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAccessPointRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
		return (*access_point.AccessPoint)(nil)
	case UpdateAccessPointRequest_FieldPathSelectorUpdateMask:
		return (*access_point.AccessPoint_FieldMask)(nil)
	case UpdateAccessPointRequest_FieldPathSelectorCas:
		return (*UpdateAccessPointRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fp.selector))
	}
}

func (fp *UpdateAccessPointRequest_FieldTerminalPath) ClearValue(item *UpdateAccessPointRequest) {
	if item != nil {
		switch fp.selector {
		case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
			item.AccessPoint = nil
		case UpdateAccessPointRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdateAccessPointRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdateAccessPointRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAccessPointRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAccessPointRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAccessPointRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdateAccessPointRequest_FieldTerminalPath) WithIValue(value interface{}) UpdateAccessPointRequest_FieldPathValue {
	switch fp.selector {
	case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
		return &UpdateAccessPointRequest_FieldTerminalPathValue{UpdateAccessPointRequest_FieldTerminalPath: *fp, value: value.(*access_point.AccessPoint)}
	case UpdateAccessPointRequest_FieldPathSelectorUpdateMask:
		return &UpdateAccessPointRequest_FieldTerminalPathValue{UpdateAccessPointRequest_FieldTerminalPath: *fp, value: value.(*access_point.AccessPoint_FieldMask)}
	case UpdateAccessPointRequest_FieldPathSelectorCas:
		return &UpdateAccessPointRequest_FieldTerminalPathValue{UpdateAccessPointRequest_FieldTerminalPath: *fp, value: value.(*UpdateAccessPointRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fp.selector))
	}
}

func (fp *UpdateAccessPointRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAccessPointRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAccessPointRequest_FieldPathArrayOfValues {
	fpaov := &UpdateAccessPointRequest_FieldTerminalPathArrayOfValues{UpdateAccessPointRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
		return &UpdateAccessPointRequest_FieldTerminalPathArrayOfValues{UpdateAccessPointRequest_FieldTerminalPath: *fp, values: values.([]*access_point.AccessPoint)}
	case UpdateAccessPointRequest_FieldPathSelectorUpdateMask:
		return &UpdateAccessPointRequest_FieldTerminalPathArrayOfValues{UpdateAccessPointRequest_FieldTerminalPath: *fp, values: values.([]*access_point.AccessPoint_FieldMask)}
	case UpdateAccessPointRequest_FieldPathSelectorCas:
		return &UpdateAccessPointRequest_FieldTerminalPathArrayOfValues{UpdateAccessPointRequest_FieldTerminalPath: *fp, values: values.([]*UpdateAccessPointRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAccessPointRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAccessPointRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAccessPointRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fp.selector))
	}
}

func (fp *UpdateAccessPointRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAccessPointRequest_FieldSubPath struct {
	selector UpdateAccessPointRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAccessPointRequest_FieldPath = (*UpdateAccessPointRequest_FieldSubPath)(nil)

func (fps *UpdateAccessPointRequest_FieldSubPath) Selector() UpdateAccessPointRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAccessPointRequest_FieldSubPath) AsAccessPointSubPath() (access_point.AccessPoint_FieldPath, bool) {
	res, ok := fps.subPath.(access_point.AccessPoint_FieldPath)
	return res, ok
}
func (fps *UpdateAccessPointRequest_FieldSubPath) AsCasSubPath() (UpdateAccessPointRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdateAccessPointRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAccessPointRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAccessPointRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAccessPointRequest
func (fps *UpdateAccessPointRequest_FieldSubPath) Get(source *UpdateAccessPointRequest) (values []interface{}) {
	if asAccessPointFieldPath, ok := fps.AsAccessPointSubPath(); ok {
		values = append(values, asAccessPointFieldPath.Get(source.GetAccessPoint())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdateAccessPointRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAccessPointRequest))
}

// GetSingle returns value of selected field from source UpdateAccessPointRequest
func (fps *UpdateAccessPointRequest_FieldSubPath) GetSingle(source *UpdateAccessPointRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
		if source.GetAccessPoint() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetAccessPoint())
	case UpdateAccessPointRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fps.selector))
	}
}

func (fps *UpdateAccessPointRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAccessPointRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAccessPointRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAccessPointRequest_FieldSubPath) ClearValue(item *UpdateAccessPointRequest) {
	if item != nil {
		switch fps.selector {
		case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
			fps.subPath.ClearValueRaw(item.AccessPoint)
		case UpdateAccessPointRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdateAccessPointRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAccessPointRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAccessPointRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAccessPointRequest_FieldSubPath) WithIValue(value interface{}) UpdateAccessPointRequest_FieldPathValue {
	return &UpdateAccessPointRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAccessPointRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAccessPointRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAccessPointRequest_FieldPathArrayOfValues {
	return &UpdateAccessPointRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAccessPointRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAccessPointRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAccessPointRequest_FieldPathArrayItemValue {
	return &UpdateAccessPointRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAccessPointRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAccessPointRequest_FieldPathValue allows storing values for UpdateAccessPointRequest fields according to their type
type UpdateAccessPointRequest_FieldPathValue interface {
	UpdateAccessPointRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAccessPointRequest)
	CompareWith(*UpdateAccessPointRequest) (cmp int, comparable bool)
}

func ParseUpdateAccessPointRequest_FieldPathValue(pathStr, valueStr string) (UpdateAccessPointRequest_FieldPathValue, error) {
	fp, err := ParseUpdateAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAccessPointRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAccessPointRequest_FieldPathValue), nil
}

func MustParseUpdateAccessPointRequest_FieldPathValue(pathStr, valueStr string) UpdateAccessPointRequest_FieldPathValue {
	fpv, err := ParseUpdateAccessPointRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAccessPointRequest_FieldTerminalPathValue struct {
	UpdateAccessPointRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAccessPointRequest_FieldPathValue = (*UpdateAccessPointRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdateAccessPointRequest' as interface{}
func (fpv *UpdateAccessPointRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAccessPointRequest_FieldTerminalPathValue) AsAccessPointValue() (*access_point.AccessPoint, bool) {
	res, ok := fpv.value.(*access_point.AccessPoint)
	return res, ok
}
func (fpv *UpdateAccessPointRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*access_point.AccessPoint_FieldMask, bool) {
	res, ok := fpv.value.(*access_point.AccessPoint_FieldMask)
	return res, ok
}
func (fpv *UpdateAccessPointRequest_FieldTerminalPathValue) AsCasValue() (*UpdateAccessPointRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdateAccessPointRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdateAccessPointRequest
func (fpv *UpdateAccessPointRequest_FieldTerminalPathValue) SetTo(target **UpdateAccessPointRequest) {
	if *target == nil {
		*target = new(UpdateAccessPointRequest)
	}
	switch fpv.selector {
	case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
		(*target).AccessPoint = fpv.value.(*access_point.AccessPoint)
	case UpdateAccessPointRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*access_point.AccessPoint_FieldMask)
	case UpdateAccessPointRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdateAccessPointRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAccessPointRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAccessPointRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAccessPointRequest_FieldTerminalPathValue' with the value under path in 'UpdateAccessPointRequest'.
func (fpv *UpdateAccessPointRequest_FieldTerminalPathValue) CompareWith(source *UpdateAccessPointRequest) (int, bool) {
	switch fpv.selector {
	case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
		return 0, false
	case UpdateAccessPointRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdateAccessPointRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fpv.selector))
	}
}

func (fpv *UpdateAccessPointRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAccessPointRequest))
}

type UpdateAccessPointRequest_FieldSubPathValue struct {
	UpdateAccessPointRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAccessPointRequest_FieldPathValue = (*UpdateAccessPointRequest_FieldSubPathValue)(nil)

func (fpvs *UpdateAccessPointRequest_FieldSubPathValue) AsAccessPointPathValue() (access_point.AccessPoint_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(access_point.AccessPoint_FieldPathValue)
	return res, ok
}
func (fpvs *UpdateAccessPointRequest_FieldSubPathValue) AsCasPathValue() (UpdateAccessPointRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdateAccessPointRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAccessPointRequest_FieldSubPathValue) SetTo(target **UpdateAccessPointRequest) {
	if *target == nil {
		*target = new(UpdateAccessPointRequest)
	}
	switch fpvs.Selector() {
	case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
		fpvs.subPathValue.(access_point.AccessPoint_FieldPathValue).SetTo(&(*target).AccessPoint)
	case UpdateAccessPointRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdateAccessPointRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAccessPointRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAccessPointRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAccessPointRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAccessPointRequest_FieldSubPathValue) CompareWith(source *UpdateAccessPointRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
		return fpvs.subPathValue.(access_point.AccessPoint_FieldPathValue).CompareWith(source.GetAccessPoint())
	case UpdateAccessPointRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdateAccessPointRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAccessPointRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAccessPointRequest))
}

// UpdateAccessPointRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdateAccessPointRequest according to their type
// Present only for array (repeated) types.
type UpdateAccessPointRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAccessPointRequest_FieldPath
	ContainsValue(*UpdateAccessPointRequest) bool
}

// ParseUpdateAccessPointRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAccessPointRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAccessPointRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAccessPointRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdateAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAccessPointRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAccessPointRequest_FieldTerminalPathArrayItemValue struct {
	UpdateAccessPointRequest_FieldTerminalPath
	value interface{}
}

var _ UpdateAccessPointRequest_FieldPathArrayItemValue = (*UpdateAccessPointRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAccessPointRequest as interface{}
func (fpaiv *UpdateAccessPointRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAccessPointRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAccessPointRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAccessPointRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAccessPointRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAccessPointRequest'
func (fpaiv *UpdateAccessPointRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAccessPointRequest) bool {
	slice := fpaiv.UpdateAccessPointRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAccessPointRequest_FieldSubPathArrayItemValue struct {
	UpdateAccessPointRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAccessPointRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAccessPointRequest_FieldSubPathArrayItemValue) AsAccessPointPathItemValue() (access_point.AccessPoint_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(access_point.AccessPoint_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdateAccessPointRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdateAccessPointRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdateAccessPointRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdateAccessPointRequest'
func (fpaivs *UpdateAccessPointRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAccessPointRequest) bool {
	switch fpaivs.Selector() {
	case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
		return fpaivs.subPathItemValue.(access_point.AccessPoint_FieldPathArrayItemValue).ContainsValue(source.GetAccessPoint())
	case UpdateAccessPointRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdateAccessPointRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest: %d", fpaivs.Selector()))
	}
}

// UpdateAccessPointRequest_FieldPathArrayOfValues allows storing slice of values for UpdateAccessPointRequest fields according to their type
type UpdateAccessPointRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAccessPointRequest_FieldPath
}

func ParseUpdateAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAccessPointRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdateAccessPointRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAccessPointRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdateAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAccessPointRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAccessPointRequest_FieldTerminalPathArrayOfValues struct {
	UpdateAccessPointRequest_FieldTerminalPath
	values interface{}
}

var _ UpdateAccessPointRequest_FieldPathArrayOfValues = (*UpdateAccessPointRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAccessPointRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAccessPointRequest_FieldPathSelectorAccessPoint:
		for _, v := range fpaov.values.([]*access_point.AccessPoint) {
			values = append(values, v)
		}
	case UpdateAccessPointRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*access_point.AccessPoint_FieldMask) {
			values = append(values, v)
		}
	case UpdateAccessPointRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdateAccessPointRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAccessPointRequest_FieldTerminalPathArrayOfValues) AsAccessPointArrayOfValues() ([]*access_point.AccessPoint, bool) {
	res, ok := fpaov.values.([]*access_point.AccessPoint)
	return res, ok
}
func (fpaov *UpdateAccessPointRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*access_point.AccessPoint_FieldMask, bool) {
	res, ok := fpaov.values.([]*access_point.AccessPoint_FieldMask)
	return res, ok
}
func (fpaov *UpdateAccessPointRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdateAccessPointRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdateAccessPointRequest_CAS)
	return res, ok
}

type UpdateAccessPointRequest_FieldSubPathArrayOfValues struct {
	UpdateAccessPointRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAccessPointRequest_FieldPathArrayOfValues = (*UpdateAccessPointRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAccessPointRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAccessPointRequest_FieldSubPathArrayOfValues) AsAccessPointPathArrayOfValues() (access_point.AccessPoint_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(access_point.AccessPoint_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdateAccessPointRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdateAccessPointRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdateAccessPointRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdateAccessPointRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdateAccessPointRequestCAS_FieldPathSelector
	Get(source *UpdateAccessPointRequest_CAS) []interface{}
	GetSingle(source *UpdateAccessPointRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdateAccessPointRequest_CAS)

	// Those methods build corresponding UpdateAccessPointRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdateAccessPointRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdateAccessPointRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdateAccessPointRequestCAS_FieldPathArrayItemValue
}

type UpdateAccessPointRequestCAS_FieldPathSelector int32

const (
	UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState UpdateAccessPointRequestCAS_FieldPathSelector = 0
	UpdateAccessPointRequestCAS_FieldPathSelectorFieldMask        UpdateAccessPointRequestCAS_FieldPathSelector = 1
)

func (s UpdateAccessPointRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdateAccessPointRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", s))
	}
}

func BuildUpdateAccessPointRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdateAccessPointRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdateAccessPointRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdateAccessPointRequestCAS_FieldTerminalPath{selector: UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdateAccessPointRequestCAS_FieldTerminalPath{selector: UpdateAccessPointRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := access_point.BuildAccessPoint_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdateAccessPointRequestCAS_FieldSubPath{selector: UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdateAccessPointRequest_CAS", fp)
}

func ParseUpdateAccessPointRequestCAS_FieldPath(rawField string) (UpdateAccessPointRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdateAccessPointRequestCAS_FieldPath(fp)
}

func MustParseUpdateAccessPointRequestCAS_FieldPath(rawField string) UpdateAccessPointRequestCAS_FieldPath {
	fp, err := ParseUpdateAccessPointRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdateAccessPointRequestCAS_FieldTerminalPath struct {
	selector UpdateAccessPointRequestCAS_FieldPathSelector
}

var _ UpdateAccessPointRequestCAS_FieldPath = (*UpdateAccessPointRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) Selector() UpdateAccessPointRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdateAccessPointRequest_CAS
func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) Get(source *UpdateAccessPointRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdateAccessPointRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdateAccessPointRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdateAccessPointRequest_CAS
func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) GetSingle(source *UpdateAccessPointRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdateAccessPointRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdateAccessPointRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
		return (*access_point.AccessPoint)(nil)
	case UpdateAccessPointRequestCAS_FieldPathSelectorFieldMask:
		return (*access_point.AccessPoint_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) ClearValue(item *UpdateAccessPointRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdateAccessPointRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdateAccessPointRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdateAccessPointRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdateAccessPointRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAccessPointRequestCAS_FieldTerminalPathValue{UpdateAccessPointRequestCAS_FieldTerminalPath: *fp, value: value.(*access_point.AccessPoint)}
	case UpdateAccessPointRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAccessPointRequestCAS_FieldTerminalPathValue{UpdateAccessPointRequestCAS_FieldTerminalPath: *fp, value: value.(*access_point.AccessPoint_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdateAccessPointRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdateAccessPointRequestCAS_FieldTerminalPathArrayOfValues{UpdateAccessPointRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
		return &UpdateAccessPointRequestCAS_FieldTerminalPathArrayOfValues{UpdateAccessPointRequestCAS_FieldTerminalPath: *fp, values: values.([]*access_point.AccessPoint)}
	case UpdateAccessPointRequestCAS_FieldPathSelectorFieldMask:
		return &UpdateAccessPointRequestCAS_FieldTerminalPathArrayOfValues{UpdateAccessPointRequestCAS_FieldTerminalPath: *fp, values: values.([]*access_point.AccessPoint_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdateAccessPointRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdateAccessPointRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdateAccessPointRequestCAS_FieldSubPath struct {
	selector UpdateAccessPointRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdateAccessPointRequestCAS_FieldPath = (*UpdateAccessPointRequestCAS_FieldSubPath)(nil)

func (fps *UpdateAccessPointRequestCAS_FieldSubPath) Selector() UpdateAccessPointRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdateAccessPointRequestCAS_FieldSubPath) AsConditionalStateSubPath() (access_point.AccessPoint_FieldPath, bool) {
	res, ok := fps.subPath.(access_point.AccessPoint_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdateAccessPointRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdateAccessPointRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdateAccessPointRequest_CAS
func (fps *UpdateAccessPointRequestCAS_FieldSubPath) Get(source *UpdateAccessPointRequest_CAS) (values []interface{}) {
	if asAccessPointFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asAccessPointFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdateAccessPointRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdateAccessPointRequest_CAS))
}

// GetSingle returns value of selected field from source UpdateAccessPointRequest_CAS
func (fps *UpdateAccessPointRequestCAS_FieldSubPath) GetSingle(source *UpdateAccessPointRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdateAccessPointRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdateAccessPointRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdateAccessPointRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdateAccessPointRequestCAS_FieldSubPath) ClearValue(item *UpdateAccessPointRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdateAccessPointRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdateAccessPointRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdateAccessPointRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdateAccessPointRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdateAccessPointRequestCAS_FieldPathValue {
	return &UpdateAccessPointRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdateAccessPointRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdateAccessPointRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdateAccessPointRequestCAS_FieldPathArrayOfValues {
	return &UpdateAccessPointRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdateAccessPointRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdateAccessPointRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdateAccessPointRequestCAS_FieldPathArrayItemValue {
	return &UpdateAccessPointRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdateAccessPointRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdateAccessPointRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdateAccessPointRequestCAS_FieldPathValue interface {
	UpdateAccessPointRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdateAccessPointRequest_CAS)
	CompareWith(*UpdateAccessPointRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdateAccessPointRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdateAccessPointRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdateAccessPointRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdateAccessPointRequestCAS_FieldPathValue), nil
}

func MustParseUpdateAccessPointRequestCAS_FieldPathValue(pathStr, valueStr string) UpdateAccessPointRequestCAS_FieldPathValue {
	fpv, err := ParseUpdateAccessPointRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdateAccessPointRequestCAS_FieldTerminalPathValue struct {
	UpdateAccessPointRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAccessPointRequestCAS_FieldPathValue = (*UpdateAccessPointRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdateAccessPointRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdateAccessPointRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*access_point.AccessPoint, bool) {
	res, ok := fpv.value.(*access_point.AccessPoint)
	return res, ok
}
func (fpv *UpdateAccessPointRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*access_point.AccessPoint_FieldMask, bool) {
	res, ok := fpv.value.(*access_point.AccessPoint_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdateAccessPointRequestCAS_FieldTerminalPathValue) SetTo(target **UpdateAccessPointRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAccessPointRequest_CAS)
	}
	switch fpv.selector {
	case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*access_point.AccessPoint)
	case UpdateAccessPointRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*access_point.AccessPoint_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAccessPointRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAccessPointRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdateAccessPointRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdateAccessPointRequest_CAS'.
func (fpv *UpdateAccessPointRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdateAccessPointRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdateAccessPointRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdateAccessPointRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdateAccessPointRequest_CAS))
}

type UpdateAccessPointRequestCAS_FieldSubPathValue struct {
	UpdateAccessPointRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdateAccessPointRequestCAS_FieldPathValue = (*UpdateAccessPointRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdateAccessPointRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (access_point.AccessPoint_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(access_point.AccessPoint_FieldPathValue)
	return res, ok
}

func (fpvs *UpdateAccessPointRequestCAS_FieldSubPathValue) SetTo(target **UpdateAccessPointRequest_CAS) {
	if *target == nil {
		*target = new(UpdateAccessPointRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(access_point.AccessPoint_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAccessPointRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdateAccessPointRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdateAccessPointRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdateAccessPointRequestCAS_FieldSubPathValue) CompareWith(source *UpdateAccessPointRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(access_point.AccessPoint_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdateAccessPointRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdateAccessPointRequest_CAS))
}

// UpdateAccessPointRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdateAccessPointRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdateAccessPointRequestCAS_FieldPath
	ContainsValue(*UpdateAccessPointRequest_CAS) bool
}

// ParseUpdateAccessPointRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdateAccessPointRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdateAccessPointRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdateAccessPointRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdateAccessPointRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdateAccessPointRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdateAccessPointRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdateAccessPointRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdateAccessPointRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdateAccessPointRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdateAccessPointRequestCAS_FieldPathArrayItemValue = (*UpdateAccessPointRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdateAccessPointRequest_CAS as interface{}
func (fpaiv *UpdateAccessPointRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdateAccessPointRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdateAccessPointRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdateAccessPointRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdateAccessPointRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdateAccessPointRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdateAccessPointRequest_CAS) bool {
	slice := fpaiv.UpdateAccessPointRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdateAccessPointRequestCAS_FieldSubPathArrayItemValue struct {
	UpdateAccessPointRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdateAccessPointRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdateAccessPointRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (access_point.AccessPoint_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(access_point.AccessPoint_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdateAccessPointRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdateAccessPointRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(access_point.AccessPoint_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdateAccessPointRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdateAccessPointRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdateAccessPointRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdateAccessPointRequestCAS_FieldPath
}

func ParseUpdateAccessPointRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdateAccessPointRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdateAccessPointRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdateAccessPointRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdateAccessPointRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdateAccessPointRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdateAccessPointRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdateAccessPointRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdateAccessPointRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdateAccessPointRequestCAS_FieldPathArrayOfValues = (*UpdateAccessPointRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdateAccessPointRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*access_point.AccessPoint) {
			values = append(values, v)
		}
	case UpdateAccessPointRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*access_point.AccessPoint_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdateAccessPointRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*access_point.AccessPoint, bool) {
	res, ok := fpaov.values.([]*access_point.AccessPoint)
	return res, ok
}
func (fpaov *UpdateAccessPointRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*access_point.AccessPoint_FieldMask, bool) {
	res, ok := fpaov.values.([]*access_point.AccessPoint_FieldMask)
	return res, ok
}

type UpdateAccessPointRequestCAS_FieldSubPathArrayOfValues struct {
	UpdateAccessPointRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdateAccessPointRequestCAS_FieldPathArrayOfValues = (*UpdateAccessPointRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdateAccessPointRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdateAccessPointRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (access_point.AccessPoint_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(access_point.AccessPoint_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeleteAccessPointRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeleteAccessPointRequest_FieldPathSelector
	Get(source *DeleteAccessPointRequest) []interface{}
	GetSingle(source *DeleteAccessPointRequest) (interface{}, bool)
	ClearValue(item *DeleteAccessPointRequest)

	// Those methods build corresponding DeleteAccessPointRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeleteAccessPointRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeleteAccessPointRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeleteAccessPointRequest_FieldPathArrayItemValue
}

type DeleteAccessPointRequest_FieldPathSelector int32

const (
	DeleteAccessPointRequest_FieldPathSelectorName DeleteAccessPointRequest_FieldPathSelector = 0
)

func (s DeleteAccessPointRequest_FieldPathSelector) String() string {
	switch s {
	case DeleteAccessPointRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAccessPointRequest: %d", s))
	}
}

func BuildDeleteAccessPointRequest_FieldPath(fp gotenobject.RawFieldPath) (DeleteAccessPointRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeleteAccessPointRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeleteAccessPointRequest_FieldTerminalPath{selector: DeleteAccessPointRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeleteAccessPointRequest", fp)
}

func ParseDeleteAccessPointRequest_FieldPath(rawField string) (DeleteAccessPointRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeleteAccessPointRequest_FieldPath(fp)
}

func MustParseDeleteAccessPointRequest_FieldPath(rawField string) DeleteAccessPointRequest_FieldPath {
	fp, err := ParseDeleteAccessPointRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeleteAccessPointRequest_FieldTerminalPath struct {
	selector DeleteAccessPointRequest_FieldPathSelector
}

var _ DeleteAccessPointRequest_FieldPath = (*DeleteAccessPointRequest_FieldTerminalPath)(nil)

func (fp *DeleteAccessPointRequest_FieldTerminalPath) Selector() DeleteAccessPointRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeleteAccessPointRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeleteAccessPointRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeleteAccessPointRequest
func (fp *DeleteAccessPointRequest_FieldTerminalPath) Get(source *DeleteAccessPointRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeleteAccessPointRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAccessPointRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeleteAccessPointRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeleteAccessPointRequest))
}

// GetSingle returns value pointed by specific field of from source DeleteAccessPointRequest
func (fp *DeleteAccessPointRequest_FieldTerminalPath) GetSingle(source *DeleteAccessPointRequest) (interface{}, bool) {
	switch fp.selector {
	case DeleteAccessPointRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAccessPointRequest: %d", fp.selector))
	}
}

func (fp *DeleteAccessPointRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeleteAccessPointRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeleteAccessPointRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeleteAccessPointRequest_FieldPathSelectorName:
		return (*access_point.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAccessPointRequest: %d", fp.selector))
	}
}

func (fp *DeleteAccessPointRequest_FieldTerminalPath) ClearValue(item *DeleteAccessPointRequest) {
	if item != nil {
		switch fp.selector {
		case DeleteAccessPointRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeleteAccessPointRequest: %d", fp.selector))
		}
	}
}

func (fp *DeleteAccessPointRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeleteAccessPointRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeleteAccessPointRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeleteAccessPointRequest_FieldPathSelectorName
}

func (fp *DeleteAccessPointRequest_FieldTerminalPath) WithIValue(value interface{}) DeleteAccessPointRequest_FieldPathValue {
	switch fp.selector {
	case DeleteAccessPointRequest_FieldPathSelectorName:
		return &DeleteAccessPointRequest_FieldTerminalPathValue{DeleteAccessPointRequest_FieldTerminalPath: *fp, value: value.(*access_point.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAccessPointRequest: %d", fp.selector))
	}
}

func (fp *DeleteAccessPointRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeleteAccessPointRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeleteAccessPointRequest_FieldPathArrayOfValues {
	fpaov := &DeleteAccessPointRequest_FieldTerminalPathArrayOfValues{DeleteAccessPointRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeleteAccessPointRequest_FieldPathSelectorName:
		return &DeleteAccessPointRequest_FieldTerminalPathArrayOfValues{DeleteAccessPointRequest_FieldTerminalPath: *fp, values: values.([]*access_point.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAccessPointRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeleteAccessPointRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeleteAccessPointRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeleteAccessPointRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAccessPointRequest: %d", fp.selector))
	}
}

func (fp *DeleteAccessPointRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeleteAccessPointRequest_FieldPathValue allows storing values for DeleteAccessPointRequest fields according to their type
type DeleteAccessPointRequest_FieldPathValue interface {
	DeleteAccessPointRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeleteAccessPointRequest)
	CompareWith(*DeleteAccessPointRequest) (cmp int, comparable bool)
}

func ParseDeleteAccessPointRequest_FieldPathValue(pathStr, valueStr string) (DeleteAccessPointRequest_FieldPathValue, error) {
	fp, err := ParseDeleteAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAccessPointRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeleteAccessPointRequest_FieldPathValue), nil
}

func MustParseDeleteAccessPointRequest_FieldPathValue(pathStr, valueStr string) DeleteAccessPointRequest_FieldPathValue {
	fpv, err := ParseDeleteAccessPointRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeleteAccessPointRequest_FieldTerminalPathValue struct {
	DeleteAccessPointRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAccessPointRequest_FieldPathValue = (*DeleteAccessPointRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeleteAccessPointRequest' as interface{}
func (fpv *DeleteAccessPointRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeleteAccessPointRequest_FieldTerminalPathValue) AsNameValue() (*access_point.Reference, bool) {
	res, ok := fpv.value.(*access_point.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeleteAccessPointRequest
func (fpv *DeleteAccessPointRequest_FieldTerminalPathValue) SetTo(target **DeleteAccessPointRequest) {
	if *target == nil {
		*target = new(DeleteAccessPointRequest)
	}
	switch fpv.selector {
	case DeleteAccessPointRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*access_point.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAccessPointRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAccessPointRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeleteAccessPointRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeleteAccessPointRequest_FieldTerminalPathValue' with the value under path in 'DeleteAccessPointRequest'.
func (fpv *DeleteAccessPointRequest_FieldTerminalPathValue) CompareWith(source *DeleteAccessPointRequest) (int, bool) {
	switch fpv.selector {
	case DeleteAccessPointRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*access_point.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeleteAccessPointRequest: %d", fpv.selector))
	}
}

func (fpv *DeleteAccessPointRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeleteAccessPointRequest))
}

// DeleteAccessPointRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeleteAccessPointRequest according to their type
// Present only for array (repeated) types.
type DeleteAccessPointRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeleteAccessPointRequest_FieldPath
	ContainsValue(*DeleteAccessPointRequest) bool
}

// ParseDeleteAccessPointRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeleteAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeleteAccessPointRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeleteAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAccessPointRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeleteAccessPointRequest_FieldPathArrayItemValue), nil
}

func MustParseDeleteAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeleteAccessPointRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeleteAccessPointRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeleteAccessPointRequest_FieldTerminalPathArrayItemValue struct {
	DeleteAccessPointRequest_FieldTerminalPath
	value interface{}
}

var _ DeleteAccessPointRequest_FieldPathArrayItemValue = (*DeleteAccessPointRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeleteAccessPointRequest as interface{}
func (fpaiv *DeleteAccessPointRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeleteAccessPointRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeleteAccessPointRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeleteAccessPointRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeleteAccessPointRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeleteAccessPointRequest'
func (fpaiv *DeleteAccessPointRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeleteAccessPointRequest) bool {
	slice := fpaiv.DeleteAccessPointRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeleteAccessPointRequest_FieldPathArrayOfValues allows storing slice of values for DeleteAccessPointRequest fields according to their type
type DeleteAccessPointRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeleteAccessPointRequest_FieldPath
}

func ParseDeleteAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeleteAccessPointRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeleteAccessPointRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeleteAccessPointRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeleteAccessPointRequest_FieldPathArrayOfValues), nil
}

func MustParseDeleteAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeleteAccessPointRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeleteAccessPointRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeleteAccessPointRequest_FieldTerminalPathArrayOfValues struct {
	DeleteAccessPointRequest_FieldTerminalPath
	values interface{}
}

var _ DeleteAccessPointRequest_FieldPathArrayOfValues = (*DeleteAccessPointRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeleteAccessPointRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeleteAccessPointRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*access_point.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeleteAccessPointRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*access_point.Reference, bool) {
	res, ok := fpaov.values.([]*access_point.Reference)
	return res, ok
}
