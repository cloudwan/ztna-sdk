// Code generated by protoc-gen-goten-object
// File: ztna/proto/v1alpha/access_point_service.proto
// DO NOT EDIT!!!

package access_point_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	access_point "github.com/cloudwan/ztna-sdk/resources/v1alpha/access_point"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &access_point.AccessPoint{}
)

func (o *GetAccessPointRequest) GotenObjectExt() {}

func (o *GetAccessPointRequest) MakeFullFieldMask() *GetAccessPointRequest_FieldMask {
	return FullGetAccessPointRequest_FieldMask()
}

func (o *GetAccessPointRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetAccessPointRequest_FieldMask()
}

func (o *GetAccessPointRequest) MakeDiffFieldMask(other *GetAccessPointRequest) *GetAccessPointRequest_FieldMask {
	if o == nil && other == nil {
		return &GetAccessPointRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetAccessPointRequest_FieldMask()
	}

	res := &GetAccessPointRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetAccessPointRequest_FieldTerminalPath{selector: GetAccessPointRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetAccessPointRequest_FieldTerminalPath{selector: GetAccessPointRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetAccessPointRequest_FieldTerminalPath{selector: GetAccessPointRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetAccessPointRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetAccessPointRequest))
}

func (o *GetAccessPointRequest) Clone() *GetAccessPointRequest {
	if o == nil {
		return nil
	}
	result := &GetAccessPointRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &access_point.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*access_point.AccessPoint_FieldMask)
	result.View = o.View
	return result
}

func (o *GetAccessPointRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetAccessPointRequest) Merge(source *GetAccessPointRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &access_point.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(access_point.AccessPoint_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetAccessPointRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetAccessPointRequest))
}

func (o *BatchGetAccessPointsRequest) GotenObjectExt() {}

func (o *BatchGetAccessPointsRequest) MakeFullFieldMask() *BatchGetAccessPointsRequest_FieldMask {
	return FullBatchGetAccessPointsRequest_FieldMask()
}

func (o *BatchGetAccessPointsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAccessPointsRequest_FieldMask()
}

func (o *BatchGetAccessPointsRequest) MakeDiffFieldMask(other *BatchGetAccessPointsRequest) *BatchGetAccessPointsRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAccessPointsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAccessPointsRequest_FieldMask()
	}

	res := &BatchGetAccessPointsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetAccessPointsRequest_FieldTerminalPath{selector: BatchGetAccessPointsRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAccessPointsRequest_FieldTerminalPath{selector: BatchGetAccessPointsRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAccessPointsRequest_FieldTerminalPath{selector: BatchGetAccessPointsRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetAccessPointsRequest_FieldTerminalPath{selector: BatchGetAccessPointsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetAccessPointsRequest_FieldTerminalPath{selector: BatchGetAccessPointsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetAccessPointsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAccessPointsRequest))
}

func (o *BatchGetAccessPointsRequest) Clone() *BatchGetAccessPointsRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetAccessPointsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &access_point.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*access_point.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &access_point.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*access_point.AccessPoint_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetAccessPointsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAccessPointsRequest) Merge(source *BatchGetAccessPointsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &access_point.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *access_point.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &access_point.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(access_point.AccessPoint_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetAccessPointsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAccessPointsRequest))
}

func (o *BatchGetAccessPointsResponse) GotenObjectExt() {}

func (o *BatchGetAccessPointsResponse) MakeFullFieldMask() *BatchGetAccessPointsResponse_FieldMask {
	return FullBatchGetAccessPointsResponse_FieldMask()
}

func (o *BatchGetAccessPointsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetAccessPointsResponse_FieldMask()
}

func (o *BatchGetAccessPointsResponse) MakeDiffFieldMask(other *BatchGetAccessPointsResponse) *BatchGetAccessPointsResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetAccessPointsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetAccessPointsResponse_FieldMask()
	}

	res := &BatchGetAccessPointsResponse_FieldMask{}

	if len(o.GetAccessPoints()) == len(other.GetAccessPoints()) {
		for i, lValue := range o.GetAccessPoints() {
			rValue := other.GetAccessPoints()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetAccessPointsResponse_FieldTerminalPath{selector: BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAccessPointsResponse_FieldTerminalPath{selector: BatchGetAccessPointsResponse_FieldPathSelectorAccessPoints})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetAccessPointsResponse_FieldTerminalPath{selector: BatchGetAccessPointsResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetAccessPointsResponse_FieldTerminalPath{selector: BatchGetAccessPointsResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetAccessPointsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetAccessPointsResponse))
}

func (o *BatchGetAccessPointsResponse) Clone() *BatchGetAccessPointsResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetAccessPointsResponse{}
	result.AccessPoints = make([]*access_point.AccessPoint, len(o.AccessPoints))
	for i, sourceValue := range o.AccessPoints {
		result.AccessPoints[i] = sourceValue.Clone()
	}
	result.Missing = make([]*access_point.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &access_point.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetAccessPointsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetAccessPointsResponse) Merge(source *BatchGetAccessPointsResponse) {
	for _, sourceValue := range source.GetAccessPoints() {
		exists := false
		for _, currentValue := range o.AccessPoints {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *access_point.AccessPoint
			if sourceValue != nil {
				newDstElement = new(access_point.AccessPoint)
				newDstElement.Merge(sourceValue)
			}
			o.AccessPoints = append(o.AccessPoints, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *access_point.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &access_point.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetAccessPointsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetAccessPointsResponse))
}

func (o *ListAccessPointsRequest) GotenObjectExt() {}

func (o *ListAccessPointsRequest) MakeFullFieldMask() *ListAccessPointsRequest_FieldMask {
	return FullListAccessPointsRequest_FieldMask()
}

func (o *ListAccessPointsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAccessPointsRequest_FieldMask()
}

func (o *ListAccessPointsRequest) MakeDiffFieldMask(other *ListAccessPointsRequest) *ListAccessPointsRequest_FieldMask {
	if o == nil && other == nil {
		return &ListAccessPointsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAccessPointsRequest_FieldMask()
	}

	res := &ListAccessPointsRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListAccessPointsRequest_FieldTerminalPath{selector: ListAccessPointsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListAccessPointsRequest_FieldTerminalPath{selector: ListAccessPointsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListAccessPointsRequest_FieldTerminalPath{selector: ListAccessPointsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListAccessPointsRequest_FieldTerminalPath{selector: ListAccessPointsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListAccessPointsRequest_FieldTerminalPath{selector: ListAccessPointsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListAccessPointsRequest_FieldTerminalPath{selector: ListAccessPointsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListAccessPointsRequest_FieldTerminalPath{selector: ListAccessPointsRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListAccessPointsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAccessPointsRequest))
}

func (o *ListAccessPointsRequest) Clone() *ListAccessPointsRequest {
	if o == nil {
		return nil
	}
	result := &ListAccessPointsRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &access_point.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &access_point.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &access_point.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &access_point.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*access_point.AccessPoint_FieldMask)
	result.View = o.View
	return result
}

func (o *ListAccessPointsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAccessPointsRequest) Merge(source *ListAccessPointsRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &access_point.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &access_point.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &access_point.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &access_point.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(access_point.AccessPoint_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListAccessPointsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAccessPointsRequest))
}

func (o *ListAccessPointsResponse) GotenObjectExt() {}

func (o *ListAccessPointsResponse) MakeFullFieldMask() *ListAccessPointsResponse_FieldMask {
	return FullListAccessPointsResponse_FieldMask()
}

func (o *ListAccessPointsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListAccessPointsResponse_FieldMask()
}

func (o *ListAccessPointsResponse) MakeDiffFieldMask(other *ListAccessPointsResponse) *ListAccessPointsResponse_FieldMask {
	if o == nil && other == nil {
		return &ListAccessPointsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListAccessPointsResponse_FieldMask()
	}

	res := &ListAccessPointsResponse_FieldMask{}

	if len(o.GetAccessPoints()) == len(other.GetAccessPoints()) {
		for i, lValue := range o.GetAccessPoints() {
			rValue := other.GetAccessPoints()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListAccessPointsResponse_FieldTerminalPath{selector: ListAccessPointsResponse_FieldPathSelectorAccessPoints})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListAccessPointsResponse_FieldTerminalPath{selector: ListAccessPointsResponse_FieldPathSelectorAccessPoints})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListAccessPointsResponse_FieldTerminalPath{selector: ListAccessPointsResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListAccessPointsResponse_FieldTerminalPath{selector: ListAccessPointsResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListAccessPointsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListAccessPointsResponse))
}

func (o *ListAccessPointsResponse) Clone() *ListAccessPointsResponse {
	if o == nil {
		return nil
	}
	result := &ListAccessPointsResponse{}
	result.AccessPoints = make([]*access_point.AccessPoint, len(o.AccessPoints))
	for i, sourceValue := range o.AccessPoints {
		result.AccessPoints[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &access_point.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &access_point.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListAccessPointsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListAccessPointsResponse) Merge(source *ListAccessPointsResponse) {
	for _, sourceValue := range source.GetAccessPoints() {
		exists := false
		for _, currentValue := range o.AccessPoints {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *access_point.AccessPoint
			if sourceValue != nil {
				newDstElement = new(access_point.AccessPoint)
				newDstElement.Merge(sourceValue)
			}
			o.AccessPoints = append(o.AccessPoints, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &access_point.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &access_point.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListAccessPointsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListAccessPointsResponse))
}

func (o *WatchAccessPointRequest) GotenObjectExt() {}

func (o *WatchAccessPointRequest) MakeFullFieldMask() *WatchAccessPointRequest_FieldMask {
	return FullWatchAccessPointRequest_FieldMask()
}

func (o *WatchAccessPointRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAccessPointRequest_FieldMask()
}

func (o *WatchAccessPointRequest) MakeDiffFieldMask(other *WatchAccessPointRequest) *WatchAccessPointRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAccessPointRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAccessPointRequest_FieldMask()
	}

	res := &WatchAccessPointRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchAccessPointRequest_FieldTerminalPath{selector: WatchAccessPointRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAccessPointRequest_FieldTerminalPath{selector: WatchAccessPointRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAccessPointRequest_FieldTerminalPath{selector: WatchAccessPointRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchAccessPointRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAccessPointRequest))
}

func (o *WatchAccessPointRequest) Clone() *WatchAccessPointRequest {
	if o == nil {
		return nil
	}
	result := &WatchAccessPointRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &access_point.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*access_point.AccessPoint_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchAccessPointRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAccessPointRequest) Merge(source *WatchAccessPointRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &access_point.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(access_point.AccessPoint_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchAccessPointRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAccessPointRequest))
}

func (o *WatchAccessPointResponse) GotenObjectExt() {}

func (o *WatchAccessPointResponse) MakeFullFieldMask() *WatchAccessPointResponse_FieldMask {
	return FullWatchAccessPointResponse_FieldMask()
}

func (o *WatchAccessPointResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAccessPointResponse_FieldMask()
}

func (o *WatchAccessPointResponse) MakeDiffFieldMask(other *WatchAccessPointResponse) *WatchAccessPointResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAccessPointResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAccessPointResponse_FieldMask()
	}

	res := &WatchAccessPointResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchAccessPointResponse_FieldTerminalPath{selector: WatchAccessPointResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchAccessPointResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAccessPointResponse))
}

func (o *WatchAccessPointResponse) Clone() *WatchAccessPointResponse {
	if o == nil {
		return nil
	}
	result := &WatchAccessPointResponse{}
	result.Change = proto.Clone(o.Change).(*access_point.AccessPointChange)
	return result
}

func (o *WatchAccessPointResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAccessPointResponse) Merge(source *WatchAccessPointResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(access_point.AccessPointChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchAccessPointResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAccessPointResponse))
}

func (o *WatchAccessPointsRequest) GotenObjectExt() {}

func (o *WatchAccessPointsRequest) MakeFullFieldMask() *WatchAccessPointsRequest_FieldMask {
	return FullWatchAccessPointsRequest_FieldMask()
}

func (o *WatchAccessPointsRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAccessPointsRequest_FieldMask()
}

func (o *WatchAccessPointsRequest) MakeDiffFieldMask(other *WatchAccessPointsRequest) *WatchAccessPointsRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchAccessPointsRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAccessPointsRequest_FieldMask()
	}

	res := &WatchAccessPointsRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchAccessPointsRequest_FieldTerminalPath{selector: WatchAccessPointsRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchAccessPointsRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAccessPointsRequest))
}

func (o *WatchAccessPointsRequest) Clone() *WatchAccessPointsRequest {
	if o == nil {
		return nil
	}
	result := &WatchAccessPointsRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &access_point.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &access_point.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &access_point.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &access_point.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*access_point.AccessPoint_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchAccessPointsRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAccessPointsRequest) Merge(source *WatchAccessPointsRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &access_point.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &access_point.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &access_point.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &access_point.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(access_point.AccessPoint_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchAccessPointsRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAccessPointsRequest))
}

func (o *WatchAccessPointsResponse) GotenObjectExt() {}

func (o *WatchAccessPointsResponse) MakeFullFieldMask() *WatchAccessPointsResponse_FieldMask {
	return FullWatchAccessPointsResponse_FieldMask()
}

func (o *WatchAccessPointsResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAccessPointsResponse_FieldMask()
}

func (o *WatchAccessPointsResponse) MakeDiffFieldMask(other *WatchAccessPointsResponse) *WatchAccessPointsResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchAccessPointsResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAccessPointsResponse_FieldMask()
	}

	res := &WatchAccessPointsResponse_FieldMask{}

	if len(o.GetAccessPointChanges()) == len(other.GetAccessPointChanges()) {
		for i, lValue := range o.GetAccessPointChanges() {
			rValue := other.GetAccessPointChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorAccessPointChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchAccessPointsResponse_FieldSubPath{selector: WatchAccessPointsResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchAccessPointsResponse_FieldTerminalPath{selector: WatchAccessPointsResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchAccessPointsResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAccessPointsResponse))
}

func (o *WatchAccessPointsResponse) Clone() *WatchAccessPointsResponse {
	if o == nil {
		return nil
	}
	result := &WatchAccessPointsResponse{}
	result.AccessPointChanges = make([]*access_point.AccessPointChange, len(o.AccessPointChanges))
	for i, sourceValue := range o.AccessPointChanges {
		result.AccessPointChanges[i] = proto.Clone(sourceValue).(*access_point.AccessPointChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchAccessPointsResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAccessPointsResponse) Merge(source *WatchAccessPointsResponse) {
	for _, sourceValue := range source.GetAccessPointChanges() {
		exists := false
		for _, currentValue := range o.AccessPointChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *access_point.AccessPointChange
			if sourceValue != nil {
				newDstElement = new(access_point.AccessPointChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.AccessPointChanges = append(o.AccessPointChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchAccessPointsResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchAccessPointsResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAccessPointsResponse))
}

func (o *WatchAccessPointsResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchAccessPointsResponse_PageTokenChange) MakeFullFieldMask() *WatchAccessPointsResponse_PageTokenChange_FieldMask {
	return FullWatchAccessPointsResponse_PageTokenChange_FieldMask()
}

func (o *WatchAccessPointsResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchAccessPointsResponse_PageTokenChange_FieldMask()
}

func (o *WatchAccessPointsResponse_PageTokenChange) MakeDiffFieldMask(other *WatchAccessPointsResponse_PageTokenChange) *WatchAccessPointsResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchAccessPointsResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchAccessPointsResponse_PageTokenChange_FieldMask()
	}

	res := &WatchAccessPointsResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchAccessPointsResponsePageTokenChange_FieldTerminalPath{selector: WatchAccessPointsResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchAccessPointsResponsePageTokenChange_FieldTerminalPath{selector: WatchAccessPointsResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchAccessPointsResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchAccessPointsResponse_PageTokenChange))
}

func (o *WatchAccessPointsResponse_PageTokenChange) Clone() *WatchAccessPointsResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchAccessPointsResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &access_point.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &access_point.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchAccessPointsResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchAccessPointsResponse_PageTokenChange) Merge(source *WatchAccessPointsResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &access_point.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &access_point.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchAccessPointsResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchAccessPointsResponse_PageTokenChange))
}

func (o *CreateAccessPointRequest) GotenObjectExt() {}

func (o *CreateAccessPointRequest) MakeFullFieldMask() *CreateAccessPointRequest_FieldMask {
	return FullCreateAccessPointRequest_FieldMask()
}

func (o *CreateAccessPointRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreateAccessPointRequest_FieldMask()
}

func (o *CreateAccessPointRequest) MakeDiffFieldMask(other *CreateAccessPointRequest) *CreateAccessPointRequest_FieldMask {
	if o == nil && other == nil {
		return &CreateAccessPointRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreateAccessPointRequest_FieldMask()
	}

	res := &CreateAccessPointRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreateAccessPointRequest_FieldTerminalPath{selector: CreateAccessPointRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetAccessPoint().MakeDiffFieldMask(other.GetAccessPoint())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreateAccessPointRequest_FieldTerminalPath{selector: CreateAccessPointRequest_FieldPathSelectorAccessPoint})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreateAccessPointRequest_FieldSubPath{selector: CreateAccessPointRequest_FieldPathSelectorAccessPoint, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreateAccessPointRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreateAccessPointRequest))
}

func (o *CreateAccessPointRequest) Clone() *CreateAccessPointRequest {
	if o == nil {
		return nil
	}
	result := &CreateAccessPointRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &access_point.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.AccessPoint = o.AccessPoint.Clone()
	return result
}

func (o *CreateAccessPointRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreateAccessPointRequest) Merge(source *CreateAccessPointRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &access_point.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetAccessPoint() != nil {
		if o.AccessPoint == nil {
			o.AccessPoint = new(access_point.AccessPoint)
		}
		o.AccessPoint.Merge(source.GetAccessPoint())
	}
}

func (o *CreateAccessPointRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreateAccessPointRequest))
}

func (o *UpdateAccessPointRequest) GotenObjectExt() {}

func (o *UpdateAccessPointRequest) MakeFullFieldMask() *UpdateAccessPointRequest_FieldMask {
	return FullUpdateAccessPointRequest_FieldMask()
}

func (o *UpdateAccessPointRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAccessPointRequest_FieldMask()
}

func (o *UpdateAccessPointRequest) MakeDiffFieldMask(other *UpdateAccessPointRequest) *UpdateAccessPointRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdateAccessPointRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAccessPointRequest_FieldMask()
	}

	res := &UpdateAccessPointRequest_FieldMask{}
	{
		subMask := o.GetAccessPoint().MakeDiffFieldMask(other.GetAccessPoint())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAccessPointRequest_FieldTerminalPath{selector: UpdateAccessPointRequest_FieldPathSelectorAccessPoint})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAccessPointRequest_FieldSubPath{selector: UpdateAccessPointRequest_FieldPathSelectorAccessPoint, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdateAccessPointRequest_FieldTerminalPath{selector: UpdateAccessPointRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAccessPointRequest_FieldTerminalPath{selector: UpdateAccessPointRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAccessPointRequest_FieldSubPath{selector: UpdateAccessPointRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdateAccessPointRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAccessPointRequest))
}

func (o *UpdateAccessPointRequest) Clone() *UpdateAccessPointRequest {
	if o == nil {
		return nil
	}
	result := &UpdateAccessPointRequest{}
	result.AccessPoint = o.AccessPoint.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*access_point.AccessPoint_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdateAccessPointRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAccessPointRequest) Merge(source *UpdateAccessPointRequest) {
	if source.GetAccessPoint() != nil {
		if o.AccessPoint == nil {
			o.AccessPoint = new(access_point.AccessPoint)
		}
		o.AccessPoint.Merge(source.GetAccessPoint())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(access_point.AccessPoint_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdateAccessPointRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdateAccessPointRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAccessPointRequest))
}

func (o *UpdateAccessPointRequest_CAS) GotenObjectExt() {}

func (o *UpdateAccessPointRequest_CAS) MakeFullFieldMask() *UpdateAccessPointRequest_CAS_FieldMask {
	return FullUpdateAccessPointRequest_CAS_FieldMask()
}

func (o *UpdateAccessPointRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdateAccessPointRequest_CAS_FieldMask()
}

func (o *UpdateAccessPointRequest_CAS) MakeDiffFieldMask(other *UpdateAccessPointRequest_CAS) *UpdateAccessPointRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdateAccessPointRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdateAccessPointRequest_CAS_FieldMask()
	}

	res := &UpdateAccessPointRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdateAccessPointRequestCAS_FieldTerminalPath{selector: UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdateAccessPointRequestCAS_FieldSubPath{selector: UpdateAccessPointRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdateAccessPointRequestCAS_FieldTerminalPath{selector: UpdateAccessPointRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdateAccessPointRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdateAccessPointRequest_CAS))
}

func (o *UpdateAccessPointRequest_CAS) Clone() *UpdateAccessPointRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdateAccessPointRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*access_point.AccessPoint_FieldMask)
	return result
}

func (o *UpdateAccessPointRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdateAccessPointRequest_CAS) Merge(source *UpdateAccessPointRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(access_point.AccessPoint)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(access_point.AccessPoint_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdateAccessPointRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdateAccessPointRequest_CAS))
}

func (o *DeleteAccessPointRequest) GotenObjectExt() {}

func (o *DeleteAccessPointRequest) MakeFullFieldMask() *DeleteAccessPointRequest_FieldMask {
	return FullDeleteAccessPointRequest_FieldMask()
}

func (o *DeleteAccessPointRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeleteAccessPointRequest_FieldMask()
}

func (o *DeleteAccessPointRequest) MakeDiffFieldMask(other *DeleteAccessPointRequest) *DeleteAccessPointRequest_FieldMask {
	if o == nil && other == nil {
		return &DeleteAccessPointRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeleteAccessPointRequest_FieldMask()
	}

	res := &DeleteAccessPointRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeleteAccessPointRequest_FieldTerminalPath{selector: DeleteAccessPointRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeleteAccessPointRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeleteAccessPointRequest))
}

func (o *DeleteAccessPointRequest) Clone() *DeleteAccessPointRequest {
	if o == nil {
		return nil
	}
	result := &DeleteAccessPointRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &access_point.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeleteAccessPointRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeleteAccessPointRequest) Merge(source *DeleteAccessPointRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &access_point.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeleteAccessPointRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeleteAccessPointRequest))
}
