// Code generated by protoc-gen-goten-client
// API: PortForwardingServiceService
// DO NOT EDIT!!!

package port_forwarding_service_client

import (
	"context"

	"google.golang.org/grpc"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	port_forwarding_service "github.com/cloudwan/ztna-sdk/resources/v1alpha/port_forwarding_service"
	empty "github.com/golang/protobuf/ptypes/empty"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = protoimpl.DescBuilder{}
	_ = context.Context(nil)
	_ = grpc.ClientConn{}
)

// make sure we're using proto imports
var (
	_ = &empty.Empty{}
	_ = &port_forwarding_service.PortForwardingService{}
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// PortForwardingServiceServiceClient is the client API for PortForwardingServiceService.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PortForwardingServiceServiceClient interface {
	GetPortForwardingService(ctx context.Context, in *GetPortForwardingServiceRequest, opts ...grpc.CallOption) (*port_forwarding_service.PortForwardingService, error)
	BatchGetPortForwardingServices(ctx context.Context, in *BatchGetPortForwardingServicesRequest, opts ...grpc.CallOption) (*BatchGetPortForwardingServicesResponse, error)
	ListPortForwardingServices(ctx context.Context, in *ListPortForwardingServicesRequest, opts ...grpc.CallOption) (*ListPortForwardingServicesResponse, error)
	WatchPortForwardingService(ctx context.Context, in *WatchPortForwardingServiceRequest, opts ...grpc.CallOption) (WatchPortForwardingServiceClientStream, error)
	WatchPortForwardingServices(ctx context.Context, in *WatchPortForwardingServicesRequest, opts ...grpc.CallOption) (WatchPortForwardingServicesClientStream, error)
	CreatePortForwardingService(ctx context.Context, in *CreatePortForwardingServiceRequest, opts ...grpc.CallOption) (*port_forwarding_service.PortForwardingService, error)
	UpdatePortForwardingService(ctx context.Context, in *UpdatePortForwardingServiceRequest, opts ...grpc.CallOption) (*port_forwarding_service.PortForwardingService, error)
	DeletePortForwardingService(ctx context.Context, in *DeletePortForwardingServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error)
}

type client struct {
	cc grpc.ClientConnInterface
}

func NewPortForwardingServiceServiceClient(cc grpc.ClientConnInterface) PortForwardingServiceServiceClient {
	return &client{cc}
}

func (c *client) GetPortForwardingService(ctx context.Context, in *GetPortForwardingServiceRequest, opts ...grpc.CallOption) (*port_forwarding_service.PortForwardingService, error) {
	out := new(port_forwarding_service.PortForwardingService)
	err := c.cc.Invoke(ctx, "/ntt.ztna.v1alpha.PortForwardingServiceService/GetPortForwardingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) BatchGetPortForwardingServices(ctx context.Context, in *BatchGetPortForwardingServicesRequest, opts ...grpc.CallOption) (*BatchGetPortForwardingServicesResponse, error) {
	out := new(BatchGetPortForwardingServicesResponse)
	err := c.cc.Invoke(ctx, "/ntt.ztna.v1alpha.PortForwardingServiceService/BatchGetPortForwardingServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) ListPortForwardingServices(ctx context.Context, in *ListPortForwardingServicesRequest, opts ...grpc.CallOption) (*ListPortForwardingServicesResponse, error) {
	out := new(ListPortForwardingServicesResponse)
	err := c.cc.Invoke(ctx, "/ntt.ztna.v1alpha.PortForwardingServiceService/ListPortForwardingServices", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) WatchPortForwardingService(ctx context.Context, in *WatchPortForwardingServiceRequest, opts ...grpc.CallOption) (WatchPortForwardingServiceClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPortForwardingService",
			ServerStreams: true,
		},
		"/ntt.ztna.v1alpha.PortForwardingServiceService/WatchPortForwardingService", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPortForwardingServiceWatchPortForwardingServiceClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPortForwardingServiceClientStream interface {
	Recv() (*WatchPortForwardingServiceResponse, error)
	grpc.ClientStream
}

type watchPortForwardingServiceWatchPortForwardingServiceClient struct {
	grpc.ClientStream
}

func (x *watchPortForwardingServiceWatchPortForwardingServiceClient) Recv() (*WatchPortForwardingServiceResponse, error) {
	m := new(WatchPortForwardingServiceResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) WatchPortForwardingServices(ctx context.Context, in *WatchPortForwardingServicesRequest, opts ...grpc.CallOption) (WatchPortForwardingServicesClientStream, error) {
	stream, err := c.cc.NewStream(ctx,
		&grpc.StreamDesc{
			StreamName:    "WatchPortForwardingServices",
			ServerStreams: true,
		},
		"/ntt.ztna.v1alpha.PortForwardingServiceService/WatchPortForwardingServices", opts...)
	if err != nil {
		return nil, err
	}
	x := &watchPortForwardingServicesWatchPortForwardingServicesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type WatchPortForwardingServicesClientStream interface {
	Recv() (*WatchPortForwardingServicesResponse, error)
	grpc.ClientStream
}

type watchPortForwardingServicesWatchPortForwardingServicesClient struct {
	grpc.ClientStream
}

func (x *watchPortForwardingServicesWatchPortForwardingServicesClient) Recv() (*WatchPortForwardingServicesResponse, error) {
	m := new(WatchPortForwardingServicesResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *client) CreatePortForwardingService(ctx context.Context, in *CreatePortForwardingServiceRequest, opts ...grpc.CallOption) (*port_forwarding_service.PortForwardingService, error) {
	out := new(port_forwarding_service.PortForwardingService)
	err := c.cc.Invoke(ctx, "/ntt.ztna.v1alpha.PortForwardingServiceService/CreatePortForwardingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) UpdatePortForwardingService(ctx context.Context, in *UpdatePortForwardingServiceRequest, opts ...grpc.CallOption) (*port_forwarding_service.PortForwardingService, error) {
	out := new(port_forwarding_service.PortForwardingService)
	err := c.cc.Invoke(ctx, "/ntt.ztna.v1alpha.PortForwardingServiceService/UpdatePortForwardingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *client) DeletePortForwardingService(ctx context.Context, in *DeletePortForwardingServiceRequest, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/ntt.ztna.v1alpha.PortForwardingServiceService/DeletePortForwardingService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}
