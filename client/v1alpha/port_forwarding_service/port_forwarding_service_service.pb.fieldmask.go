// Code generated by protoc-gen-goten-object
// File: ztna/proto/v1alpha/port_forwarding_service_service.proto
// DO NOT EDIT!!!

package port_forwarding_service_client

import (
	"encoding/json"
	"strings"

	firestorepb "google.golang.org/genproto/googleapis/firestore/v1"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	port_forwarding_service "github.com/cloudwan/ztna-sdk/resources/v1alpha/port_forwarding_service"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = strings.Builder{}

	_ = firestorepb.Value{}
	_ = codes.NotFound
	_ = status.Status{}
	_ = proto.Message(nil)
	_ = preflect.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldMask(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &port_forwarding_service.PortForwardingService{}
)

type GetPortForwardingServiceRequest_FieldMask struct {
	Paths []GetPortForwardingServiceRequest_FieldPath
}

func FullGetPortForwardingServiceRequest_FieldMask() *GetPortForwardingServiceRequest_FieldMask {
	res := &GetPortForwardingServiceRequest_FieldMask{}
	res.Paths = append(res.Paths, &GetPortForwardingServiceRequest_FieldTerminalPath{selector: GetPortForwardingServiceRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &GetPortForwardingServiceRequest_FieldTerminalPath{selector: GetPortForwardingServiceRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &GetPortForwardingServiceRequest_FieldTerminalPath{selector: GetPortForwardingServiceRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *GetPortForwardingServiceRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseGetPortForwardingServiceRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*GetPortForwardingServiceRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseGetPortForwardingServiceRequest_FieldPath(raw)
	})
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) ProtoMessage() {}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) Subtract(other *GetPortForwardingServiceRequest_FieldMask) *GetPortForwardingServiceRequest_FieldMask {
	result := &GetPortForwardingServiceRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *GetPortForwardingServiceRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*GetPortForwardingServiceRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *GetPortForwardingServiceRequest_FieldMask) FilterInputFields() *GetPortForwardingServiceRequest_FieldMask {
	result := &GetPortForwardingServiceRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *GetPortForwardingServiceRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]GetPortForwardingServiceRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseGetPortForwardingServiceRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask GetPortForwardingServiceRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask GetPortForwardingServiceRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) AppendPath(path GetPortForwardingServiceRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(GetPortForwardingServiceRequest_FieldPath))
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) GetPaths() []GetPortForwardingServiceRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseGetPortForwardingServiceRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) Set(target, source *GetPortForwardingServiceRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*GetPortForwardingServiceRequest), source.(*GetPortForwardingServiceRequest))
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) Project(source *GetPortForwardingServiceRequest) *GetPortForwardingServiceRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &GetPortForwardingServiceRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *GetPortForwardingServiceRequest_FieldTerminalPath:
			switch tp.selector {
			case GetPortForwardingServiceRequest_FieldPathSelectorName:
				result.Name = source.Name
			case GetPortForwardingServiceRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case GetPortForwardingServiceRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*GetPortForwardingServiceRequest))
}

func (fieldMask *GetPortForwardingServiceRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetPortForwardingServicesRequest_FieldMask struct {
	Paths []BatchGetPortForwardingServicesRequest_FieldPath
}

func FullBatchGetPortForwardingServicesRequest_FieldMask() *BatchGetPortForwardingServicesRequest_FieldMask {
	res := &BatchGetPortForwardingServicesRequest_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetPortForwardingServicesRequest_FieldTerminalPath{selector: BatchGetPortForwardingServicesRequest_FieldPathSelectorNames})
	res.Paths = append(res.Paths, &BatchGetPortForwardingServicesRequest_FieldTerminalPath{selector: BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &BatchGetPortForwardingServicesRequest_FieldTerminalPath{selector: BatchGetPortForwardingServicesRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetPortForwardingServicesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetPortForwardingServicesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetPortForwardingServicesRequest_FieldPath(raw)
	})
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) Subtract(other *BatchGetPortForwardingServicesRequest_FieldMask) *BatchGetPortForwardingServicesRequest_FieldMask {
	result := &BatchGetPortForwardingServicesRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetPortForwardingServicesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetPortForwardingServicesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) FilterInputFields() *BatchGetPortForwardingServicesRequest_FieldMask {
	result := &BatchGetPortForwardingServicesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetPortForwardingServicesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetPortForwardingServicesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetPortForwardingServicesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetPortForwardingServicesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) AppendPath(path BatchGetPortForwardingServicesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetPortForwardingServicesRequest_FieldPath))
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) GetPaths() []BatchGetPortForwardingServicesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetPortForwardingServicesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) Set(target, source *BatchGetPortForwardingServicesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetPortForwardingServicesRequest), source.(*BatchGetPortForwardingServicesRequest))
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) Project(source *BatchGetPortForwardingServicesRequest) *BatchGetPortForwardingServicesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetPortForwardingServicesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetPortForwardingServicesRequest_FieldTerminalPath:
			switch tp.selector {
			case BatchGetPortForwardingServicesRequest_FieldPathSelectorNames:
				result.Names = source.Names
			case BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case BatchGetPortForwardingServicesRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetPortForwardingServicesRequest))
}

func (fieldMask *BatchGetPortForwardingServicesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type BatchGetPortForwardingServicesResponse_FieldMask struct {
	Paths []BatchGetPortForwardingServicesResponse_FieldPath
}

func FullBatchGetPortForwardingServicesResponse_FieldMask() *BatchGetPortForwardingServicesResponse_FieldMask {
	res := &BatchGetPortForwardingServicesResponse_FieldMask{}
	res.Paths = append(res.Paths, &BatchGetPortForwardingServicesResponse_FieldTerminalPath{selector: BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices})
	res.Paths = append(res.Paths, &BatchGetPortForwardingServicesResponse_FieldTerminalPath{selector: BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing})
	return res
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseBatchGetPortForwardingServicesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*BatchGetPortForwardingServicesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseBatchGetPortForwardingServicesResponse_FieldPath(raw)
	})
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) Subtract(other *BatchGetPortForwardingServicesResponse_FieldMask) *BatchGetPortForwardingServicesResponse_FieldMask {
	result := &BatchGetPortForwardingServicesResponse_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[BatchGetPortForwardingServicesResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices: &port_forwarding_service.PortForwardingService_FieldMask{},
	}
	mySubMasks := map[BatchGetPortForwardingServicesResponse_FieldPathSelector]gotenobject.FieldMask{
		BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices: &port_forwarding_service.PortForwardingService_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *BatchGetPortForwardingServicesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *BatchGetPortForwardingServicesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*BatchGetPortForwardingServicesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
						mySubMasks[BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices] = port_forwarding_service.FullPortForwardingService_FieldMask()
					}
				} else if tp, ok := path.(*BatchGetPortForwardingServicesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &BatchGetPortForwardingServicesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*BatchGetPortForwardingServicesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) FilterInputFields() *BatchGetPortForwardingServicesResponse_FieldMask {
	result := &BatchGetPortForwardingServicesResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
			if _, ok := path.(*BatchGetPortForwardingServicesResponse_FieldTerminalPath); ok {
				for _, subpath := range port_forwarding_service.FullPortForwardingService_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetPortForwardingServicesResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*BatchGetPortForwardingServicesResponse_FieldSubPath); ok {
				selectedMask := &port_forwarding_service.PortForwardingService_FieldMask{
					Paths: []port_forwarding_service.PortForwardingService_FieldPath{sub.subPath.(port_forwarding_service.PortForwardingService_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &BatchGetPortForwardingServicesResponse_FieldSubPath{selector: BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]BatchGetPortForwardingServicesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseBatchGetPortForwardingServicesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask BatchGetPortForwardingServicesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask BatchGetPortForwardingServicesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) AppendPath(path BatchGetPortForwardingServicesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(BatchGetPortForwardingServicesResponse_FieldPath))
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) GetPaths() []BatchGetPortForwardingServicesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseBatchGetPortForwardingServicesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) Set(target, source *BatchGetPortForwardingServicesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*BatchGetPortForwardingServicesResponse), source.(*BatchGetPortForwardingServicesResponse))
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) Project(source *BatchGetPortForwardingServicesResponse) *BatchGetPortForwardingServicesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &BatchGetPortForwardingServicesResponse{}
	portForwardingServicesMask := &port_forwarding_service.PortForwardingService_FieldMask{}
	wholePortForwardingServicesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *BatchGetPortForwardingServicesResponse_FieldTerminalPath:
			switch tp.selector {
			case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
				result.PortForwardingServices = source.PortForwardingServices
				wholePortForwardingServicesAccepted = true
			case BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing:
				result.Missing = source.Missing
			}
		case *BatchGetPortForwardingServicesResponse_FieldSubPath:
			switch tp.selector {
			case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
				portForwardingServicesMask.AppendPath(tp.subPath.(port_forwarding_service.PortForwardingService_FieldPath))
			}
		}
	}
	if wholePortForwardingServicesAccepted == false && len(portForwardingServicesMask.Paths) > 0 {
		for _, sourceItem := range source.GetPortForwardingServices() {
			result.PortForwardingServices = append(result.PortForwardingServices, portForwardingServicesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*BatchGetPortForwardingServicesResponse))
}

func (fieldMask *BatchGetPortForwardingServicesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListPortForwardingServicesRequest_FieldMask struct {
	Paths []ListPortForwardingServicesRequest_FieldPath
}

func FullListPortForwardingServicesRequest_FieldMask() *ListPortForwardingServicesRequest_FieldMask {
	res := &ListPortForwardingServicesRequest_FieldMask{}
	res.Paths = append(res.Paths, &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListPortForwardingServicesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListPortForwardingServicesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListPortForwardingServicesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListPortForwardingServicesRequest_FieldPath(raw)
	})
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) Subtract(other *ListPortForwardingServicesRequest_FieldMask) *ListPortForwardingServicesRequest_FieldMask {
	result := &ListPortForwardingServicesRequest_FieldMask{}
	removedSelectors := make([]bool, 7)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListPortForwardingServicesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListPortForwardingServicesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListPortForwardingServicesRequest_FieldMask) FilterInputFields() *ListPortForwardingServicesRequest_FieldMask {
	result := &ListPortForwardingServicesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListPortForwardingServicesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListPortForwardingServicesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListPortForwardingServicesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListPortForwardingServicesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListPortForwardingServicesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) AppendPath(path ListPortForwardingServicesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListPortForwardingServicesRequest_FieldPath))
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) GetPaths() []ListPortForwardingServicesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListPortForwardingServicesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) Set(target, source *ListPortForwardingServicesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListPortForwardingServicesRequest), source.(*ListPortForwardingServicesRequest))
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) Project(source *ListPortForwardingServicesRequest) *ListPortForwardingServicesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListPortForwardingServicesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListPortForwardingServicesRequest_FieldTerminalPath:
			switch tp.selector {
			case ListPortForwardingServicesRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case ListPortForwardingServicesRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case ListPortForwardingServicesRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case ListPortForwardingServicesRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case ListPortForwardingServicesRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case ListPortForwardingServicesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case ListPortForwardingServicesRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListPortForwardingServicesRequest))
}

func (fieldMask *ListPortForwardingServicesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type ListPortForwardingServicesResponse_FieldMask struct {
	Paths []ListPortForwardingServicesResponse_FieldPath
}

func FullListPortForwardingServicesResponse_FieldMask() *ListPortForwardingServicesResponse_FieldMask {
	res := &ListPortForwardingServicesResponse_FieldMask{}
	res.Paths = append(res.Paths, &ListPortForwardingServicesResponse_FieldTerminalPath{selector: ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices})
	res.Paths = append(res.Paths, &ListPortForwardingServicesResponse_FieldTerminalPath{selector: ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &ListPortForwardingServicesResponse_FieldTerminalPath{selector: ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *ListPortForwardingServicesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseListPortForwardingServicesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*ListPortForwardingServicesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseListPortForwardingServicesResponse_FieldPath(raw)
	})
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) Subtract(other *ListPortForwardingServicesResponse_FieldMask) *ListPortForwardingServicesResponse_FieldMask {
	result := &ListPortForwardingServicesResponse_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[ListPortForwardingServicesResponse_FieldPathSelector]gotenobject.FieldMask{
		ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices: &port_forwarding_service.PortForwardingService_FieldMask{},
	}
	mySubMasks := map[ListPortForwardingServicesResponse_FieldPathSelector]gotenobject.FieldMask{
		ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices: &port_forwarding_service.PortForwardingService_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *ListPortForwardingServicesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *ListPortForwardingServicesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*ListPortForwardingServicesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
						mySubMasks[ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices] = port_forwarding_service.FullPortForwardingService_FieldMask()
					}
				} else if tp, ok := path.(*ListPortForwardingServicesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &ListPortForwardingServicesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*ListPortForwardingServicesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *ListPortForwardingServicesResponse_FieldMask) FilterInputFields() *ListPortForwardingServicesResponse_FieldMask {
	result := &ListPortForwardingServicesResponse_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
			if _, ok := path.(*ListPortForwardingServicesResponse_FieldTerminalPath); ok {
				for _, subpath := range port_forwarding_service.FullPortForwardingService_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListPortForwardingServicesResponse_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*ListPortForwardingServicesResponse_FieldSubPath); ok {
				selectedMask := &port_forwarding_service.PortForwardingService_FieldMask{
					Paths: []port_forwarding_service.PortForwardingService_FieldPath{sub.subPath.(port_forwarding_service.PortForwardingService_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &ListPortForwardingServicesResponse_FieldSubPath{selector: ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *ListPortForwardingServicesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]ListPortForwardingServicesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseListPortForwardingServicesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask ListPortForwardingServicesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask ListPortForwardingServicesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) AppendPath(path ListPortForwardingServicesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(ListPortForwardingServicesResponse_FieldPath))
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) GetPaths() []ListPortForwardingServicesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseListPortForwardingServicesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) Set(target, source *ListPortForwardingServicesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*ListPortForwardingServicesResponse), source.(*ListPortForwardingServicesResponse))
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) Project(source *ListPortForwardingServicesResponse) *ListPortForwardingServicesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &ListPortForwardingServicesResponse{}
	portForwardingServicesMask := &port_forwarding_service.PortForwardingService_FieldMask{}
	wholePortForwardingServicesAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *ListPortForwardingServicesResponse_FieldTerminalPath:
			switch tp.selector {
			case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
				result.PortForwardingServices = source.PortForwardingServices
				wholePortForwardingServicesAccepted = true
			case ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		case *ListPortForwardingServicesResponse_FieldSubPath:
			switch tp.selector {
			case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
				portForwardingServicesMask.AppendPath(tp.subPath.(port_forwarding_service.PortForwardingService_FieldPath))
			}
		}
	}
	if wholePortForwardingServicesAccepted == false && len(portForwardingServicesMask.Paths) > 0 {
		for _, sourceItem := range source.GetPortForwardingServices() {
			result.PortForwardingServices = append(result.PortForwardingServices, portForwardingServicesMask.Project(sourceItem))
		}
	}
	return result
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*ListPortForwardingServicesResponse))
}

func (fieldMask *ListPortForwardingServicesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPortForwardingServiceRequest_FieldMask struct {
	Paths []WatchPortForwardingServiceRequest_FieldPath
}

func FullWatchPortForwardingServiceRequest_FieldMask() *WatchPortForwardingServiceRequest_FieldMask {
	res := &WatchPortForwardingServiceRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchPortForwardingServiceRequest_FieldTerminalPath{selector: WatchPortForwardingServiceRequest_FieldPathSelectorName})
	res.Paths = append(res.Paths, &WatchPortForwardingServiceRequest_FieldTerminalPath{selector: WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchPortForwardingServiceRequest_FieldTerminalPath{selector: WatchPortForwardingServiceRequest_FieldPathSelectorView})
	return res
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPortForwardingServiceRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPortForwardingServiceRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPortForwardingServiceRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) Subtract(other *WatchPortForwardingServiceRequest_FieldMask) *WatchPortForwardingServiceRequest_FieldMask {
	result := &WatchPortForwardingServiceRequest_FieldMask{}
	removedSelectors := make([]bool, 3)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPortForwardingServiceRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPortForwardingServiceRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) FilterInputFields() *WatchPortForwardingServiceRequest_FieldMask {
	result := &WatchPortForwardingServiceRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPortForwardingServiceRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPortForwardingServiceRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPortForwardingServiceRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPortForwardingServiceRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) AppendPath(path WatchPortForwardingServiceRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPortForwardingServiceRequest_FieldPath))
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) GetPaths() []WatchPortForwardingServiceRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPortForwardingServiceRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) Set(target, source *WatchPortForwardingServiceRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPortForwardingServiceRequest), source.(*WatchPortForwardingServiceRequest))
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) Project(source *WatchPortForwardingServiceRequest) *WatchPortForwardingServiceRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPortForwardingServiceRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPortForwardingServiceRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchPortForwardingServiceRequest_FieldPathSelectorName:
				result.Name = source.Name
			case WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchPortForwardingServiceRequest_FieldPathSelectorView:
				result.View = source.View
			}
		}
	}
	return result
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPortForwardingServiceRequest))
}

func (fieldMask *WatchPortForwardingServiceRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPortForwardingServiceResponse_FieldMask struct {
	Paths []WatchPortForwardingServiceResponse_FieldPath
}

func FullWatchPortForwardingServiceResponse_FieldMask() *WatchPortForwardingServiceResponse_FieldMask {
	res := &WatchPortForwardingServiceResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchPortForwardingServiceResponse_FieldTerminalPath{selector: WatchPortForwardingServiceResponse_FieldPathSelectorChange})
	return res
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPortForwardingServiceResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPortForwardingServiceResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPortForwardingServiceResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) Subtract(other *WatchPortForwardingServiceResponse_FieldMask) *WatchPortForwardingServiceResponse_FieldMask {
	result := &WatchPortForwardingServiceResponse_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPortForwardingServiceResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPortForwardingServiceResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) FilterInputFields() *WatchPortForwardingServiceResponse_FieldMask {
	result := &WatchPortForwardingServiceResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPortForwardingServiceResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPortForwardingServiceResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPortForwardingServiceResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPortForwardingServiceResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) AppendPath(path WatchPortForwardingServiceResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPortForwardingServiceResponse_FieldPath))
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) GetPaths() []WatchPortForwardingServiceResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPortForwardingServiceResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) Set(target, source *WatchPortForwardingServiceResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPortForwardingServiceResponse), source.(*WatchPortForwardingServiceResponse))
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) Project(source *WatchPortForwardingServiceResponse) *WatchPortForwardingServiceResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPortForwardingServiceResponse{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPortForwardingServiceResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchPortForwardingServiceResponse_FieldPathSelectorChange:
				result.Change = source.Change
			}
		}
	}
	return result
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPortForwardingServiceResponse))
}

func (fieldMask *WatchPortForwardingServiceResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPortForwardingServicesRequest_FieldMask struct {
	Paths []WatchPortForwardingServicesRequest_FieldPath
}

func FullWatchPortForwardingServicesRequest_FieldMask() *WatchPortForwardingServicesRequest_FieldMask {
	res := &WatchPortForwardingServicesRequest_FieldMask{}
	res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorType})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorPageSize})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorPageToken})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorFilter})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorView})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize})
	return res
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPortForwardingServicesRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 10)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPortForwardingServicesRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPortForwardingServicesRequest_FieldPath(raw)
	})
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) Subtract(other *WatchPortForwardingServicesRequest_FieldMask) *WatchPortForwardingServicesRequest_FieldMask {
	result := &WatchPortForwardingServicesRequest_FieldMask{}
	removedSelectors := make([]bool, 10)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPortForwardingServicesRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPortForwardingServicesRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) FilterInputFields() *WatchPortForwardingServicesRequest_FieldMask {
	result := &WatchPortForwardingServicesRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPortForwardingServicesRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPortForwardingServicesRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPortForwardingServicesRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPortForwardingServicesRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) AppendPath(path WatchPortForwardingServicesRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPortForwardingServicesRequest_FieldPath))
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) GetPaths() []WatchPortForwardingServicesRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPortForwardingServicesRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) Set(target, source *WatchPortForwardingServicesRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPortForwardingServicesRequest), source.(*WatchPortForwardingServicesRequest))
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) Project(source *WatchPortForwardingServicesRequest) *WatchPortForwardingServicesRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPortForwardingServicesRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPortForwardingServicesRequest_FieldTerminalPath:
			switch tp.selector {
			case WatchPortForwardingServicesRequest_FieldPathSelectorType:
				result.Type = source.Type
			case WatchPortForwardingServicesRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case WatchPortForwardingServicesRequest_FieldPathSelectorPageSize:
				result.PageSize = source.PageSize
			case WatchPortForwardingServicesRequest_FieldPathSelectorPageToken:
				result.PageToken = source.PageToken
			case WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy:
				result.OrderBy = source.OrderBy
			case WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchPortForwardingServicesRequest_FieldPathSelectorFilter:
				result.Filter = source.Filter
			case WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			case WatchPortForwardingServicesRequest_FieldPathSelectorView:
				result.View = source.View
			case WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize:
				result.MaxChunkSize = source.MaxChunkSize
			}
		}
	}
	return result
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPortForwardingServicesRequest))
}

func (fieldMask *WatchPortForwardingServicesRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPortForwardingServicesResponse_FieldMask struct {
	Paths []WatchPortForwardingServicesResponse_FieldPath
}

func FullWatchPortForwardingServicesResponse_FieldMask() *WatchPortForwardingServicesResponse_FieldMask {
	res := &WatchPortForwardingServicesResponse_FieldMask{}
	res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset})
	return res
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPortForwardingServicesResponse_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 7)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPortForwardingServicesResponse_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPortForwardingServicesResponse_FieldPath(raw)
	})
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) Subtract(other *WatchPortForwardingServicesResponse_FieldMask) *WatchPortForwardingServicesResponse_FieldMask {
	result := &WatchPortForwardingServicesResponse_FieldMask{}
	removedSelectors := make([]bool, 7)
	otherSubMasks := map[WatchPortForwardingServicesResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange: &WatchPortForwardingServicesResponse_PageTokenChange_FieldMask{},
	}
	mySubMasks := map[WatchPortForwardingServicesResponse_FieldPathSelector]gotenobject.FieldMask{
		WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange: &WatchPortForwardingServicesResponse_PageTokenChange_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPortForwardingServicesResponse_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *WatchPortForwardingServicesResponse_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*WatchPortForwardingServicesResponse_FieldTerminalPath); ok {
					switch tp.selector {
					case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
						mySubMasks[WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange] = FullWatchPortForwardingServicesResponse_PageTokenChange_FieldMask()
					}
				} else if tp, ok := path.(*WatchPortForwardingServicesResponse_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &WatchPortForwardingServicesResponse_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPortForwardingServicesResponse_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) FilterInputFields() *WatchPortForwardingServicesResponse_FieldMask {
	result := &WatchPortForwardingServicesResponse_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPortForwardingServicesResponse_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPortForwardingServicesResponse_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPortForwardingServicesResponse_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPortForwardingServicesResponse_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) AppendPath(path WatchPortForwardingServicesResponse_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPortForwardingServicesResponse_FieldPath))
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) GetPaths() []WatchPortForwardingServicesResponse_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPortForwardingServicesResponse_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) Set(target, source *WatchPortForwardingServicesResponse) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPortForwardingServicesResponse), source.(*WatchPortForwardingServicesResponse))
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) Project(source *WatchPortForwardingServicesResponse) *WatchPortForwardingServicesResponse {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPortForwardingServicesResponse{}
	pageTokenChangeMask := &WatchPortForwardingServicesResponse_PageTokenChange_FieldMask{}
	wholePageTokenChangeAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPortForwardingServicesResponse_FieldTerminalPath:
			switch tp.selector {
			case WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges:
				result.PortForwardingServiceChanges = source.PortForwardingServiceChanges
			case WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent:
				result.IsCurrent = source.IsCurrent
			case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
				result.PageTokenChange = source.PageTokenChange
				wholePageTokenChangeAccepted = true
			case WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken:
				result.ResumeToken = source.ResumeToken
			case WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize:
				result.SnapshotSize = source.SnapshotSize
			case WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset:
				result.IsSoftReset = source.IsSoftReset
			case WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset:
				result.IsHardReset = source.IsHardReset
			}
		case *WatchPortForwardingServicesResponse_FieldSubPath:
			switch tp.selector {
			case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
				pageTokenChangeMask.AppendPath(tp.subPath.(WatchPortForwardingServicesResponsePageTokenChange_FieldPath))
			}
		}
	}
	if wholePageTokenChangeAccepted == false && len(pageTokenChangeMask.Paths) > 0 {
		result.PageTokenChange = pageTokenChangeMask.Project(source.GetPageTokenChange())
	}
	return result
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPortForwardingServicesResponse))
}

func (fieldMask *WatchPortForwardingServicesResponse_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type WatchPortForwardingServicesResponse_PageTokenChange_FieldMask struct {
	Paths []WatchPortForwardingServicesResponsePageTokenChange_FieldPath
}

func FullWatchPortForwardingServicesResponse_PageTokenChange_FieldMask() *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask {
	res := &WatchPortForwardingServicesResponse_PageTokenChange_FieldMask{}
	res.Paths = append(res.Paths, &WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath{selector: WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	res.Paths = append(res.Paths, &WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath{selector: WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	return res
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPath(raw)
	})
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) ProtoMessage() {}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) Subtract(other *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask {
	result := &WatchPortForwardingServicesResponse_PageTokenChange_FieldMask{}
	removedSelectors := make([]bool, 2)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*WatchPortForwardingServicesResponse_PageTokenChange_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) FilterInputFields() *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask {
	result := &WatchPortForwardingServicesResponse_PageTokenChange_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]WatchPortForwardingServicesResponsePageTokenChange_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) AppendPath(path WatchPortForwardingServicesResponsePageTokenChange_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(WatchPortForwardingServicesResponsePageTokenChange_FieldPath))
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) GetPaths() []WatchPortForwardingServicesResponsePageTokenChange_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) Set(target, source *WatchPortForwardingServicesResponse_PageTokenChange) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*WatchPortForwardingServicesResponse_PageTokenChange), source.(*WatchPortForwardingServicesResponse_PageTokenChange))
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) Project(source *WatchPortForwardingServicesResponse_PageTokenChange) *WatchPortForwardingServicesResponse_PageTokenChange {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &WatchPortForwardingServicesResponse_PageTokenChange{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath:
			switch tp.selector {
			case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
				result.PrevPageToken = source.PrevPageToken
			case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
				result.NextPageToken = source.NextPageToken
			}
		}
	}
	return result
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*WatchPortForwardingServicesResponse_PageTokenChange))
}

func (fieldMask *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type CreatePortForwardingServiceRequest_FieldMask struct {
	Paths []CreatePortForwardingServiceRequest_FieldPath
}

func FullCreatePortForwardingServiceRequest_FieldMask() *CreatePortForwardingServiceRequest_FieldMask {
	res := &CreatePortForwardingServiceRequest_FieldMask{}
	res.Paths = append(res.Paths, &CreatePortForwardingServiceRequest_FieldTerminalPath{selector: CreatePortForwardingServiceRequest_FieldPathSelectorParent})
	res.Paths = append(res.Paths, &CreatePortForwardingServiceRequest_FieldTerminalPath{selector: CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService})
	return res
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseCreatePortForwardingServiceRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*CreatePortForwardingServiceRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseCreatePortForwardingServiceRequest_FieldPath(raw)
	})
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) ProtoMessage() {}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) Subtract(other *CreatePortForwardingServiceRequest_FieldMask) *CreatePortForwardingServiceRequest_FieldMask {
	result := &CreatePortForwardingServiceRequest_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[CreatePortForwardingServiceRequest_FieldPathSelector]gotenobject.FieldMask{
		CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService: &port_forwarding_service.PortForwardingService_FieldMask{},
	}
	mySubMasks := map[CreatePortForwardingServiceRequest_FieldPathSelector]gotenobject.FieldMask{
		CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService: &port_forwarding_service.PortForwardingService_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *CreatePortForwardingServiceRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *CreatePortForwardingServiceRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*CreatePortForwardingServiceRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
						mySubMasks[CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService] = port_forwarding_service.FullPortForwardingService_FieldMask()
					}
				} else if tp, ok := path.(*CreatePortForwardingServiceRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &CreatePortForwardingServiceRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*CreatePortForwardingServiceRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) FilterInputFields() *CreatePortForwardingServiceRequest_FieldMask {
	result := &CreatePortForwardingServiceRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
			if _, ok := path.(*CreatePortForwardingServiceRequest_FieldTerminalPath); ok {
				for _, subpath := range port_forwarding_service.FullPortForwardingService_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreatePortForwardingServiceRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*CreatePortForwardingServiceRequest_FieldSubPath); ok {
				selectedMask := &port_forwarding_service.PortForwardingService_FieldMask{
					Paths: []port_forwarding_service.PortForwardingService_FieldPath{sub.subPath.(port_forwarding_service.PortForwardingService_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &CreatePortForwardingServiceRequest_FieldSubPath{selector: CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]CreatePortForwardingServiceRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseCreatePortForwardingServiceRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask CreatePortForwardingServiceRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask CreatePortForwardingServiceRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) AppendPath(path CreatePortForwardingServiceRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(CreatePortForwardingServiceRequest_FieldPath))
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) GetPaths() []CreatePortForwardingServiceRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseCreatePortForwardingServiceRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) Set(target, source *CreatePortForwardingServiceRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*CreatePortForwardingServiceRequest), source.(*CreatePortForwardingServiceRequest))
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) Project(source *CreatePortForwardingServiceRequest) *CreatePortForwardingServiceRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &CreatePortForwardingServiceRequest{}
	portForwardingServiceMask := &port_forwarding_service.PortForwardingService_FieldMask{}
	wholePortForwardingServiceAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *CreatePortForwardingServiceRequest_FieldTerminalPath:
			switch tp.selector {
			case CreatePortForwardingServiceRequest_FieldPathSelectorParent:
				result.Parent = source.Parent
			case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
				result.PortForwardingService = source.PortForwardingService
				wholePortForwardingServiceAccepted = true
			}
		case *CreatePortForwardingServiceRequest_FieldSubPath:
			switch tp.selector {
			case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
				portForwardingServiceMask.AppendPath(tp.subPath.(port_forwarding_service.PortForwardingService_FieldPath))
			}
		}
	}
	if wholePortForwardingServiceAccepted == false && len(portForwardingServiceMask.Paths) > 0 {
		result.PortForwardingService = portForwardingServiceMask.Project(source.GetPortForwardingService())
	}
	return result
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*CreatePortForwardingServiceRequest))
}

func (fieldMask *CreatePortForwardingServiceRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdatePortForwardingServiceRequest_FieldMask struct {
	Paths []UpdatePortForwardingServiceRequest_FieldPath
}

func FullUpdatePortForwardingServiceRequest_FieldMask() *UpdatePortForwardingServiceRequest_FieldMask {
	res := &UpdatePortForwardingServiceRequest_FieldMask{}
	res.Paths = append(res.Paths, &UpdatePortForwardingServiceRequest_FieldTerminalPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService})
	res.Paths = append(res.Paths, &UpdatePortForwardingServiceRequest_FieldTerminalPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask})
	res.Paths = append(res.Paths, &UpdatePortForwardingServiceRequest_FieldTerminalPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorCas})
	return res
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdatePortForwardingServiceRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 3)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdatePortForwardingServiceRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdatePortForwardingServiceRequest_FieldPath(raw)
	})
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) ProtoMessage() {}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) Subtract(other *UpdatePortForwardingServiceRequest_FieldMask) *UpdatePortForwardingServiceRequest_FieldMask {
	result := &UpdatePortForwardingServiceRequest_FieldMask{}
	removedSelectors := make([]bool, 3)
	otherSubMasks := map[UpdatePortForwardingServiceRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService: &port_forwarding_service.PortForwardingService_FieldMask{},
		UpdatePortForwardingServiceRequest_FieldPathSelectorCas:                   &UpdatePortForwardingServiceRequest_CAS_FieldMask{},
	}
	mySubMasks := map[UpdatePortForwardingServiceRequest_FieldPathSelector]gotenobject.FieldMask{
		UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService: &port_forwarding_service.PortForwardingService_FieldMask{},
		UpdatePortForwardingServiceRequest_FieldPathSelectorCas:                   &UpdatePortForwardingServiceRequest_CAS_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdatePortForwardingServiceRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdatePortForwardingServiceRequest_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdatePortForwardingServiceRequest_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
						mySubMasks[UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService] = port_forwarding_service.FullPortForwardingService_FieldMask()
					case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
						mySubMasks[UpdatePortForwardingServiceRequest_FieldPathSelectorCas] = FullUpdatePortForwardingServiceRequest_CAS_FieldMask()
					}
				} else if tp, ok := path.(*UpdatePortForwardingServiceRequest_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdatePortForwardingServiceRequest_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdatePortForwardingServiceRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) FilterInputFields() *UpdatePortForwardingServiceRequest_FieldMask {
	result := &UpdatePortForwardingServiceRequest_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
			if _, ok := path.(*UpdatePortForwardingServiceRequest_FieldTerminalPath); ok {
				for _, subpath := range port_forwarding_service.FullPortForwardingService_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePortForwardingServiceRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdatePortForwardingServiceRequest_FieldSubPath); ok {
				selectedMask := &port_forwarding_service.PortForwardingService_FieldMask{
					Paths: []port_forwarding_service.PortForwardingService_FieldPath{sub.subPath.(port_forwarding_service.PortForwardingService_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePortForwardingServiceRequest_FieldSubPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService, subPath: allowedPath})
				}
			}
		case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
			if _, ok := path.(*UpdatePortForwardingServiceRequest_FieldTerminalPath); ok {
				for _, subpath := range FullUpdatePortForwardingServiceRequest_CAS_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePortForwardingServiceRequest_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdatePortForwardingServiceRequest_FieldSubPath); ok {
				selectedMask := &UpdatePortForwardingServiceRequest_CAS_FieldMask{
					Paths: []UpdatePortForwardingServiceRequestCAS_FieldPath{sub.subPath.(UpdatePortForwardingServiceRequestCAS_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePortForwardingServiceRequest_FieldSubPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorCas, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdatePortForwardingServiceRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdatePortForwardingServiceRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdatePortForwardingServiceRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdatePortForwardingServiceRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) AppendPath(path UpdatePortForwardingServiceRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdatePortForwardingServiceRequest_FieldPath))
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) GetPaths() []UpdatePortForwardingServiceRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdatePortForwardingServiceRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) Set(target, source *UpdatePortForwardingServiceRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdatePortForwardingServiceRequest), source.(*UpdatePortForwardingServiceRequest))
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) Project(source *UpdatePortForwardingServiceRequest) *UpdatePortForwardingServiceRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdatePortForwardingServiceRequest{}
	portForwardingServiceMask := &port_forwarding_service.PortForwardingService_FieldMask{}
	wholePortForwardingServiceAccepted := false
	casMask := &UpdatePortForwardingServiceRequest_CAS_FieldMask{}
	wholeCasAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdatePortForwardingServiceRequest_FieldTerminalPath:
			switch tp.selector {
			case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
				result.PortForwardingService = source.PortForwardingService
				wholePortForwardingServiceAccepted = true
			case UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask:
				result.UpdateMask = source.UpdateMask
			case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
				result.Cas = source.Cas
				wholeCasAccepted = true
			}
		case *UpdatePortForwardingServiceRequest_FieldSubPath:
			switch tp.selector {
			case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
				portForwardingServiceMask.AppendPath(tp.subPath.(port_forwarding_service.PortForwardingService_FieldPath))
			case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
				casMask.AppendPath(tp.subPath.(UpdatePortForwardingServiceRequestCAS_FieldPath))
			}
		}
	}
	if wholePortForwardingServiceAccepted == false && len(portForwardingServiceMask.Paths) > 0 {
		result.PortForwardingService = portForwardingServiceMask.Project(source.GetPortForwardingService())
	}
	if wholeCasAccepted == false && len(casMask.Paths) > 0 {
		result.Cas = casMask.Project(source.GetCas())
	}
	return result
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdatePortForwardingServiceRequest))
}

func (fieldMask *UpdatePortForwardingServiceRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type UpdatePortForwardingServiceRequest_CAS_FieldMask struct {
	Paths []UpdatePortForwardingServiceRequestCAS_FieldPath
}

func FullUpdatePortForwardingServiceRequest_CAS_FieldMask() *UpdatePortForwardingServiceRequest_CAS_FieldMask {
	res := &UpdatePortForwardingServiceRequest_CAS_FieldMask{}
	res.Paths = append(res.Paths, &UpdatePortForwardingServiceRequestCAS_FieldTerminalPath{selector: UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState})
	res.Paths = append(res.Paths, &UpdatePortForwardingServiceRequestCAS_FieldTerminalPath{selector: UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask})
	return res
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseUpdatePortForwardingServiceRequestCAS_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 2)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*UpdatePortForwardingServiceRequestCAS_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseUpdatePortForwardingServiceRequestCAS_FieldPath(raw)
	})
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) ProtoMessage() {}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) Subtract(other *UpdatePortForwardingServiceRequest_CAS_FieldMask) *UpdatePortForwardingServiceRequest_CAS_FieldMask {
	result := &UpdatePortForwardingServiceRequest_CAS_FieldMask{}
	removedSelectors := make([]bool, 2)
	otherSubMasks := map[UpdatePortForwardingServiceRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState: &port_forwarding_service.PortForwardingService_FieldMask{},
	}
	mySubMasks := map[UpdatePortForwardingServiceRequestCAS_FieldPathSelector]gotenobject.FieldMask{
		UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState: &port_forwarding_service.PortForwardingService_FieldMask{},
	}

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		case *UpdatePortForwardingServiceRequestCAS_FieldSubPath:
			otherSubMasks[tp.selector].AppendRawPath(tp.subPath)
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			if otherSubMask := otherSubMasks[path.Selector()]; otherSubMask != nil && otherSubMask.PathsCount() > 0 {
				if tp, ok := path.(*UpdatePortForwardingServiceRequestCAS_FieldTerminalPath); ok {
					switch tp.selector {
					case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
						mySubMasks[UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState] = port_forwarding_service.FullPortForwardingService_FieldMask()
					}
				} else if tp, ok := path.(*UpdatePortForwardingServiceRequestCAS_FieldSubPath); ok {
					mySubMasks[tp.selector].AppendRawPath(tp.subPath)
				}
			} else {
				result.Paths = append(result.Paths, path)
			}
		}
	}
	for selector, mySubMask := range mySubMasks {
		if mySubMask.PathsCount() > 0 {
			for _, allowedPath := range mySubMask.SubtractRaw(otherSubMasks[selector]).GetRawPaths() {
				result.Paths = append(result.Paths, &UpdatePortForwardingServiceRequestCAS_FieldSubPath{selector: selector, subPath: allowedPath})
			}
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*UpdatePortForwardingServiceRequest_CAS_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) FilterInputFields() *UpdatePortForwardingServiceRequest_CAS_FieldMask {
	result := &UpdatePortForwardingServiceRequest_CAS_FieldMask{}
	for _, path := range fieldMask.Paths {
		switch path.Selector() {
		case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
			if _, ok := path.(*UpdatePortForwardingServiceRequestCAS_FieldTerminalPath); ok {
				for _, subpath := range port_forwarding_service.FullPortForwardingService_FieldMask().FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePortForwardingServiceRequestCAS_FieldSubPath{selector: path.Selector(), subPath: subpath})
				}
			} else if sub, ok := path.(*UpdatePortForwardingServiceRequestCAS_FieldSubPath); ok {
				selectedMask := &port_forwarding_service.PortForwardingService_FieldMask{
					Paths: []port_forwarding_service.PortForwardingService_FieldPath{sub.subPath.(port_forwarding_service.PortForwardingService_FieldPath)},
				}
				for _, allowedPath := range selectedMask.FilterInputFields().Paths {
					result.Paths = append(result.Paths, &UpdatePortForwardingServiceRequestCAS_FieldSubPath{selector: UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState, subPath: allowedPath})
				}
			}
		default:
			result.Paths = append(result.Paths, path)
		}
	}
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]UpdatePortForwardingServiceRequestCAS_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseUpdatePortForwardingServiceRequestCAS_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask UpdatePortForwardingServiceRequest_CAS_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask UpdatePortForwardingServiceRequest_CAS_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) AppendPath(path UpdatePortForwardingServiceRequestCAS_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(UpdatePortForwardingServiceRequestCAS_FieldPath))
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) GetPaths() []UpdatePortForwardingServiceRequestCAS_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseUpdatePortForwardingServiceRequestCAS_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) Set(target, source *UpdatePortForwardingServiceRequest_CAS) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*UpdatePortForwardingServiceRequest_CAS), source.(*UpdatePortForwardingServiceRequest_CAS))
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) Project(source *UpdatePortForwardingServiceRequest_CAS) *UpdatePortForwardingServiceRequest_CAS {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &UpdatePortForwardingServiceRequest_CAS{}
	conditionalStateMask := &port_forwarding_service.PortForwardingService_FieldMask{}
	wholeConditionalStateAccepted := false

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath:
			switch tp.selector {
			case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
				result.ConditionalState = source.ConditionalState
				wholeConditionalStateAccepted = true
			case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask:
				result.FieldMask = source.FieldMask
			}
		case *UpdatePortForwardingServiceRequestCAS_FieldSubPath:
			switch tp.selector {
			case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
				conditionalStateMask.AppendPath(tp.subPath.(port_forwarding_service.PortForwardingService_FieldPath))
			}
		}
	}
	if wholeConditionalStateAccepted == false && len(conditionalStateMask.Paths) > 0 {
		result.ConditionalState = conditionalStateMask.Project(source.GetConditionalState())
	}
	return result
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*UpdatePortForwardingServiceRequest_CAS))
}

func (fieldMask *UpdatePortForwardingServiceRequest_CAS_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}

type DeletePortForwardingServiceRequest_FieldMask struct {
	Paths []DeletePortForwardingServiceRequest_FieldPath
}

func FullDeletePortForwardingServiceRequest_FieldMask() *DeletePortForwardingServiceRequest_FieldMask {
	res := &DeletePortForwardingServiceRequest_FieldMask{}
	res.Paths = append(res.Paths, &DeletePortForwardingServiceRequest_FieldTerminalPath{selector: DeletePortForwardingServiceRequest_FieldPathSelectorName})
	return res
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) String() string {
	if fieldMask == nil {
		return "<nil>"
	}
	pathsStr := make([]string, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		pathsStr = append(pathsStr, path.String())
	}
	return strings.Join(pathsStr, ", ")
}

// firestore encoding/decoding integration
func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) EncodeFirestore() (*firestorepb.Value, error) {
	if fieldMask == nil {
		return &firestorepb.Value{ValueType: &firestorepb.Value_NullValue{}}, nil
	}
	arrayValues := make([]*firestorepb.Value, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.GetPaths() {
		arrayValues = append(arrayValues, &firestorepb.Value{ValueType: &firestorepb.Value_StringValue{StringValue: path.String()}})
	}
	return &firestorepb.Value{
		ValueType: &firestorepb.Value_ArrayValue{ArrayValue: &firestorepb.ArrayValue{Values: arrayValues}},
	}, nil
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) DecodeFirestore(fpbv *firestorepb.Value) error {
	for _, value := range fpbv.GetArrayValue().GetValues() {
		parsedPath, err := ParseDeletePortForwardingServiceRequest_FieldPath(value.GetStringValue())
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, parsedPath)
	}
	return nil
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) IsFull() bool {
	if fieldMask == nil {
		return false
	}
	presentSelectors := make([]bool, 1)
	for _, path := range fieldMask.Paths {
		if asFinal, ok := path.(*DeletePortForwardingServiceRequest_FieldTerminalPath); ok {
			presentSelectors[int(asFinal.selector)] = true
		}
	}
	for _, flag := range presentSelectors {
		if !flag {
			return false
		}
	}
	return true
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) ProtoReflect() preflect.Message {
	return gotenobject.MakeFieldMaskReflection(fieldMask, func(raw string) (gotenobject.FieldPath, error) {
		return ParseDeletePortForwardingServiceRequest_FieldPath(raw)
	})
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) ProtoMessage() {}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) Reset() {
	if fieldMask != nil {
		fieldMask.Paths = nil
	}
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) Subtract(other *DeletePortForwardingServiceRequest_FieldMask) *DeletePortForwardingServiceRequest_FieldMask {
	result := &DeletePortForwardingServiceRequest_FieldMask{}
	removedSelectors := make([]bool, 1)

	for _, path := range other.GetPaths() {
		switch tp := path.(type) {
		case *DeletePortForwardingServiceRequest_FieldTerminalPath:
			removedSelectors[int(tp.selector)] = true
		}
	}
	for _, path := range fieldMask.GetPaths() {
		if !removedSelectors[int(path.Selector())] {
			result.Paths = append(result.Paths, path)
		}
	}

	if len(result.Paths) == 0 {
		return nil
	}
	return result
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) SubtractRaw(other gotenobject.FieldMask) gotenobject.FieldMask {
	return fieldMask.Subtract(other.(*DeletePortForwardingServiceRequest_FieldMask))
}

// FilterInputFields generates copy of field paths with output_only field paths removed
func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) FilterInputFields() *DeletePortForwardingServiceRequest_FieldMask {
	result := &DeletePortForwardingServiceRequest_FieldMask{}
	result.Paths = append(result.Paths, fieldMask.Paths...)
	return result
}

// ToFieldMask is used for proto conversions
func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) ToProtoFieldMask() *fieldmaskpb.FieldMask {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	for _, path := range fieldMask.Paths {
		protoFieldMask.Paths = append(protoFieldMask.Paths, path.String())
	}
	return protoFieldMask
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) FromProtoFieldMask(protoFieldMask *fieldmaskpb.FieldMask) error {
	if fieldMask == nil {
		return status.Error(codes.Internal, "target field mask is nil")
	}
	fieldMask.Paths = make([]DeletePortForwardingServiceRequest_FieldPath, 0, len(protoFieldMask.Paths))
	for _, strPath := range protoFieldMask.Paths {
		path, err := ParseDeletePortForwardingServiceRequest_FieldPath(strPath)
		if err != nil {
			return err
		}
		fieldMask.Paths = append(fieldMask.Paths, path)
	}
	return nil
}

// implement methods required by customType
func (fieldMask DeletePortForwardingServiceRequest_FieldMask) Marshal() ([]byte, error) {
	protoFieldMask := fieldMask.ToProtoFieldMask()
	return proto.Marshal(protoFieldMask)
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) Unmarshal(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := proto.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) Size() int {
	return proto.Size(fieldMask.ToProtoFieldMask())
}

func (fieldMask DeletePortForwardingServiceRequest_FieldMask) MarshalJSON() ([]byte, error) {
	return json.Marshal(fieldMask.ToProtoFieldMask())
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) UnmarshalJSON(data []byte) error {
	protoFieldMask := &fieldmaskpb.FieldMask{}
	if err := json.Unmarshal(data, protoFieldMask); err != nil {
		return err
	}
	if err := fieldMask.FromProtoFieldMask(protoFieldMask); err != nil {
		return err
	}
	return nil
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) AppendPath(path DeletePortForwardingServiceRequest_FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path)
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) AppendRawPath(path gotenobject.FieldPath) {
	fieldMask.Paths = append(fieldMask.Paths, path.(DeletePortForwardingServiceRequest_FieldPath))
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) GetPaths() []DeletePortForwardingServiceRequest_FieldPath {
	if fieldMask == nil {
		return nil
	}
	return fieldMask.Paths
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) GetRawPaths() []gotenobject.FieldPath {
	if fieldMask == nil {
		return nil
	}
	rawPaths := make([]gotenobject.FieldPath, 0, len(fieldMask.Paths))
	for _, path := range fieldMask.Paths {
		rawPaths = append(rawPaths, path)
	}
	return rawPaths
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) SetFromCliFlag(raw string) error {
	path, err := ParseDeletePortForwardingServiceRequest_FieldPath(raw)
	if err != nil {
		return err
	}
	fieldMask.Paths = append(fieldMask.Paths, path)
	return nil
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) Set(target, source *DeletePortForwardingServiceRequest) {
	for _, path := range fieldMask.Paths {
		val, _ := path.GetSingle(source)
		// if val is nil, then field does not exist in source, skip
		// otherwise, process (can still reflect.ValueOf(val).IsNil!)
		if val != nil {
			path.WithIValue(val).SetTo(&target)
		}
	}
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) SetRaw(target, source gotenobject.GotenObjectExt) {
	fieldMask.Set(target.(*DeletePortForwardingServiceRequest), source.(*DeletePortForwardingServiceRequest))
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) Project(source *DeletePortForwardingServiceRequest) *DeletePortForwardingServiceRequest {
	if source == nil {
		return nil
	}
	if fieldMask == nil {
		return source
	}
	result := &DeletePortForwardingServiceRequest{}

	for _, p := range fieldMask.Paths {
		switch tp := p.(type) {
		case *DeletePortForwardingServiceRequest_FieldTerminalPath:
			switch tp.selector {
			case DeletePortForwardingServiceRequest_FieldPathSelectorName:
				result.Name = source.Name
			}
		}
	}
	return result
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) ProjectRaw(source gotenobject.GotenObjectExt) gotenobject.GotenObjectExt {
	return fieldMask.Project(source.(*DeletePortForwardingServiceRequest))
}

func (fieldMask *DeletePortForwardingServiceRequest_FieldMask) PathsCount() int {
	if fieldMask == nil {
		return 0
	}
	return len(fieldMask.Paths)
}
