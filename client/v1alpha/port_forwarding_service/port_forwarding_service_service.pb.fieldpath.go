// Code generated by protoc-gen-goten-object
// File: ztna/proto/v1alpha/port_forwarding_service_service.proto
// DO NOT EDIT!!!

package port_forwarding_service_client

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	port_forwarding_service "github.com/cloudwan/ztna-sdk/resources/v1alpha/port_forwarding_service"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &port_forwarding_service.PortForwardingService{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type GetPortForwardingServiceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() GetPortForwardingServiceRequest_FieldPathSelector
	Get(source *GetPortForwardingServiceRequest) []interface{}
	GetSingle(source *GetPortForwardingServiceRequest) (interface{}, bool)
	ClearValue(item *GetPortForwardingServiceRequest)

	// Those methods build corresponding GetPortForwardingServiceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) GetPortForwardingServiceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) GetPortForwardingServiceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) GetPortForwardingServiceRequest_FieldPathArrayItemValue
}

type GetPortForwardingServiceRequest_FieldPathSelector int32

const (
	GetPortForwardingServiceRequest_FieldPathSelectorName      GetPortForwardingServiceRequest_FieldPathSelector = 0
	GetPortForwardingServiceRequest_FieldPathSelectorFieldMask GetPortForwardingServiceRequest_FieldPathSelector = 1
	GetPortForwardingServiceRequest_FieldPathSelectorView      GetPortForwardingServiceRequest_FieldPathSelector = 2
)

func (s GetPortForwardingServiceRequest_FieldPathSelector) String() string {
	switch s {
	case GetPortForwardingServiceRequest_FieldPathSelectorName:
		return "name"
	case GetPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case GetPortForwardingServiceRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for GetPortForwardingServiceRequest: %d", s))
	}
}

func BuildGetPortForwardingServiceRequest_FieldPath(fp gotenobject.RawFieldPath) (GetPortForwardingServiceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object GetPortForwardingServiceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &GetPortForwardingServiceRequest_FieldTerminalPath{selector: GetPortForwardingServiceRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &GetPortForwardingServiceRequest_FieldTerminalPath{selector: GetPortForwardingServiceRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &GetPortForwardingServiceRequest_FieldTerminalPath{selector: GetPortForwardingServiceRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object GetPortForwardingServiceRequest", fp)
}

func ParseGetPortForwardingServiceRequest_FieldPath(rawField string) (GetPortForwardingServiceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildGetPortForwardingServiceRequest_FieldPath(fp)
}

func MustParseGetPortForwardingServiceRequest_FieldPath(rawField string) GetPortForwardingServiceRequest_FieldPath {
	fp, err := ParseGetPortForwardingServiceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type GetPortForwardingServiceRequest_FieldTerminalPath struct {
	selector GetPortForwardingServiceRequest_FieldPathSelector
}

var _ GetPortForwardingServiceRequest_FieldPath = (*GetPortForwardingServiceRequest_FieldTerminalPath)(nil)

func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) Selector() GetPortForwardingServiceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source GetPortForwardingServiceRequest
func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) Get(source *GetPortForwardingServiceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case GetPortForwardingServiceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case GetPortForwardingServiceRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case GetPortForwardingServiceRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for GetPortForwardingServiceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*GetPortForwardingServiceRequest))
}

// GetSingle returns value pointed by specific field of from source GetPortForwardingServiceRequest
func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) GetSingle(source *GetPortForwardingServiceRequest) (interface{}, bool) {
	switch fp.selector {
	case GetPortForwardingServiceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case GetPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case GetPortForwardingServiceRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for GetPortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*GetPortForwardingServiceRequest))
}

// GetDefault returns a default value of the field type
func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case GetPortForwardingServiceRequest_FieldPathSelectorName:
		return (*port_forwarding_service.Reference)(nil)
	case GetPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		return (*port_forwarding_service.PortForwardingService_FieldMask)(nil)
	case GetPortForwardingServiceRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for GetPortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) ClearValue(item *GetPortForwardingServiceRequest) {
	if item != nil {
		switch fp.selector {
		case GetPortForwardingServiceRequest_FieldPathSelectorName:
			item.Name = nil
		case GetPortForwardingServiceRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case GetPortForwardingServiceRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for GetPortForwardingServiceRequest: %d", fp.selector))
		}
	}
}

func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*GetPortForwardingServiceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == GetPortForwardingServiceRequest_FieldPathSelectorName ||
		fp.selector == GetPortForwardingServiceRequest_FieldPathSelectorFieldMask ||
		fp.selector == GetPortForwardingServiceRequest_FieldPathSelectorView
}

func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) WithIValue(value interface{}) GetPortForwardingServiceRequest_FieldPathValue {
	switch fp.selector {
	case GetPortForwardingServiceRequest_FieldPathSelectorName:
		return &GetPortForwardingServiceRequest_FieldTerminalPathValue{GetPortForwardingServiceRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.Reference)}
	case GetPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		return &GetPortForwardingServiceRequest_FieldTerminalPathValue{GetPortForwardingServiceRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PortForwardingService_FieldMask)}
	case GetPortForwardingServiceRequest_FieldPathSelectorView:
		return &GetPortForwardingServiceRequest_FieldTerminalPathValue{GetPortForwardingServiceRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) GetPortForwardingServiceRequest_FieldPathArrayOfValues {
	fpaov := &GetPortForwardingServiceRequest_FieldTerminalPathArrayOfValues{GetPortForwardingServiceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case GetPortForwardingServiceRequest_FieldPathSelectorName:
		return &GetPortForwardingServiceRequest_FieldTerminalPathArrayOfValues{GetPortForwardingServiceRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.Reference)}
	case GetPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		return &GetPortForwardingServiceRequest_FieldTerminalPathArrayOfValues{GetPortForwardingServiceRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PortForwardingService_FieldMask)}
	case GetPortForwardingServiceRequest_FieldPathSelectorView:
		return &GetPortForwardingServiceRequest_FieldTerminalPathArrayOfValues{GetPortForwardingServiceRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPortForwardingServiceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) GetPortForwardingServiceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for GetPortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *GetPortForwardingServiceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// GetPortForwardingServiceRequest_FieldPathValue allows storing values for GetPortForwardingServiceRequest fields according to their type
type GetPortForwardingServiceRequest_FieldPathValue interface {
	GetPortForwardingServiceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **GetPortForwardingServiceRequest)
	CompareWith(*GetPortForwardingServiceRequest) (cmp int, comparable bool)
}

func ParseGetPortForwardingServiceRequest_FieldPathValue(pathStr, valueStr string) (GetPortForwardingServiceRequest_FieldPathValue, error) {
	fp, err := ParseGetPortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPortForwardingServiceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(GetPortForwardingServiceRequest_FieldPathValue), nil
}

func MustParseGetPortForwardingServiceRequest_FieldPathValue(pathStr, valueStr string) GetPortForwardingServiceRequest_FieldPathValue {
	fpv, err := ParseGetPortForwardingServiceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type GetPortForwardingServiceRequest_FieldTerminalPathValue struct {
	GetPortForwardingServiceRequest_FieldTerminalPath
	value interface{}
}

var _ GetPortForwardingServiceRequest_FieldPathValue = (*GetPortForwardingServiceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'GetPortForwardingServiceRequest' as interface{}
func (fpv *GetPortForwardingServiceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *GetPortForwardingServiceRequest_FieldTerminalPathValue) AsNameValue() (*port_forwarding_service.Reference, bool) {
	res, ok := fpv.value.(*port_forwarding_service.Reference)
	return res, ok
}
func (fpv *GetPortForwardingServiceRequest_FieldTerminalPathValue) AsFieldMaskValue() (*port_forwarding_service.PortForwardingService_FieldMask, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PortForwardingService_FieldMask)
	return res, ok
}
func (fpv *GetPortForwardingServiceRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object GetPortForwardingServiceRequest
func (fpv *GetPortForwardingServiceRequest_FieldTerminalPathValue) SetTo(target **GetPortForwardingServiceRequest) {
	if *target == nil {
		*target = new(GetPortForwardingServiceRequest)
	}
	switch fpv.selector {
	case GetPortForwardingServiceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*port_forwarding_service.Reference)
	case GetPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*port_forwarding_service.PortForwardingService_FieldMask)
	case GetPortForwardingServiceRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for GetPortForwardingServiceRequest: %d", fpv.selector))
	}
}

func (fpv *GetPortForwardingServiceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*GetPortForwardingServiceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'GetPortForwardingServiceRequest_FieldTerminalPathValue' with the value under path in 'GetPortForwardingServiceRequest'.
func (fpv *GetPortForwardingServiceRequest_FieldTerminalPathValue) CompareWith(source *GetPortForwardingServiceRequest) (int, bool) {
	switch fpv.selector {
	case GetPortForwardingServiceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*port_forwarding_service.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case GetPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		return 0, false
	case GetPortForwardingServiceRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for GetPortForwardingServiceRequest: %d", fpv.selector))
	}
}

func (fpv *GetPortForwardingServiceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*GetPortForwardingServiceRequest))
}

// GetPortForwardingServiceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for GetPortForwardingServiceRequest according to their type
// Present only for array (repeated) types.
type GetPortForwardingServiceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	GetPortForwardingServiceRequest_FieldPath
	ContainsValue(*GetPortForwardingServiceRequest) bool
}

// ParseGetPortForwardingServiceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseGetPortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (GetPortForwardingServiceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseGetPortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPortForwardingServiceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(GetPortForwardingServiceRequest_FieldPathArrayItemValue), nil
}

func MustParseGetPortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) GetPortForwardingServiceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseGetPortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type GetPortForwardingServiceRequest_FieldTerminalPathArrayItemValue struct {
	GetPortForwardingServiceRequest_FieldTerminalPath
	value interface{}
}

var _ GetPortForwardingServiceRequest_FieldPathArrayItemValue = (*GetPortForwardingServiceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object GetPortForwardingServiceRequest as interface{}
func (fpaiv *GetPortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *GetPortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *GetPortForwardingServiceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *GetPortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*GetPortForwardingServiceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'GetPortForwardingServiceRequest'
func (fpaiv *GetPortForwardingServiceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *GetPortForwardingServiceRequest) bool {
	slice := fpaiv.GetPortForwardingServiceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// GetPortForwardingServiceRequest_FieldPathArrayOfValues allows storing slice of values for GetPortForwardingServiceRequest fields according to their type
type GetPortForwardingServiceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	GetPortForwardingServiceRequest_FieldPath
}

func ParseGetPortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (GetPortForwardingServiceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseGetPortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing GetPortForwardingServiceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(GetPortForwardingServiceRequest_FieldPathArrayOfValues), nil
}

func MustParseGetPortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) GetPortForwardingServiceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseGetPortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type GetPortForwardingServiceRequest_FieldTerminalPathArrayOfValues struct {
	GetPortForwardingServiceRequest_FieldTerminalPath
	values interface{}
}

var _ GetPortForwardingServiceRequest_FieldPathArrayOfValues = (*GetPortForwardingServiceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *GetPortForwardingServiceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case GetPortForwardingServiceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*port_forwarding_service.Reference) {
			values = append(values, v)
		}
	case GetPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*port_forwarding_service.PortForwardingService_FieldMask) {
			values = append(values, v)
		}
	case GetPortForwardingServiceRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *GetPortForwardingServiceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*port_forwarding_service.Reference, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.Reference)
	return res, ok
}
func (fpaov *GetPortForwardingServiceRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*port_forwarding_service.PortForwardingService_FieldMask, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PortForwardingService_FieldMask)
	return res, ok
}
func (fpaov *GetPortForwardingServiceRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetPortForwardingServicesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetPortForwardingServicesRequest_FieldPathSelector
	Get(source *BatchGetPortForwardingServicesRequest) []interface{}
	GetSingle(source *BatchGetPortForwardingServicesRequest) (interface{}, bool)
	ClearValue(item *BatchGetPortForwardingServicesRequest)

	// Those methods build corresponding BatchGetPortForwardingServicesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetPortForwardingServicesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetPortForwardingServicesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetPortForwardingServicesRequest_FieldPathArrayItemValue
}

type BatchGetPortForwardingServicesRequest_FieldPathSelector int32

const (
	BatchGetPortForwardingServicesRequest_FieldPathSelectorParent    BatchGetPortForwardingServicesRequest_FieldPathSelector = 0
	BatchGetPortForwardingServicesRequest_FieldPathSelectorNames     BatchGetPortForwardingServicesRequest_FieldPathSelector = 1
	BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask BatchGetPortForwardingServicesRequest_FieldPathSelector = 2
	BatchGetPortForwardingServicesRequest_FieldPathSelectorView      BatchGetPortForwardingServicesRequest_FieldPathSelector = 3
)

func (s BatchGetPortForwardingServicesRequest_FieldPathSelector) String() string {
	switch s {
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorParent:
		return "parent"
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorNames:
		return "names"
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesRequest: %d", s))
	}
}

func BuildBatchGetPortForwardingServicesRequest_FieldPath(fp gotenobject.RawFieldPath) (BatchGetPortForwardingServicesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetPortForwardingServicesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &BatchGetPortForwardingServicesRequest_FieldTerminalPath{selector: BatchGetPortForwardingServicesRequest_FieldPathSelectorParent}, nil
		case "names":
			return &BatchGetPortForwardingServicesRequest_FieldTerminalPath{selector: BatchGetPortForwardingServicesRequest_FieldPathSelectorNames}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &BatchGetPortForwardingServicesRequest_FieldTerminalPath{selector: BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &BatchGetPortForwardingServicesRequest_FieldTerminalPath{selector: BatchGetPortForwardingServicesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetPortForwardingServicesRequest", fp)
}

func ParseBatchGetPortForwardingServicesRequest_FieldPath(rawField string) (BatchGetPortForwardingServicesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetPortForwardingServicesRequest_FieldPath(fp)
}

func MustParseBatchGetPortForwardingServicesRequest_FieldPath(rawField string) BatchGetPortForwardingServicesRequest_FieldPath {
	fp, err := ParseBatchGetPortForwardingServicesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetPortForwardingServicesRequest_FieldTerminalPath struct {
	selector BatchGetPortForwardingServicesRequest_FieldPathSelector
}

var _ BatchGetPortForwardingServicesRequest_FieldPath = (*BatchGetPortForwardingServicesRequest_FieldTerminalPath)(nil)

func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) Selector() BatchGetPortForwardingServicesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetPortForwardingServicesRequest
func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) Get(source *BatchGetPortForwardingServicesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetPortForwardingServicesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case BatchGetPortForwardingServicesRequest_FieldPathSelectorNames:
			for _, value := range source.GetNames() {
				values = append(values, value)
			}
		case BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case BatchGetPortForwardingServicesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetPortForwardingServicesRequest))
}

// GetSingle returns value pointed by specific field of from source BatchGetPortForwardingServicesRequest
func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) GetSingle(source *BatchGetPortForwardingServicesRequest) (interface{}, bool) {
	switch fp.selector {
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorNames:
		res := source.GetNames()
		return res, res != nil
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetPortForwardingServicesRequest))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorParent:
		return (*port_forwarding_service.Reference)(nil)
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorNames:
		return ([]*port_forwarding_service.Reference)(nil)
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return (*port_forwarding_service.PortForwardingService_FieldMask)(nil)
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) ClearValue(item *BatchGetPortForwardingServicesRequest) {
	if item != nil {
		switch fp.selector {
		case BatchGetPortForwardingServicesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case BatchGetPortForwardingServicesRequest_FieldPathSelectorNames:
			item.Names = nil
		case BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case BatchGetPortForwardingServicesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesRequest: %d", fp.selector))
		}
	}
}

func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetPortForwardingServicesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetPortForwardingServicesRequest_FieldPathSelectorParent ||
		fp.selector == BatchGetPortForwardingServicesRequest_FieldPathSelectorNames ||
		fp.selector == BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask ||
		fp.selector == BatchGetPortForwardingServicesRequest_FieldPathSelectorView
}

func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) WithIValue(value interface{}) BatchGetPortForwardingServicesRequest_FieldPathValue {
	switch fp.selector {
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorParent:
		return &BatchGetPortForwardingServicesRequest_FieldTerminalPathValue{BatchGetPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.Reference)}
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorNames:
		return &BatchGetPortForwardingServicesRequest_FieldTerminalPathValue{BatchGetPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.([]*port_forwarding_service.Reference)}
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return &BatchGetPortForwardingServicesRequest_FieldTerminalPathValue{BatchGetPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PortForwardingService_FieldMask)}
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorView:
		return &BatchGetPortForwardingServicesRequest_FieldTerminalPathValue{BatchGetPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetPortForwardingServicesRequest_FieldPathArrayOfValues {
	fpaov := &BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{BatchGetPortForwardingServicesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorParent:
		return &BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{BatchGetPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.Reference)}
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorNames:
		return &BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{BatchGetPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([][]*port_forwarding_service.Reference)}
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return &BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{BatchGetPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PortForwardingService_FieldMask)}
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorView:
		return &BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{BatchGetPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetPortForwardingServicesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorNames:
		return &BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayItemValue{BatchGetPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesRequest: %d", fp.selector))
	}
}

func (fp *BatchGetPortForwardingServicesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// BatchGetPortForwardingServicesRequest_FieldPathValue allows storing values for BatchGetPortForwardingServicesRequest fields according to their type
type BatchGetPortForwardingServicesRequest_FieldPathValue interface {
	BatchGetPortForwardingServicesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetPortForwardingServicesRequest)
	CompareWith(*BatchGetPortForwardingServicesRequest) (cmp int, comparable bool)
}

func ParseBatchGetPortForwardingServicesRequest_FieldPathValue(pathStr, valueStr string) (BatchGetPortForwardingServicesRequest_FieldPathValue, error) {
	fp, err := ParseBatchGetPortForwardingServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPortForwardingServicesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetPortForwardingServicesRequest_FieldPathValue), nil
}

func MustParseBatchGetPortForwardingServicesRequest_FieldPathValue(pathStr, valueStr string) BatchGetPortForwardingServicesRequest_FieldPathValue {
	fpv, err := ParseBatchGetPortForwardingServicesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetPortForwardingServicesRequest_FieldTerminalPathValue struct {
	BatchGetPortForwardingServicesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetPortForwardingServicesRequest_FieldPathValue = (*BatchGetPortForwardingServicesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetPortForwardingServicesRequest' as interface{}
func (fpv *BatchGetPortForwardingServicesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetPortForwardingServicesRequest_FieldTerminalPathValue) AsParentValue() (*port_forwarding_service.Reference, bool) {
	res, ok := fpv.value.(*port_forwarding_service.Reference)
	return res, ok
}
func (fpv *BatchGetPortForwardingServicesRequest_FieldTerminalPathValue) AsNamesValue() ([]*port_forwarding_service.Reference, bool) {
	res, ok := fpv.value.([]*port_forwarding_service.Reference)
	return res, ok
}
func (fpv *BatchGetPortForwardingServicesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*port_forwarding_service.PortForwardingService_FieldMask, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PortForwardingService_FieldMask)
	return res, ok
}
func (fpv *BatchGetPortForwardingServicesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetPortForwardingServicesRequest
func (fpv *BatchGetPortForwardingServicesRequest_FieldTerminalPathValue) SetTo(target **BatchGetPortForwardingServicesRequest) {
	if *target == nil {
		*target = new(BatchGetPortForwardingServicesRequest)
	}
	switch fpv.selector {
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*port_forwarding_service.Reference)
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorNames:
		(*target).Names = fpv.value.([]*port_forwarding_service.Reference)
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*port_forwarding_service.PortForwardingService_FieldMask)
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetPortForwardingServicesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPortForwardingServicesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetPortForwardingServicesRequest_FieldTerminalPathValue' with the value under path in 'BatchGetPortForwardingServicesRequest'.
func (fpv *BatchGetPortForwardingServicesRequest_FieldTerminalPathValue) CompareWith(source *BatchGetPortForwardingServicesRequest) (int, bool) {
	switch fpv.selector {
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*port_forwarding_service.Reference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorNames:
		return 0, false
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesRequest: %d", fpv.selector))
	}
}

func (fpv *BatchGetPortForwardingServicesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetPortForwardingServicesRequest))
}

// BatchGetPortForwardingServicesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetPortForwardingServicesRequest according to their type
// Present only for array (repeated) types.
type BatchGetPortForwardingServicesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetPortForwardingServicesRequest_FieldPath
	ContainsValue(*BatchGetPortForwardingServicesRequest) bool
}

// ParseBatchGetPortForwardingServicesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetPortForwardingServicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetPortForwardingServicesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetPortForwardingServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPortForwardingServicesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetPortForwardingServicesRequest_FieldPathArrayItemValue), nil
}

func MustParseBatchGetPortForwardingServicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetPortForwardingServicesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetPortForwardingServicesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayItemValue struct {
	BatchGetPortForwardingServicesRequest_FieldTerminalPath
	value interface{}
}

var _ BatchGetPortForwardingServicesRequest_FieldPathArrayItemValue = (*BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetPortForwardingServicesRequest as interface{}
func (fpaiv *BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayItemValue) AsNamesItemValue() (*port_forwarding_service.Reference, bool) {
	res, ok := fpaiv.value.(*port_forwarding_service.Reference)
	return res, ok
}

func (fpaiv *BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetPortForwardingServicesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetPortForwardingServicesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPortForwardingServicesRequest'
func (fpaiv *BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetPortForwardingServicesRequest) bool {
	slice := fpaiv.BatchGetPortForwardingServicesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// BatchGetPortForwardingServicesRequest_FieldPathArrayOfValues allows storing slice of values for BatchGetPortForwardingServicesRequest fields according to their type
type BatchGetPortForwardingServicesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetPortForwardingServicesRequest_FieldPath
}

func ParseBatchGetPortForwardingServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetPortForwardingServicesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetPortForwardingServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPortForwardingServicesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetPortForwardingServicesRequest_FieldPathArrayOfValues), nil
}

func MustParseBatchGetPortForwardingServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetPortForwardingServicesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetPortForwardingServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayOfValues struct {
	BatchGetPortForwardingServicesRequest_FieldTerminalPath
	values interface{}
}

var _ BatchGetPortForwardingServicesRequest_FieldPathArrayOfValues = (*BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*port_forwarding_service.Reference) {
			values = append(values, v)
		}
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorNames:
		for _, v := range fpaov.values.([][]*port_forwarding_service.Reference) {
			values = append(values, v)
		}
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*port_forwarding_service.PortForwardingService_FieldMask) {
			values = append(values, v)
		}
	case BatchGetPortForwardingServicesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*port_forwarding_service.Reference, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.Reference)
	return res, ok
}
func (fpaov *BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsNamesArrayOfValues() ([][]*port_forwarding_service.Reference, bool) {
	res, ok := fpaov.values.([][]*port_forwarding_service.Reference)
	return res, ok
}
func (fpaov *BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*port_forwarding_service.PortForwardingService_FieldMask, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PortForwardingService_FieldMask)
	return res, ok
}
func (fpaov *BatchGetPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type BatchGetPortForwardingServicesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() BatchGetPortForwardingServicesResponse_FieldPathSelector
	Get(source *BatchGetPortForwardingServicesResponse) []interface{}
	GetSingle(source *BatchGetPortForwardingServicesResponse) (interface{}, bool)
	ClearValue(item *BatchGetPortForwardingServicesResponse)

	// Those methods build corresponding BatchGetPortForwardingServicesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) BatchGetPortForwardingServicesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) BatchGetPortForwardingServicesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) BatchGetPortForwardingServicesResponse_FieldPathArrayItemValue
}

type BatchGetPortForwardingServicesResponse_FieldPathSelector int32

const (
	BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices BatchGetPortForwardingServicesResponse_FieldPathSelector = 0
	BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing                BatchGetPortForwardingServicesResponse_FieldPathSelector = 1
)

func (s BatchGetPortForwardingServicesResponse_FieldPathSelector) String() string {
	switch s {
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return "port_forwarding_services"
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing:
		return "missing"
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", s))
	}
}

func BuildBatchGetPortForwardingServicesResponse_FieldPath(fp gotenobject.RawFieldPath) (BatchGetPortForwardingServicesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object BatchGetPortForwardingServicesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "port_forwarding_services", "portForwardingServices", "port-forwarding-services":
			return &BatchGetPortForwardingServicesResponse_FieldTerminalPath{selector: BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices}, nil
		case "missing":
			return &BatchGetPortForwardingServicesResponse_FieldTerminalPath{selector: BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing}, nil
		}
	} else {
		switch fp[0] {
		case "port_forwarding_services", "portForwardingServices", "port-forwarding-services":
			if subpath, err := port_forwarding_service.BuildPortForwardingService_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &BatchGetPortForwardingServicesResponse_FieldSubPath{selector: BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object BatchGetPortForwardingServicesResponse", fp)
}

func ParseBatchGetPortForwardingServicesResponse_FieldPath(rawField string) (BatchGetPortForwardingServicesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildBatchGetPortForwardingServicesResponse_FieldPath(fp)
}

func MustParseBatchGetPortForwardingServicesResponse_FieldPath(rawField string) BatchGetPortForwardingServicesResponse_FieldPath {
	fp, err := ParseBatchGetPortForwardingServicesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type BatchGetPortForwardingServicesResponse_FieldTerminalPath struct {
	selector BatchGetPortForwardingServicesResponse_FieldPathSelector
}

var _ BatchGetPortForwardingServicesResponse_FieldPath = (*BatchGetPortForwardingServicesResponse_FieldTerminalPath)(nil)

func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) Selector() BatchGetPortForwardingServicesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source BatchGetPortForwardingServicesResponse
func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) Get(source *BatchGetPortForwardingServicesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
			for _, value := range source.GetPortForwardingServices() {
				values = append(values, value)
			}
		case BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing:
			for _, value := range source.GetMissing() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*BatchGetPortForwardingServicesResponse))
}

// GetSingle returns value pointed by specific field of from source BatchGetPortForwardingServicesResponse
func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) GetSingle(source *BatchGetPortForwardingServicesResponse) (interface{}, bool) {
	switch fp.selector {
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		res := source.GetPortForwardingServices()
		return res, res != nil
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing:
		res := source.GetMissing()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*BatchGetPortForwardingServicesResponse))
}

// GetDefault returns a default value of the field type
func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return ([]*port_forwarding_service.PortForwardingService)(nil)
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing:
		return ([]*port_forwarding_service.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) ClearValue(item *BatchGetPortForwardingServicesResponse) {
	if item != nil {
		switch fp.selector {
		case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
			item.PortForwardingServices = nil
		case BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing:
			item.Missing = nil
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fp.selector))
		}
	}
}

func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*BatchGetPortForwardingServicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing
}

func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) WithIValue(value interface{}) BatchGetPortForwardingServicesResponse_FieldPathValue {
	switch fp.selector {
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return &BatchGetPortForwardingServicesResponse_FieldTerminalPathValue{BatchGetPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.([]*port_forwarding_service.PortForwardingService)}
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing:
		return &BatchGetPortForwardingServicesResponse_FieldTerminalPathValue{BatchGetPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.([]*port_forwarding_service.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) BatchGetPortForwardingServicesResponse_FieldPathArrayOfValues {
	fpaov := &BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{BatchGetPortForwardingServicesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return &BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{BatchGetPortForwardingServicesResponse_FieldTerminalPath: *fp, values: values.([][]*port_forwarding_service.PortForwardingService)}
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing:
		return &BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{BatchGetPortForwardingServicesResponse_FieldTerminalPath: *fp, values: values.([][]*port_forwarding_service.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) BatchGetPortForwardingServicesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return &BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayItemValue{BatchGetPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PortForwardingService)}
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing:
		return &BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayItemValue{BatchGetPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fp.selector))
	}
}

func (fp *BatchGetPortForwardingServicesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type BatchGetPortForwardingServicesResponse_FieldSubPath struct {
	selector BatchGetPortForwardingServicesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ BatchGetPortForwardingServicesResponse_FieldPath = (*BatchGetPortForwardingServicesResponse_FieldSubPath)(nil)

func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) Selector() BatchGetPortForwardingServicesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) AsPortForwardingServicesSubPath() (port_forwarding_service.PortForwardingService_FieldPath, bool) {
	res, ok := fps.subPath.(port_forwarding_service.PortForwardingService_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source BatchGetPortForwardingServicesResponse
func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) Get(source *BatchGetPortForwardingServicesResponse) (values []interface{}) {
	if asPortForwardingServiceFieldPath, ok := fps.AsPortForwardingServicesSubPath(); ok {
		for _, item := range source.GetPortForwardingServices() {
			values = append(values, asPortForwardingServiceFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fps.selector))
	}
	return
}

func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*BatchGetPortForwardingServicesResponse))
}

// GetSingle returns value of selected field from source BatchGetPortForwardingServicesResponse
func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) GetSingle(source *BatchGetPortForwardingServicesResponse) (interface{}, bool) {
	switch fps.selector {
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		if len(source.GetPortForwardingServices()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPortForwardingServices()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fps.selector))
	}
}

func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*BatchGetPortForwardingServicesResponse))
}

// GetDefault returns a default value of the field type
func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) ClearValue(item *BatchGetPortForwardingServicesResponse) {
	if item != nil {
		switch fps.selector {
		case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
			for _, subItem := range item.PortForwardingServices {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fps.selector))
		}
	}
}

func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*BatchGetPortForwardingServicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) WithIValue(value interface{}) BatchGetPortForwardingServicesResponse_FieldPathValue {
	return &BatchGetPortForwardingServicesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) BatchGetPortForwardingServicesResponse_FieldPathArrayOfValues {
	return &BatchGetPortForwardingServicesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) BatchGetPortForwardingServicesResponse_FieldPathArrayItemValue {
	return &BatchGetPortForwardingServicesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *BatchGetPortForwardingServicesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// BatchGetPortForwardingServicesResponse_FieldPathValue allows storing values for BatchGetPortForwardingServicesResponse fields according to their type
type BatchGetPortForwardingServicesResponse_FieldPathValue interface {
	BatchGetPortForwardingServicesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **BatchGetPortForwardingServicesResponse)
	CompareWith(*BatchGetPortForwardingServicesResponse) (cmp int, comparable bool)
}

func ParseBatchGetPortForwardingServicesResponse_FieldPathValue(pathStr, valueStr string) (BatchGetPortForwardingServicesResponse_FieldPathValue, error) {
	fp, err := ParseBatchGetPortForwardingServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPortForwardingServicesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(BatchGetPortForwardingServicesResponse_FieldPathValue), nil
}

func MustParseBatchGetPortForwardingServicesResponse_FieldPathValue(pathStr, valueStr string) BatchGetPortForwardingServicesResponse_FieldPathValue {
	fpv, err := ParseBatchGetPortForwardingServicesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type BatchGetPortForwardingServicesResponse_FieldTerminalPathValue struct {
	BatchGetPortForwardingServicesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetPortForwardingServicesResponse_FieldPathValue = (*BatchGetPortForwardingServicesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'BatchGetPortForwardingServicesResponse' as interface{}
func (fpv *BatchGetPortForwardingServicesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *BatchGetPortForwardingServicesResponse_FieldTerminalPathValue) AsPortForwardingServicesValue() ([]*port_forwarding_service.PortForwardingService, bool) {
	res, ok := fpv.value.([]*port_forwarding_service.PortForwardingService)
	return res, ok
}
func (fpv *BatchGetPortForwardingServicesResponse_FieldTerminalPathValue) AsMissingValue() ([]*port_forwarding_service.Reference, bool) {
	res, ok := fpv.value.([]*port_forwarding_service.Reference)
	return res, ok
}

// SetTo stores value for selected field for object BatchGetPortForwardingServicesResponse
func (fpv *BatchGetPortForwardingServicesResponse_FieldTerminalPathValue) SetTo(target **BatchGetPortForwardingServicesResponse) {
	if *target == nil {
		*target = new(BatchGetPortForwardingServicesResponse)
	}
	switch fpv.selector {
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		(*target).PortForwardingServices = fpv.value.([]*port_forwarding_service.PortForwardingService)
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing:
		(*target).Missing = fpv.value.([]*port_forwarding_service.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetPortForwardingServicesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPortForwardingServicesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'BatchGetPortForwardingServicesResponse_FieldTerminalPathValue' with the value under path in 'BatchGetPortForwardingServicesResponse'.
func (fpv *BatchGetPortForwardingServicesResponse_FieldTerminalPathValue) CompareWith(source *BatchGetPortForwardingServicesResponse) (int, bool) {
	switch fpv.selector {
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return 0, false
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fpv.selector))
	}
}

func (fpv *BatchGetPortForwardingServicesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*BatchGetPortForwardingServicesResponse))
}

type BatchGetPortForwardingServicesResponse_FieldSubPathValue struct {
	BatchGetPortForwardingServicesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ BatchGetPortForwardingServicesResponse_FieldPathValue = (*BatchGetPortForwardingServicesResponse_FieldSubPathValue)(nil)

func (fpvs *BatchGetPortForwardingServicesResponse_FieldSubPathValue) AsPortForwardingServicesPathValue() (port_forwarding_service.PortForwardingService_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(port_forwarding_service.PortForwardingService_FieldPathValue)
	return res, ok
}

func (fpvs *BatchGetPortForwardingServicesResponse_FieldSubPathValue) SetTo(target **BatchGetPortForwardingServicesResponse) {
	if *target == nil {
		*target = new(BatchGetPortForwardingServicesResponse)
	}
	switch fpvs.Selector() {
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetPortForwardingServicesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*BatchGetPortForwardingServicesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *BatchGetPortForwardingServicesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *BatchGetPortForwardingServicesResponse_FieldSubPathValue) CompareWith(source *BatchGetPortForwardingServicesResponse) (int, bool) {
	switch fpvs.Selector() {
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *BatchGetPortForwardingServicesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*BatchGetPortForwardingServicesResponse))
}

// BatchGetPortForwardingServicesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for BatchGetPortForwardingServicesResponse according to their type
// Present only for array (repeated) types.
type BatchGetPortForwardingServicesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	BatchGetPortForwardingServicesResponse_FieldPath
	ContainsValue(*BatchGetPortForwardingServicesResponse) bool
}

// ParseBatchGetPortForwardingServicesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseBatchGetPortForwardingServicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (BatchGetPortForwardingServicesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseBatchGetPortForwardingServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPortForwardingServicesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(BatchGetPortForwardingServicesResponse_FieldPathArrayItemValue), nil
}

func MustParseBatchGetPortForwardingServicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) BatchGetPortForwardingServicesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseBatchGetPortForwardingServicesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayItemValue struct {
	BatchGetPortForwardingServicesResponse_FieldTerminalPath
	value interface{}
}

var _ BatchGetPortForwardingServicesResponse_FieldPathArrayItemValue = (*BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object BatchGetPortForwardingServicesResponse as interface{}
func (fpaiv *BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) AsPortForwardingServicesItemValue() (*port_forwarding_service.PortForwardingService, bool) {
	res, ok := fpaiv.value.(*port_forwarding_service.PortForwardingService)
	return res, ok
}
func (fpaiv *BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) AsMissingItemValue() (*port_forwarding_service.Reference, bool) {
	res, ok := fpaiv.value.(*port_forwarding_service.Reference)
	return res, ok
}

func (fpaiv *BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *BatchGetPortForwardingServicesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*BatchGetPortForwardingServicesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPortForwardingServicesResponse'
func (fpaiv *BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *BatchGetPortForwardingServicesResponse) bool {
	slice := fpaiv.BatchGetPortForwardingServicesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type BatchGetPortForwardingServicesResponse_FieldSubPathArrayItemValue struct {
	BatchGetPortForwardingServicesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *BatchGetPortForwardingServicesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *BatchGetPortForwardingServicesResponse_FieldSubPathArrayItemValue) AsPortForwardingServicesPathItemValue() (port_forwarding_service.PortForwardingService_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(port_forwarding_service.PortForwardingService_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'BatchGetPortForwardingServicesResponse'
func (fpaivs *BatchGetPortForwardingServicesResponse_FieldSubPathArrayItemValue) ContainsValue(source *BatchGetPortForwardingServicesResponse) bool {
	switch fpaivs.Selector() {
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for BatchGetPortForwardingServicesResponse: %d", fpaivs.Selector()))
	}
}

// BatchGetPortForwardingServicesResponse_FieldPathArrayOfValues allows storing slice of values for BatchGetPortForwardingServicesResponse fields according to their type
type BatchGetPortForwardingServicesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	BatchGetPortForwardingServicesResponse_FieldPath
}

func ParseBatchGetPortForwardingServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (BatchGetPortForwardingServicesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseBatchGetPortForwardingServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing BatchGetPortForwardingServicesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(BatchGetPortForwardingServicesResponse_FieldPathArrayOfValues), nil
}

func MustParseBatchGetPortForwardingServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) BatchGetPortForwardingServicesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseBatchGetPortForwardingServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayOfValues struct {
	BatchGetPortForwardingServicesResponse_FieldTerminalPath
	values interface{}
}

var _ BatchGetPortForwardingServicesResponse_FieldPathArrayOfValues = (*BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		for _, v := range fpaov.values.([][]*port_forwarding_service.PortForwardingService) {
			values = append(values, v)
		}
	case BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing:
		for _, v := range fpaov.values.([][]*port_forwarding_service.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) AsPortForwardingServicesArrayOfValues() ([][]*port_forwarding_service.PortForwardingService, bool) {
	res, ok := fpaov.values.([][]*port_forwarding_service.PortForwardingService)
	return res, ok
}
func (fpaov *BatchGetPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) AsMissingArrayOfValues() ([][]*port_forwarding_service.Reference, bool) {
	res, ok := fpaov.values.([][]*port_forwarding_service.Reference)
	return res, ok
}

type BatchGetPortForwardingServicesResponse_FieldSubPathArrayOfValues struct {
	BatchGetPortForwardingServicesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ BatchGetPortForwardingServicesResponse_FieldPathArrayOfValues = (*BatchGetPortForwardingServicesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *BatchGetPortForwardingServicesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *BatchGetPortForwardingServicesResponse_FieldSubPathArrayOfValues) AsPortForwardingServicesPathArrayOfValues() (port_forwarding_service.PortForwardingService_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(port_forwarding_service.PortForwardingService_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPortForwardingServicesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPortForwardingServicesRequest_FieldPathSelector
	Get(source *ListPortForwardingServicesRequest) []interface{}
	GetSingle(source *ListPortForwardingServicesRequest) (interface{}, bool)
	ClearValue(item *ListPortForwardingServicesRequest)

	// Those methods build corresponding ListPortForwardingServicesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPortForwardingServicesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPortForwardingServicesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPortForwardingServicesRequest_FieldPathArrayItemValue
}

type ListPortForwardingServicesRequest_FieldPathSelector int32

const (
	ListPortForwardingServicesRequest_FieldPathSelectorParent    ListPortForwardingServicesRequest_FieldPathSelector = 0
	ListPortForwardingServicesRequest_FieldPathSelectorPageSize  ListPortForwardingServicesRequest_FieldPathSelector = 1
	ListPortForwardingServicesRequest_FieldPathSelectorPageToken ListPortForwardingServicesRequest_FieldPathSelector = 2
	ListPortForwardingServicesRequest_FieldPathSelectorOrderBy   ListPortForwardingServicesRequest_FieldPathSelector = 3
	ListPortForwardingServicesRequest_FieldPathSelectorFilter    ListPortForwardingServicesRequest_FieldPathSelector = 4
	ListPortForwardingServicesRequest_FieldPathSelectorFieldMask ListPortForwardingServicesRequest_FieldPathSelector = 5
	ListPortForwardingServicesRequest_FieldPathSelectorView      ListPortForwardingServicesRequest_FieldPathSelector = 6
)

func (s ListPortForwardingServicesRequest_FieldPathSelector) String() string {
	switch s {
	case ListPortForwardingServicesRequest_FieldPathSelectorParent:
		return "parent"
	case ListPortForwardingServicesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case ListPortForwardingServicesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case ListPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case ListPortForwardingServicesRequest_FieldPathSelectorFilter:
		return "filter"
	case ListPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case ListPortForwardingServicesRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesRequest: %d", s))
	}
}

func BuildListPortForwardingServicesRequest_FieldPath(fp gotenobject.RawFieldPath) (ListPortForwardingServicesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPortForwardingServicesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorOrderBy}, nil
		case "filter":
			return &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPortForwardingServicesRequest", fp)
}

func ParseListPortForwardingServicesRequest_FieldPath(rawField string) (ListPortForwardingServicesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPortForwardingServicesRequest_FieldPath(fp)
}

func MustParseListPortForwardingServicesRequest_FieldPath(rawField string) ListPortForwardingServicesRequest_FieldPath {
	fp, err := ParseListPortForwardingServicesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPortForwardingServicesRequest_FieldTerminalPath struct {
	selector ListPortForwardingServicesRequest_FieldPathSelector
}

var _ ListPortForwardingServicesRequest_FieldPath = (*ListPortForwardingServicesRequest_FieldTerminalPath)(nil)

func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) Selector() ListPortForwardingServicesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPortForwardingServicesRequest
func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) Get(source *ListPortForwardingServicesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPortForwardingServicesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case ListPortForwardingServicesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case ListPortForwardingServicesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case ListPortForwardingServicesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case ListPortForwardingServicesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case ListPortForwardingServicesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case ListPortForwardingServicesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPortForwardingServicesRequest))
}

// GetSingle returns value pointed by specific field of from source ListPortForwardingServicesRequest
func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) GetSingle(source *ListPortForwardingServicesRequest) (interface{}, bool) {
	switch fp.selector {
	case ListPortForwardingServicesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case ListPortForwardingServicesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case ListPortForwardingServicesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case ListPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case ListPortForwardingServicesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case ListPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case ListPortForwardingServicesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesRequest: %d", fp.selector))
	}
}

func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPortForwardingServicesRequest))
}

// GetDefault returns a default value of the field type
func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPortForwardingServicesRequest_FieldPathSelectorParent:
		return (*port_forwarding_service.ParentName)(nil)
	case ListPortForwardingServicesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case ListPortForwardingServicesRequest_FieldPathSelectorPageToken:
		return (*port_forwarding_service.PagerCursor)(nil)
	case ListPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		return (*port_forwarding_service.OrderBy)(nil)
	case ListPortForwardingServicesRequest_FieldPathSelectorFilter:
		return (*port_forwarding_service.Filter)(nil)
	case ListPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return (*port_forwarding_service.PortForwardingService_FieldMask)(nil)
	case ListPortForwardingServicesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesRequest: %d", fp.selector))
	}
}

func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) ClearValue(item *ListPortForwardingServicesRequest) {
	if item != nil {
		switch fp.selector {
		case ListPortForwardingServicesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case ListPortForwardingServicesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case ListPortForwardingServicesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case ListPortForwardingServicesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case ListPortForwardingServicesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case ListPortForwardingServicesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case ListPortForwardingServicesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesRequest: %d", fp.selector))
		}
	}
}

func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPortForwardingServicesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPortForwardingServicesRequest_FieldPathSelectorParent ||
		fp.selector == ListPortForwardingServicesRequest_FieldPathSelectorPageSize ||
		fp.selector == ListPortForwardingServicesRequest_FieldPathSelectorPageToken ||
		fp.selector == ListPortForwardingServicesRequest_FieldPathSelectorOrderBy ||
		fp.selector == ListPortForwardingServicesRequest_FieldPathSelectorFilter ||
		fp.selector == ListPortForwardingServicesRequest_FieldPathSelectorFieldMask ||
		fp.selector == ListPortForwardingServicesRequest_FieldPathSelectorView
}

func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) WithIValue(value interface{}) ListPortForwardingServicesRequest_FieldPathValue {
	switch fp.selector {
	case ListPortForwardingServicesRequest_FieldPathSelectorParent:
		return &ListPortForwardingServicesRequest_FieldTerminalPathValue{ListPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.ParentName)}
	case ListPortForwardingServicesRequest_FieldPathSelectorPageSize:
		return &ListPortForwardingServicesRequest_FieldTerminalPathValue{ListPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case ListPortForwardingServicesRequest_FieldPathSelectorPageToken:
		return &ListPortForwardingServicesRequest_FieldTerminalPathValue{ListPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PagerCursor)}
	case ListPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		return &ListPortForwardingServicesRequest_FieldTerminalPathValue{ListPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.OrderBy)}
	case ListPortForwardingServicesRequest_FieldPathSelectorFilter:
		return &ListPortForwardingServicesRequest_FieldTerminalPathValue{ListPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.Filter)}
	case ListPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return &ListPortForwardingServicesRequest_FieldTerminalPathValue{ListPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PortForwardingService_FieldMask)}
	case ListPortForwardingServicesRequest_FieldPathSelectorView:
		return &ListPortForwardingServicesRequest_FieldTerminalPathValue{ListPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesRequest: %d", fp.selector))
	}
}

func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPortForwardingServicesRequest_FieldPathArrayOfValues {
	fpaov := &ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{ListPortForwardingServicesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPortForwardingServicesRequest_FieldPathSelectorParent:
		return &ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{ListPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.ParentName)}
	case ListPortForwardingServicesRequest_FieldPathSelectorPageSize:
		return &ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{ListPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case ListPortForwardingServicesRequest_FieldPathSelectorPageToken:
		return &ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{ListPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PagerCursor)}
	case ListPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		return &ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{ListPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.OrderBy)}
	case ListPortForwardingServicesRequest_FieldPathSelectorFilter:
		return &ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{ListPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.Filter)}
	case ListPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return &ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{ListPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PortForwardingService_FieldMask)}
	case ListPortForwardingServicesRequest_FieldPathSelectorView:
		return &ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{ListPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPortForwardingServicesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesRequest: %d", fp.selector))
	}
}

func (fp *ListPortForwardingServicesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// ListPortForwardingServicesRequest_FieldPathValue allows storing values for ListPortForwardingServicesRequest fields according to their type
type ListPortForwardingServicesRequest_FieldPathValue interface {
	ListPortForwardingServicesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPortForwardingServicesRequest)
	CompareWith(*ListPortForwardingServicesRequest) (cmp int, comparable bool)
}

func ParseListPortForwardingServicesRequest_FieldPathValue(pathStr, valueStr string) (ListPortForwardingServicesRequest_FieldPathValue, error) {
	fp, err := ParseListPortForwardingServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPortForwardingServicesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPortForwardingServicesRequest_FieldPathValue), nil
}

func MustParseListPortForwardingServicesRequest_FieldPathValue(pathStr, valueStr string) ListPortForwardingServicesRequest_FieldPathValue {
	fpv, err := ParseListPortForwardingServicesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPortForwardingServicesRequest_FieldTerminalPathValue struct {
	ListPortForwardingServicesRequest_FieldTerminalPath
	value interface{}
}

var _ ListPortForwardingServicesRequest_FieldPathValue = (*ListPortForwardingServicesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPortForwardingServicesRequest' as interface{}
func (fpv *ListPortForwardingServicesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPortForwardingServicesRequest_FieldTerminalPathValue) AsParentValue() (*port_forwarding_service.ParentName, bool) {
	res, ok := fpv.value.(*port_forwarding_service.ParentName)
	return res, ok
}
func (fpv *ListPortForwardingServicesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *ListPortForwardingServicesRequest_FieldTerminalPathValue) AsPageTokenValue() (*port_forwarding_service.PagerCursor, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PagerCursor)
	return res, ok
}
func (fpv *ListPortForwardingServicesRequest_FieldTerminalPathValue) AsOrderByValue() (*port_forwarding_service.OrderBy, bool) {
	res, ok := fpv.value.(*port_forwarding_service.OrderBy)
	return res, ok
}
func (fpv *ListPortForwardingServicesRequest_FieldTerminalPathValue) AsFilterValue() (*port_forwarding_service.Filter, bool) {
	res, ok := fpv.value.(*port_forwarding_service.Filter)
	return res, ok
}
func (fpv *ListPortForwardingServicesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*port_forwarding_service.PortForwardingService_FieldMask, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PortForwardingService_FieldMask)
	return res, ok
}
func (fpv *ListPortForwardingServicesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object ListPortForwardingServicesRequest
func (fpv *ListPortForwardingServicesRequest_FieldTerminalPathValue) SetTo(target **ListPortForwardingServicesRequest) {
	if *target == nil {
		*target = new(ListPortForwardingServicesRequest)
	}
	switch fpv.selector {
	case ListPortForwardingServicesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*port_forwarding_service.ParentName)
	case ListPortForwardingServicesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case ListPortForwardingServicesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*port_forwarding_service.PagerCursor)
	case ListPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*port_forwarding_service.OrderBy)
	case ListPortForwardingServicesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*port_forwarding_service.Filter)
	case ListPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*port_forwarding_service.PortForwardingService_FieldMask)
	case ListPortForwardingServicesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesRequest: %d", fpv.selector))
	}
}

func (fpv *ListPortForwardingServicesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPortForwardingServicesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPortForwardingServicesRequest_FieldTerminalPathValue' with the value under path in 'ListPortForwardingServicesRequest'.
func (fpv *ListPortForwardingServicesRequest_FieldTerminalPathValue) CompareWith(source *ListPortForwardingServicesRequest) (int, bool) {
	switch fpv.selector {
	case ListPortForwardingServicesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*port_forwarding_service.ParentName)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case ListPortForwardingServicesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case ListPortForwardingServicesRequest_FieldPathSelectorPageToken:
		return 0, false
	case ListPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case ListPortForwardingServicesRequest_FieldPathSelectorFilter:
		return 0, false
	case ListPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case ListPortForwardingServicesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesRequest: %d", fpv.selector))
	}
}

func (fpv *ListPortForwardingServicesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPortForwardingServicesRequest))
}

// ListPortForwardingServicesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPortForwardingServicesRequest according to their type
// Present only for array (repeated) types.
type ListPortForwardingServicesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPortForwardingServicesRequest_FieldPath
	ContainsValue(*ListPortForwardingServicesRequest) bool
}

// ParseListPortForwardingServicesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPortForwardingServicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (ListPortForwardingServicesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseListPortForwardingServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPortForwardingServicesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPortForwardingServicesRequest_FieldPathArrayItemValue), nil
}

func MustParseListPortForwardingServicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) ListPortForwardingServicesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseListPortForwardingServicesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPortForwardingServicesRequest_FieldTerminalPathArrayItemValue struct {
	ListPortForwardingServicesRequest_FieldTerminalPath
	value interface{}
}

var _ ListPortForwardingServicesRequest_FieldPathArrayItemValue = (*ListPortForwardingServicesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPortForwardingServicesRequest as interface{}
func (fpaiv *ListPortForwardingServicesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *ListPortForwardingServicesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *ListPortForwardingServicesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPortForwardingServicesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPortForwardingServicesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPortForwardingServicesRequest'
func (fpaiv *ListPortForwardingServicesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPortForwardingServicesRequest) bool {
	slice := fpaiv.ListPortForwardingServicesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// ListPortForwardingServicesRequest_FieldPathArrayOfValues allows storing slice of values for ListPortForwardingServicesRequest fields according to their type
type ListPortForwardingServicesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPortForwardingServicesRequest_FieldPath
}

func ParseListPortForwardingServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPortForwardingServicesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseListPortForwardingServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPortForwardingServicesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPortForwardingServicesRequest_FieldPathArrayOfValues), nil
}

func MustParseListPortForwardingServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) ListPortForwardingServicesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseListPortForwardingServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues struct {
	ListPortForwardingServicesRequest_FieldTerminalPath
	values interface{}
}

var _ ListPortForwardingServicesRequest_FieldPathArrayOfValues = (*ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPortForwardingServicesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*port_forwarding_service.ParentName) {
			values = append(values, v)
		}
	case ListPortForwardingServicesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case ListPortForwardingServicesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*port_forwarding_service.PagerCursor) {
			values = append(values, v)
		}
	case ListPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*port_forwarding_service.OrderBy) {
			values = append(values, v)
		}
	case ListPortForwardingServicesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*port_forwarding_service.Filter) {
			values = append(values, v)
		}
	case ListPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*port_forwarding_service.PortForwardingService_FieldMask) {
			values = append(values, v)
		}
	case ListPortForwardingServicesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*port_forwarding_service.ParentName, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.ParentName)
	return res, ok
}
func (fpaov *ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*port_forwarding_service.PagerCursor, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PagerCursor)
	return res, ok
}
func (fpaov *ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*port_forwarding_service.OrderBy, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.OrderBy)
	return res, ok
}
func (fpaov *ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*port_forwarding_service.Filter, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.Filter)
	return res, ok
}
func (fpaov *ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*port_forwarding_service.PortForwardingService_FieldMask, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PortForwardingService_FieldMask)
	return res, ok
}
func (fpaov *ListPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type ListPortForwardingServicesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() ListPortForwardingServicesResponse_FieldPathSelector
	Get(source *ListPortForwardingServicesResponse) []interface{}
	GetSingle(source *ListPortForwardingServicesResponse) (interface{}, bool)
	ClearValue(item *ListPortForwardingServicesResponse)

	// Those methods build corresponding ListPortForwardingServicesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) ListPortForwardingServicesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) ListPortForwardingServicesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) ListPortForwardingServicesResponse_FieldPathArrayItemValue
}

type ListPortForwardingServicesResponse_FieldPathSelector int32

const (
	ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices ListPortForwardingServicesResponse_FieldPathSelector = 0
	ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken          ListPortForwardingServicesResponse_FieldPathSelector = 1
	ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken          ListPortForwardingServicesResponse_FieldPathSelector = 2
)

func (s ListPortForwardingServicesResponse_FieldPathSelector) String() string {
	switch s {
	case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return "port_forwarding_services"
	case ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", s))
	}
}

func BuildListPortForwardingServicesResponse_FieldPath(fp gotenobject.RawFieldPath) (ListPortForwardingServicesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object ListPortForwardingServicesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "port_forwarding_services", "portForwardingServices", "port-forwarding-services":
			return &ListPortForwardingServicesResponse_FieldTerminalPath{selector: ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices}, nil
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &ListPortForwardingServicesResponse_FieldTerminalPath{selector: ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &ListPortForwardingServicesResponse_FieldTerminalPath{selector: ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken}, nil
		}
	} else {
		switch fp[0] {
		case "port_forwarding_services", "portForwardingServices", "port-forwarding-services":
			if subpath, err := port_forwarding_service.BuildPortForwardingService_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &ListPortForwardingServicesResponse_FieldSubPath{selector: ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object ListPortForwardingServicesResponse", fp)
}

func ParseListPortForwardingServicesResponse_FieldPath(rawField string) (ListPortForwardingServicesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildListPortForwardingServicesResponse_FieldPath(fp)
}

func MustParseListPortForwardingServicesResponse_FieldPath(rawField string) ListPortForwardingServicesResponse_FieldPath {
	fp, err := ParseListPortForwardingServicesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type ListPortForwardingServicesResponse_FieldTerminalPath struct {
	selector ListPortForwardingServicesResponse_FieldPathSelector
}

var _ ListPortForwardingServicesResponse_FieldPath = (*ListPortForwardingServicesResponse_FieldTerminalPath)(nil)

func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) Selector() ListPortForwardingServicesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source ListPortForwardingServicesResponse
func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) Get(source *ListPortForwardingServicesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
			for _, value := range source.GetPortForwardingServices() {
				values = append(values, value)
			}
		case ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*ListPortForwardingServicesResponse))
}

// GetSingle returns value pointed by specific field of from source ListPortForwardingServicesResponse
func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) GetSingle(source *ListPortForwardingServicesResponse) (interface{}, bool) {
	switch fp.selector {
	case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		res := source.GetPortForwardingServices()
		return res, res != nil
	case ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fp.selector))
	}
}

func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*ListPortForwardingServicesResponse))
}

// GetDefault returns a default value of the field type
func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return ([]*port_forwarding_service.PortForwardingService)(nil)
	case ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken:
		return (*port_forwarding_service.PagerCursor)(nil)
	case ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken:
		return (*port_forwarding_service.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fp.selector))
	}
}

func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) ClearValue(item *ListPortForwardingServicesResponse) {
	if item != nil {
		switch fp.selector {
		case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
			item.PortForwardingServices = nil
		case ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fp.selector))
		}
	}
}

func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*ListPortForwardingServicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken ||
		fp.selector == ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken
}

func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) WithIValue(value interface{}) ListPortForwardingServicesResponse_FieldPathValue {
	switch fp.selector {
	case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return &ListPortForwardingServicesResponse_FieldTerminalPathValue{ListPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.([]*port_forwarding_service.PortForwardingService)}
	case ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken:
		return &ListPortForwardingServicesResponse_FieldTerminalPathValue{ListPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PagerCursor)}
	case ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken:
		return &ListPortForwardingServicesResponse_FieldTerminalPathValue{ListPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fp.selector))
	}
}

func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) ListPortForwardingServicesResponse_FieldPathArrayOfValues {
	fpaov := &ListPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{ListPortForwardingServicesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return &ListPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{ListPortForwardingServicesResponse_FieldTerminalPath: *fp, values: values.([][]*port_forwarding_service.PortForwardingService)}
	case ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken:
		return &ListPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{ListPortForwardingServicesResponse_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PagerCursor)}
	case ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken:
		return &ListPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{ListPortForwardingServicesResponse_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) ListPortForwardingServicesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return &ListPortForwardingServicesResponse_FieldTerminalPathArrayItemValue{ListPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PortForwardingService)}
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fp.selector))
	}
}

func (fp *ListPortForwardingServicesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type ListPortForwardingServicesResponse_FieldSubPath struct {
	selector ListPortForwardingServicesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ ListPortForwardingServicesResponse_FieldPath = (*ListPortForwardingServicesResponse_FieldSubPath)(nil)

func (fps *ListPortForwardingServicesResponse_FieldSubPath) Selector() ListPortForwardingServicesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *ListPortForwardingServicesResponse_FieldSubPath) AsPortForwardingServicesSubPath() (port_forwarding_service.PortForwardingService_FieldPath, bool) {
	res, ok := fps.subPath.(port_forwarding_service.PortForwardingService_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *ListPortForwardingServicesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *ListPortForwardingServicesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source ListPortForwardingServicesResponse
func (fps *ListPortForwardingServicesResponse_FieldSubPath) Get(source *ListPortForwardingServicesResponse) (values []interface{}) {
	if asPortForwardingServiceFieldPath, ok := fps.AsPortForwardingServicesSubPath(); ok {
		for _, item := range source.GetPortForwardingServices() {
			values = append(values, asPortForwardingServiceFieldPath.Get(item)...)
		}
	} else {
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fps.selector))
	}
	return
}

func (fps *ListPortForwardingServicesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*ListPortForwardingServicesResponse))
}

// GetSingle returns value of selected field from source ListPortForwardingServicesResponse
func (fps *ListPortForwardingServicesResponse_FieldSubPath) GetSingle(source *ListPortForwardingServicesResponse) (interface{}, bool) {
	switch fps.selector {
	case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		if len(source.GetPortForwardingServices()) == 0 {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPortForwardingServices()[0])
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fps.selector))
	}
}

func (fps *ListPortForwardingServicesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*ListPortForwardingServicesResponse))
}

// GetDefault returns a default value of the field type
func (fps *ListPortForwardingServicesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *ListPortForwardingServicesResponse_FieldSubPath) ClearValue(item *ListPortForwardingServicesResponse) {
	if item != nil {
		switch fps.selector {
		case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
			for _, subItem := range item.PortForwardingServices {
				fps.subPath.ClearValueRaw(subItem)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fps.selector))
		}
	}
}

func (fps *ListPortForwardingServicesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*ListPortForwardingServicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *ListPortForwardingServicesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *ListPortForwardingServicesResponse_FieldSubPath) WithIValue(value interface{}) ListPortForwardingServicesResponse_FieldPathValue {
	return &ListPortForwardingServicesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *ListPortForwardingServicesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *ListPortForwardingServicesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) ListPortForwardingServicesResponse_FieldPathArrayOfValues {
	return &ListPortForwardingServicesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *ListPortForwardingServicesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *ListPortForwardingServicesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) ListPortForwardingServicesResponse_FieldPathArrayItemValue {
	return &ListPortForwardingServicesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *ListPortForwardingServicesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// ListPortForwardingServicesResponse_FieldPathValue allows storing values for ListPortForwardingServicesResponse fields according to their type
type ListPortForwardingServicesResponse_FieldPathValue interface {
	ListPortForwardingServicesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **ListPortForwardingServicesResponse)
	CompareWith(*ListPortForwardingServicesResponse) (cmp int, comparable bool)
}

func ParseListPortForwardingServicesResponse_FieldPathValue(pathStr, valueStr string) (ListPortForwardingServicesResponse_FieldPathValue, error) {
	fp, err := ParseListPortForwardingServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPortForwardingServicesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(ListPortForwardingServicesResponse_FieldPathValue), nil
}

func MustParseListPortForwardingServicesResponse_FieldPathValue(pathStr, valueStr string) ListPortForwardingServicesResponse_FieldPathValue {
	fpv, err := ParseListPortForwardingServicesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type ListPortForwardingServicesResponse_FieldTerminalPathValue struct {
	ListPortForwardingServicesResponse_FieldTerminalPath
	value interface{}
}

var _ ListPortForwardingServicesResponse_FieldPathValue = (*ListPortForwardingServicesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'ListPortForwardingServicesResponse' as interface{}
func (fpv *ListPortForwardingServicesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *ListPortForwardingServicesResponse_FieldTerminalPathValue) AsPortForwardingServicesValue() ([]*port_forwarding_service.PortForwardingService, bool) {
	res, ok := fpv.value.([]*port_forwarding_service.PortForwardingService)
	return res, ok
}
func (fpv *ListPortForwardingServicesResponse_FieldTerminalPathValue) AsPrevPageTokenValue() (*port_forwarding_service.PagerCursor, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PagerCursor)
	return res, ok
}
func (fpv *ListPortForwardingServicesResponse_FieldTerminalPathValue) AsNextPageTokenValue() (*port_forwarding_service.PagerCursor, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object ListPortForwardingServicesResponse
func (fpv *ListPortForwardingServicesResponse_FieldTerminalPathValue) SetTo(target **ListPortForwardingServicesResponse) {
	if *target == nil {
		*target = new(ListPortForwardingServicesResponse)
	}
	switch fpv.selector {
	case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		(*target).PortForwardingServices = fpv.value.([]*port_forwarding_service.PortForwardingService)
	case ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*port_forwarding_service.PagerCursor)
	case ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*port_forwarding_service.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fpv.selector))
	}
}

func (fpv *ListPortForwardingServicesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPortForwardingServicesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'ListPortForwardingServicesResponse_FieldTerminalPathValue' with the value under path in 'ListPortForwardingServicesResponse'.
func (fpv *ListPortForwardingServicesResponse_FieldTerminalPathValue) CompareWith(source *ListPortForwardingServicesResponse) (int, bool) {
	switch fpv.selector {
	case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return 0, false
	case ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken:
		return 0, false
	case ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fpv.selector))
	}
}

func (fpv *ListPortForwardingServicesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*ListPortForwardingServicesResponse))
}

type ListPortForwardingServicesResponse_FieldSubPathValue struct {
	ListPortForwardingServicesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ ListPortForwardingServicesResponse_FieldPathValue = (*ListPortForwardingServicesResponse_FieldSubPathValue)(nil)

func (fpvs *ListPortForwardingServicesResponse_FieldSubPathValue) AsPortForwardingServicesPathValue() (port_forwarding_service.PortForwardingService_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(port_forwarding_service.PortForwardingService_FieldPathValue)
	return res, ok
}

func (fpvs *ListPortForwardingServicesResponse_FieldSubPathValue) SetTo(target **ListPortForwardingServicesResponse) {
	if *target == nil {
		*target = new(ListPortForwardingServicesResponse)
	}
	switch fpvs.Selector() {
	case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		panic("FieldPath setter is unsupported for array subpaths")
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPortForwardingServicesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*ListPortForwardingServicesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *ListPortForwardingServicesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *ListPortForwardingServicesResponse_FieldSubPathValue) CompareWith(source *ListPortForwardingServicesResponse) (int, bool) {
	switch fpvs.Selector() {
	case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return 0, false // repeated field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *ListPortForwardingServicesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*ListPortForwardingServicesResponse))
}

// ListPortForwardingServicesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for ListPortForwardingServicesResponse according to their type
// Present only for array (repeated) types.
type ListPortForwardingServicesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	ListPortForwardingServicesResponse_FieldPath
	ContainsValue(*ListPortForwardingServicesResponse) bool
}

// ParseListPortForwardingServicesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseListPortForwardingServicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (ListPortForwardingServicesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseListPortForwardingServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPortForwardingServicesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(ListPortForwardingServicesResponse_FieldPathArrayItemValue), nil
}

func MustParseListPortForwardingServicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) ListPortForwardingServicesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseListPortForwardingServicesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type ListPortForwardingServicesResponse_FieldTerminalPathArrayItemValue struct {
	ListPortForwardingServicesResponse_FieldTerminalPath
	value interface{}
}

var _ ListPortForwardingServicesResponse_FieldPathArrayItemValue = (*ListPortForwardingServicesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object ListPortForwardingServicesResponse as interface{}
func (fpaiv *ListPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *ListPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) AsPortForwardingServicesItemValue() (*port_forwarding_service.PortForwardingService, bool) {
	res, ok := fpaiv.value.(*port_forwarding_service.PortForwardingService)
	return res, ok
}

func (fpaiv *ListPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *ListPortForwardingServicesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *ListPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*ListPortForwardingServicesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPortForwardingServicesResponse'
func (fpaiv *ListPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *ListPortForwardingServicesResponse) bool {
	slice := fpaiv.ListPortForwardingServicesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type ListPortForwardingServicesResponse_FieldSubPathArrayItemValue struct {
	ListPortForwardingServicesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *ListPortForwardingServicesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *ListPortForwardingServicesResponse_FieldSubPathArrayItemValue) AsPortForwardingServicesPathItemValue() (port_forwarding_service.PortForwardingService_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(port_forwarding_service.PortForwardingService_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'ListPortForwardingServicesResponse'
func (fpaivs *ListPortForwardingServicesResponse_FieldSubPathArrayItemValue) ContainsValue(source *ListPortForwardingServicesResponse) bool {
	switch fpaivs.Selector() {
	case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		return false // repeated/map field
	default:
		panic(fmt.Sprintf("Invalid selector for ListPortForwardingServicesResponse: %d", fpaivs.Selector()))
	}
}

// ListPortForwardingServicesResponse_FieldPathArrayOfValues allows storing slice of values for ListPortForwardingServicesResponse fields according to their type
type ListPortForwardingServicesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	ListPortForwardingServicesResponse_FieldPath
}

func ParseListPortForwardingServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (ListPortForwardingServicesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseListPortForwardingServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing ListPortForwardingServicesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(ListPortForwardingServicesResponse_FieldPathArrayOfValues), nil
}

func MustParseListPortForwardingServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) ListPortForwardingServicesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseListPortForwardingServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type ListPortForwardingServicesResponse_FieldTerminalPathArrayOfValues struct {
	ListPortForwardingServicesResponse_FieldTerminalPath
	values interface{}
}

var _ ListPortForwardingServicesResponse_FieldPathArrayOfValues = (*ListPortForwardingServicesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *ListPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices:
		for _, v := range fpaov.values.([][]*port_forwarding_service.PortForwardingService) {
			values = append(values, v)
		}
	case ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*port_forwarding_service.PagerCursor) {
			values = append(values, v)
		}
	case ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*port_forwarding_service.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *ListPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) AsPortForwardingServicesArrayOfValues() ([][]*port_forwarding_service.PortForwardingService, bool) {
	res, ok := fpaov.values.([][]*port_forwarding_service.PortForwardingService)
	return res, ok
}
func (fpaov *ListPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*port_forwarding_service.PagerCursor, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PagerCursor)
	return res, ok
}
func (fpaov *ListPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*port_forwarding_service.PagerCursor, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PagerCursor)
	return res, ok
}

type ListPortForwardingServicesResponse_FieldSubPathArrayOfValues struct {
	ListPortForwardingServicesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ ListPortForwardingServicesResponse_FieldPathArrayOfValues = (*ListPortForwardingServicesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *ListPortForwardingServicesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *ListPortForwardingServicesResponse_FieldSubPathArrayOfValues) AsPortForwardingServicesPathArrayOfValues() (port_forwarding_service.PortForwardingService_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(port_forwarding_service.PortForwardingService_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPortForwardingServiceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPortForwardingServiceRequest_FieldPathSelector
	Get(source *WatchPortForwardingServiceRequest) []interface{}
	GetSingle(source *WatchPortForwardingServiceRequest) (interface{}, bool)
	ClearValue(item *WatchPortForwardingServiceRequest)

	// Those methods build corresponding WatchPortForwardingServiceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPortForwardingServiceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPortForwardingServiceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPortForwardingServiceRequest_FieldPathArrayItemValue
}

type WatchPortForwardingServiceRequest_FieldPathSelector int32

const (
	WatchPortForwardingServiceRequest_FieldPathSelectorName      WatchPortForwardingServiceRequest_FieldPathSelector = 0
	WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask WatchPortForwardingServiceRequest_FieldPathSelector = 1
	WatchPortForwardingServiceRequest_FieldPathSelectorView      WatchPortForwardingServiceRequest_FieldPathSelector = 2
)

func (s WatchPortForwardingServiceRequest_FieldPathSelector) String() string {
	switch s {
	case WatchPortForwardingServiceRequest_FieldPathSelectorName:
		return "name"
	case WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchPortForwardingServiceRequest_FieldPathSelectorView:
		return "view"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceRequest: %d", s))
	}
}

func BuildWatchPortForwardingServiceRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchPortForwardingServiceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPortForwardingServiceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &WatchPortForwardingServiceRequest_FieldTerminalPath{selector: WatchPortForwardingServiceRequest_FieldPathSelectorName}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchPortForwardingServiceRequest_FieldTerminalPath{selector: WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchPortForwardingServiceRequest_FieldTerminalPath{selector: WatchPortForwardingServiceRequest_FieldPathSelectorView}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPortForwardingServiceRequest", fp)
}

func ParseWatchPortForwardingServiceRequest_FieldPath(rawField string) (WatchPortForwardingServiceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPortForwardingServiceRequest_FieldPath(fp)
}

func MustParseWatchPortForwardingServiceRequest_FieldPath(rawField string) WatchPortForwardingServiceRequest_FieldPath {
	fp, err := ParseWatchPortForwardingServiceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPortForwardingServiceRequest_FieldTerminalPath struct {
	selector WatchPortForwardingServiceRequest_FieldPathSelector
}

var _ WatchPortForwardingServiceRequest_FieldPath = (*WatchPortForwardingServiceRequest_FieldTerminalPath)(nil)

func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) Selector() WatchPortForwardingServiceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPortForwardingServiceRequest
func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) Get(source *WatchPortForwardingServiceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPortForwardingServiceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchPortForwardingServiceRequest_FieldPathSelectorView:
			values = append(values, source.View)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPortForwardingServiceRequest))
}

// GetSingle returns value pointed by specific field of from source WatchPortForwardingServiceRequest
func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) GetSingle(source *WatchPortForwardingServiceRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchPortForwardingServiceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchPortForwardingServiceRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPortForwardingServiceRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPortForwardingServiceRequest_FieldPathSelectorName:
		return (*port_forwarding_service.Reference)(nil)
	case WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		return (*port_forwarding_service.PortForwardingService_FieldMask)(nil)
	case WatchPortForwardingServiceRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) ClearValue(item *WatchPortForwardingServiceRequest) {
	if item != nil {
		switch fp.selector {
		case WatchPortForwardingServiceRequest_FieldPathSelectorName:
			item.Name = nil
		case WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchPortForwardingServiceRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPortForwardingServiceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPortForwardingServiceRequest_FieldPathSelectorName ||
		fp.selector == WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchPortForwardingServiceRequest_FieldPathSelectorView
}

func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) WithIValue(value interface{}) WatchPortForwardingServiceRequest_FieldPathValue {
	switch fp.selector {
	case WatchPortForwardingServiceRequest_FieldPathSelectorName:
		return &WatchPortForwardingServiceRequest_FieldTerminalPathValue{WatchPortForwardingServiceRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.Reference)}
	case WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		return &WatchPortForwardingServiceRequest_FieldTerminalPathValue{WatchPortForwardingServiceRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PortForwardingService_FieldMask)}
	case WatchPortForwardingServiceRequest_FieldPathSelectorView:
		return &WatchPortForwardingServiceRequest_FieldTerminalPathValue{WatchPortForwardingServiceRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPortForwardingServiceRequest_FieldPathArrayOfValues {
	fpaov := &WatchPortForwardingServiceRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServiceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPortForwardingServiceRequest_FieldPathSelectorName:
		return &WatchPortForwardingServiceRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServiceRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.Reference)}
	case WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		return &WatchPortForwardingServiceRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServiceRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PortForwardingService_FieldMask)}
	case WatchPortForwardingServiceRequest_FieldPathSelectorView:
		return &WatchPortForwardingServiceRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServiceRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPortForwardingServiceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServiceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPortForwardingServiceRequest_FieldPathValue allows storing values for WatchPortForwardingServiceRequest fields according to their type
type WatchPortForwardingServiceRequest_FieldPathValue interface {
	WatchPortForwardingServiceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPortForwardingServiceRequest)
	CompareWith(*WatchPortForwardingServiceRequest) (cmp int, comparable bool)
}

func ParseWatchPortForwardingServiceRequest_FieldPathValue(pathStr, valueStr string) (WatchPortForwardingServiceRequest_FieldPathValue, error) {
	fp, err := ParseWatchPortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPortForwardingServiceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPortForwardingServiceRequest_FieldPathValue), nil
}

func MustParseWatchPortForwardingServiceRequest_FieldPathValue(pathStr, valueStr string) WatchPortForwardingServiceRequest_FieldPathValue {
	fpv, err := ParseWatchPortForwardingServiceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPortForwardingServiceRequest_FieldTerminalPathValue struct {
	WatchPortForwardingServiceRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPortForwardingServiceRequest_FieldPathValue = (*WatchPortForwardingServiceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPortForwardingServiceRequest' as interface{}
func (fpv *WatchPortForwardingServiceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPortForwardingServiceRequest_FieldTerminalPathValue) AsNameValue() (*port_forwarding_service.Reference, bool) {
	res, ok := fpv.value.(*port_forwarding_service.Reference)
	return res, ok
}
func (fpv *WatchPortForwardingServiceRequest_FieldTerminalPathValue) AsFieldMaskValue() (*port_forwarding_service.PortForwardingService_FieldMask, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PortForwardingService_FieldMask)
	return res, ok
}
func (fpv *WatchPortForwardingServiceRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}

// SetTo stores value for selected field for object WatchPortForwardingServiceRequest
func (fpv *WatchPortForwardingServiceRequest_FieldTerminalPathValue) SetTo(target **WatchPortForwardingServiceRequest) {
	if *target == nil {
		*target = new(WatchPortForwardingServiceRequest)
	}
	switch fpv.selector {
	case WatchPortForwardingServiceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*port_forwarding_service.Reference)
	case WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*port_forwarding_service.PortForwardingService_FieldMask)
	case WatchPortForwardingServiceRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPortForwardingServiceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPortForwardingServiceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPortForwardingServiceRequest_FieldTerminalPathValue' with the value under path in 'WatchPortForwardingServiceRequest'.
func (fpv *WatchPortForwardingServiceRequest_FieldTerminalPathValue) CompareWith(source *WatchPortForwardingServiceRequest) (int, bool) {
	switch fpv.selector {
	case WatchPortForwardingServiceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*port_forwarding_service.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchPortForwardingServiceRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPortForwardingServiceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPortForwardingServiceRequest))
}

// WatchPortForwardingServiceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPortForwardingServiceRequest according to their type
// Present only for array (repeated) types.
type WatchPortForwardingServiceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPortForwardingServiceRequest_FieldPath
	ContainsValue(*WatchPortForwardingServiceRequest) bool
}

// ParseWatchPortForwardingServiceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPortForwardingServiceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPortForwardingServiceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPortForwardingServiceRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchPortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchPortForwardingServiceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPortForwardingServiceRequest_FieldTerminalPathArrayItemValue struct {
	WatchPortForwardingServiceRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPortForwardingServiceRequest_FieldPathArrayItemValue = (*WatchPortForwardingServiceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPortForwardingServiceRequest as interface{}
func (fpaiv *WatchPortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPortForwardingServiceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPortForwardingServiceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPortForwardingServiceRequest'
func (fpaiv *WatchPortForwardingServiceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPortForwardingServiceRequest) bool {
	slice := fpaiv.WatchPortForwardingServiceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPortForwardingServiceRequest_FieldPathArrayOfValues allows storing slice of values for WatchPortForwardingServiceRequest fields according to their type
type WatchPortForwardingServiceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPortForwardingServiceRequest_FieldPath
}

func ParseWatchPortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPortForwardingServiceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPortForwardingServiceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPortForwardingServiceRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchPortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPortForwardingServiceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPortForwardingServiceRequest_FieldTerminalPathArrayOfValues struct {
	WatchPortForwardingServiceRequest_FieldTerminalPath
	values interface{}
}

var _ WatchPortForwardingServiceRequest_FieldPathArrayOfValues = (*WatchPortForwardingServiceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPortForwardingServiceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPortForwardingServiceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*port_forwarding_service.Reference) {
			values = append(values, v)
		}
	case WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*port_forwarding_service.PortForwardingService_FieldMask) {
			values = append(values, v)
		}
	case WatchPortForwardingServiceRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPortForwardingServiceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*port_forwarding_service.Reference, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.Reference)
	return res, ok
}
func (fpaov *WatchPortForwardingServiceRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*port_forwarding_service.PortForwardingService_FieldMask, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PortForwardingService_FieldMask)
	return res, ok
}
func (fpaov *WatchPortForwardingServiceRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPortForwardingServiceResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPortForwardingServiceResponse_FieldPathSelector
	Get(source *WatchPortForwardingServiceResponse) []interface{}
	GetSingle(source *WatchPortForwardingServiceResponse) (interface{}, bool)
	ClearValue(item *WatchPortForwardingServiceResponse)

	// Those methods build corresponding WatchPortForwardingServiceResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPortForwardingServiceResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPortForwardingServiceResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPortForwardingServiceResponse_FieldPathArrayItemValue
}

type WatchPortForwardingServiceResponse_FieldPathSelector int32

const (
	WatchPortForwardingServiceResponse_FieldPathSelectorChange WatchPortForwardingServiceResponse_FieldPathSelector = 0
)

func (s WatchPortForwardingServiceResponse_FieldPathSelector) String() string {
	switch s {
	case WatchPortForwardingServiceResponse_FieldPathSelectorChange:
		return "change"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceResponse: %d", s))
	}
}

func BuildWatchPortForwardingServiceResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchPortForwardingServiceResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPortForwardingServiceResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "change":
			return &WatchPortForwardingServiceResponse_FieldTerminalPath{selector: WatchPortForwardingServiceResponse_FieldPathSelectorChange}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPortForwardingServiceResponse", fp)
}

func ParseWatchPortForwardingServiceResponse_FieldPath(rawField string) (WatchPortForwardingServiceResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPortForwardingServiceResponse_FieldPath(fp)
}

func MustParseWatchPortForwardingServiceResponse_FieldPath(rawField string) WatchPortForwardingServiceResponse_FieldPath {
	fp, err := ParseWatchPortForwardingServiceResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPortForwardingServiceResponse_FieldTerminalPath struct {
	selector WatchPortForwardingServiceResponse_FieldPathSelector
}

var _ WatchPortForwardingServiceResponse_FieldPath = (*WatchPortForwardingServiceResponse_FieldTerminalPath)(nil)

func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) Selector() WatchPortForwardingServiceResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPortForwardingServiceResponse
func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) Get(source *WatchPortForwardingServiceResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPortForwardingServiceResponse_FieldPathSelectorChange:
			if source.Change != nil {
				values = append(values, source.Change)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPortForwardingServiceResponse))
}

// GetSingle returns value pointed by specific field of from source WatchPortForwardingServiceResponse
func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) GetSingle(source *WatchPortForwardingServiceResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchPortForwardingServiceResponse_FieldPathSelectorChange:
		res := source.GetChange()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceResponse: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPortForwardingServiceResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPortForwardingServiceResponse_FieldPathSelectorChange:
		return (*port_forwarding_service.PortForwardingServiceChange)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceResponse: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) ClearValue(item *WatchPortForwardingServiceResponse) {
	if item != nil {
		switch fp.selector {
		case WatchPortForwardingServiceResponse_FieldPathSelectorChange:
			item.Change = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPortForwardingServiceResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPortForwardingServiceResponse_FieldPathSelectorChange
}

func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) WithIValue(value interface{}) WatchPortForwardingServiceResponse_FieldPathValue {
	switch fp.selector {
	case WatchPortForwardingServiceResponse_FieldPathSelectorChange:
		return &WatchPortForwardingServiceResponse_FieldTerminalPathValue{WatchPortForwardingServiceResponse_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PortForwardingServiceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceResponse: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPortForwardingServiceResponse_FieldPathArrayOfValues {
	fpaov := &WatchPortForwardingServiceResponse_FieldTerminalPathArrayOfValues{WatchPortForwardingServiceResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPortForwardingServiceResponse_FieldPathSelectorChange:
		return &WatchPortForwardingServiceResponse_FieldTerminalPathArrayOfValues{WatchPortForwardingServiceResponse_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PortForwardingServiceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPortForwardingServiceResponse_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceResponse: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServiceResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPortForwardingServiceResponse_FieldPathValue allows storing values for WatchPortForwardingServiceResponse fields according to their type
type WatchPortForwardingServiceResponse_FieldPathValue interface {
	WatchPortForwardingServiceResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPortForwardingServiceResponse)
	CompareWith(*WatchPortForwardingServiceResponse) (cmp int, comparable bool)
}

func ParseWatchPortForwardingServiceResponse_FieldPathValue(pathStr, valueStr string) (WatchPortForwardingServiceResponse_FieldPathValue, error) {
	fp, err := ParseWatchPortForwardingServiceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPortForwardingServiceResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPortForwardingServiceResponse_FieldPathValue), nil
}

func MustParseWatchPortForwardingServiceResponse_FieldPathValue(pathStr, valueStr string) WatchPortForwardingServiceResponse_FieldPathValue {
	fpv, err := ParseWatchPortForwardingServiceResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPortForwardingServiceResponse_FieldTerminalPathValue struct {
	WatchPortForwardingServiceResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPortForwardingServiceResponse_FieldPathValue = (*WatchPortForwardingServiceResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPortForwardingServiceResponse' as interface{}
func (fpv *WatchPortForwardingServiceResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPortForwardingServiceResponse_FieldTerminalPathValue) AsChangeValue() (*port_forwarding_service.PortForwardingServiceChange, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PortForwardingServiceChange)
	return res, ok
}

// SetTo stores value for selected field for object WatchPortForwardingServiceResponse
func (fpv *WatchPortForwardingServiceResponse_FieldTerminalPathValue) SetTo(target **WatchPortForwardingServiceResponse) {
	if *target == nil {
		*target = new(WatchPortForwardingServiceResponse)
	}
	switch fpv.selector {
	case WatchPortForwardingServiceResponse_FieldPathSelectorChange:
		(*target).Change = fpv.value.(*port_forwarding_service.PortForwardingServiceChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPortForwardingServiceResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPortForwardingServiceResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPortForwardingServiceResponse_FieldTerminalPathValue' with the value under path in 'WatchPortForwardingServiceResponse'.
func (fpv *WatchPortForwardingServiceResponse_FieldTerminalPathValue) CompareWith(source *WatchPortForwardingServiceResponse) (int, bool) {
	switch fpv.selector {
	case WatchPortForwardingServiceResponse_FieldPathSelectorChange:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServiceResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPortForwardingServiceResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPortForwardingServiceResponse))
}

// WatchPortForwardingServiceResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPortForwardingServiceResponse according to their type
// Present only for array (repeated) types.
type WatchPortForwardingServiceResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPortForwardingServiceResponse_FieldPath
	ContainsValue(*WatchPortForwardingServiceResponse) bool
}

// ParseWatchPortForwardingServiceResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPortForwardingServiceResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPortForwardingServiceResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPortForwardingServiceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPortForwardingServiceResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPortForwardingServiceResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchPortForwardingServiceResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchPortForwardingServiceResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPortForwardingServiceResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPortForwardingServiceResponse_FieldTerminalPathArrayItemValue struct {
	WatchPortForwardingServiceResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPortForwardingServiceResponse_FieldPathArrayItemValue = (*WatchPortForwardingServiceResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPortForwardingServiceResponse as interface{}
func (fpaiv *WatchPortForwardingServiceResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPortForwardingServiceResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPortForwardingServiceResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPortForwardingServiceResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPortForwardingServiceResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPortForwardingServiceResponse'
func (fpaiv *WatchPortForwardingServiceResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPortForwardingServiceResponse) bool {
	slice := fpaiv.WatchPortForwardingServiceResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPortForwardingServiceResponse_FieldPathArrayOfValues allows storing slice of values for WatchPortForwardingServiceResponse fields according to their type
type WatchPortForwardingServiceResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPortForwardingServiceResponse_FieldPath
}

func ParseWatchPortForwardingServiceResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPortForwardingServiceResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPortForwardingServiceResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPortForwardingServiceResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPortForwardingServiceResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchPortForwardingServiceResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPortForwardingServiceResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPortForwardingServiceResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPortForwardingServiceResponse_FieldTerminalPathArrayOfValues struct {
	WatchPortForwardingServiceResponse_FieldTerminalPath
	values interface{}
}

var _ WatchPortForwardingServiceResponse_FieldPathArrayOfValues = (*WatchPortForwardingServiceResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPortForwardingServiceResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPortForwardingServiceResponse_FieldPathSelectorChange:
		for _, v := range fpaov.values.([]*port_forwarding_service.PortForwardingServiceChange) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPortForwardingServiceResponse_FieldTerminalPathArrayOfValues) AsChangeArrayOfValues() ([]*port_forwarding_service.PortForwardingServiceChange, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PortForwardingServiceChange)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPortForwardingServicesRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPortForwardingServicesRequest_FieldPathSelector
	Get(source *WatchPortForwardingServicesRequest) []interface{}
	GetSingle(source *WatchPortForwardingServicesRequest) (interface{}, bool)
	ClearValue(item *WatchPortForwardingServicesRequest)

	// Those methods build corresponding WatchPortForwardingServicesRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPortForwardingServicesRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPortForwardingServicesRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPortForwardingServicesRequest_FieldPathArrayItemValue
}

type WatchPortForwardingServicesRequest_FieldPathSelector int32

const (
	WatchPortForwardingServicesRequest_FieldPathSelectorType         WatchPortForwardingServicesRequest_FieldPathSelector = 0
	WatchPortForwardingServicesRequest_FieldPathSelectorParent       WatchPortForwardingServicesRequest_FieldPathSelector = 1
	WatchPortForwardingServicesRequest_FieldPathSelectorPageSize     WatchPortForwardingServicesRequest_FieldPathSelector = 2
	WatchPortForwardingServicesRequest_FieldPathSelectorPageToken    WatchPortForwardingServicesRequest_FieldPathSelector = 3
	WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy      WatchPortForwardingServicesRequest_FieldPathSelector = 4
	WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken  WatchPortForwardingServicesRequest_FieldPathSelector = 5
	WatchPortForwardingServicesRequest_FieldPathSelectorFilter       WatchPortForwardingServicesRequest_FieldPathSelector = 6
	WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask    WatchPortForwardingServicesRequest_FieldPathSelector = 7
	WatchPortForwardingServicesRequest_FieldPathSelectorView         WatchPortForwardingServicesRequest_FieldPathSelector = 8
	WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize WatchPortForwardingServicesRequest_FieldPathSelector = 9
)

func (s WatchPortForwardingServicesRequest_FieldPathSelector) String() string {
	switch s {
	case WatchPortForwardingServicesRequest_FieldPathSelectorType:
		return "type"
	case WatchPortForwardingServicesRequest_FieldPathSelectorParent:
		return "parent"
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageSize:
		return "page_size"
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageToken:
		return "page_token"
	case WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		return "order_by"
	case WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchPortForwardingServicesRequest_FieldPathSelectorFilter:
		return "filter"
	case WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return "field_mask"
	case WatchPortForwardingServicesRequest_FieldPathSelectorView:
		return "view"
	case WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize:
		return "max_chunk_size"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesRequest: %d", s))
	}
}

func BuildWatchPortForwardingServicesRequest_FieldPath(fp gotenobject.RawFieldPath) (WatchPortForwardingServicesRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPortForwardingServicesRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "type":
			return &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorType}, nil
		case "parent":
			return &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorParent}, nil
		case "page_size", "pageSize", "page-size":
			return &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorPageSize}, nil
		case "page_token", "pageToken", "page-token":
			return &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorPageToken}, nil
		case "order_by", "orderBy", "order-by":
			return &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken}, nil
		case "filter":
			return &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorFilter}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask}, nil
		case "view":
			return &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorView}, nil
		case "max_chunk_size", "maxChunkSize", "max-chunk-size":
			return &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPortForwardingServicesRequest", fp)
}

func ParseWatchPortForwardingServicesRequest_FieldPath(rawField string) (WatchPortForwardingServicesRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPortForwardingServicesRequest_FieldPath(fp)
}

func MustParseWatchPortForwardingServicesRequest_FieldPath(rawField string) WatchPortForwardingServicesRequest_FieldPath {
	fp, err := ParseWatchPortForwardingServicesRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPortForwardingServicesRequest_FieldTerminalPath struct {
	selector WatchPortForwardingServicesRequest_FieldPathSelector
}

var _ WatchPortForwardingServicesRequest_FieldPath = (*WatchPortForwardingServicesRequest_FieldTerminalPath)(nil)

func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) Selector() WatchPortForwardingServicesRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPortForwardingServicesRequest
func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) Get(source *WatchPortForwardingServicesRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPortForwardingServicesRequest_FieldPathSelectorType:
			values = append(values, source.Type)
		case WatchPortForwardingServicesRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case WatchPortForwardingServicesRequest_FieldPathSelectorPageSize:
			values = append(values, source.PageSize)
		case WatchPortForwardingServicesRequest_FieldPathSelectorPageToken:
			if source.PageToken != nil {
				values = append(values, source.PageToken)
			}
		case WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy:
			if source.OrderBy != nil {
				values = append(values, source.OrderBy)
			}
		case WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchPortForwardingServicesRequest_FieldPathSelectorFilter:
			if source.Filter != nil {
				values = append(values, source.Filter)
			}
		case WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		case WatchPortForwardingServicesRequest_FieldPathSelectorView:
			values = append(values, source.View)
		case WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize:
			values = append(values, source.MaxChunkSize)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPortForwardingServicesRequest))
}

// GetSingle returns value pointed by specific field of from source WatchPortForwardingServicesRequest
func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) GetSingle(source *WatchPortForwardingServicesRequest) (interface{}, bool) {
	switch fp.selector {
	case WatchPortForwardingServicesRequest_FieldPathSelectorType:
		return source.GetType(), source != nil
	case WatchPortForwardingServicesRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageSize:
		return source.GetPageSize(), source != nil
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageToken:
		res := source.GetPageToken()
		return res, res != nil
	case WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		res := source.GetOrderBy()
		return res, res != nil
	case WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchPortForwardingServicesRequest_FieldPathSelectorFilter:
		res := source.GetFilter()
		return res, res != nil
	case WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	case WatchPortForwardingServicesRequest_FieldPathSelectorView:
		return source.GetView(), source != nil
	case WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize:
		return source.GetMaxChunkSize(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesRequest: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPortForwardingServicesRequest))
}

// GetDefault returns a default value of the field type
func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPortForwardingServicesRequest_FieldPathSelectorType:
		return watch_type.WatchType_STATEFUL
	case WatchPortForwardingServicesRequest_FieldPathSelectorParent:
		return (*port_forwarding_service.ParentReference)(nil)
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageSize:
		return int32(0)
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageToken:
		return (*port_forwarding_service.PagerCursor)(nil)
	case WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		return (*port_forwarding_service.OrderBy)(nil)
	case WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken:
		return ""
	case WatchPortForwardingServicesRequest_FieldPathSelectorFilter:
		return (*port_forwarding_service.Filter)(nil)
	case WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return (*port_forwarding_service.PortForwardingService_FieldMask)(nil)
	case WatchPortForwardingServicesRequest_FieldPathSelectorView:
		return view.View_UNSPECIFIED
	case WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize:
		return int32(0)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesRequest: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) ClearValue(item *WatchPortForwardingServicesRequest) {
	if item != nil {
		switch fp.selector {
		case WatchPortForwardingServicesRequest_FieldPathSelectorType:
			item.Type = watch_type.WatchType_STATEFUL
		case WatchPortForwardingServicesRequest_FieldPathSelectorParent:
			item.Parent = nil
		case WatchPortForwardingServicesRequest_FieldPathSelectorPageSize:
			item.PageSize = int32(0)
		case WatchPortForwardingServicesRequest_FieldPathSelectorPageToken:
			item.PageToken = nil
		case WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy:
			item.OrderBy = nil
		case WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchPortForwardingServicesRequest_FieldPathSelectorFilter:
			item.Filter = nil
		case WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		case WatchPortForwardingServicesRequest_FieldPathSelectorView:
			item.View = view.View_UNSPECIFIED
		case WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize:
			item.MaxChunkSize = int32(0)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesRequest: %d", fp.selector))
		}
	}
}

func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPortForwardingServicesRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPortForwardingServicesRequest_FieldPathSelectorType ||
		fp.selector == WatchPortForwardingServicesRequest_FieldPathSelectorParent ||
		fp.selector == WatchPortForwardingServicesRequest_FieldPathSelectorPageSize ||
		fp.selector == WatchPortForwardingServicesRequest_FieldPathSelectorPageToken ||
		fp.selector == WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy ||
		fp.selector == WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken ||
		fp.selector == WatchPortForwardingServicesRequest_FieldPathSelectorFilter ||
		fp.selector == WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask ||
		fp.selector == WatchPortForwardingServicesRequest_FieldPathSelectorView ||
		fp.selector == WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize
}

func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) WithIValue(value interface{}) WatchPortForwardingServicesRequest_FieldPathValue {
	switch fp.selector {
	case WatchPortForwardingServicesRequest_FieldPathSelectorType:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathValue{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(watch_type.WatchType)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorParent:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathValue{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.ParentReference)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageSize:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathValue{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageToken:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathValue{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PagerCursor)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathValue{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.OrderBy)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathValue{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(string)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorFilter:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathValue{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.Filter)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathValue{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PortForwardingService_FieldMask)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorView:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathValue{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(view.View)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathValue{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, value: value.(int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesRequest: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPortForwardingServicesRequest_FieldPathArrayOfValues {
	fpaov := &WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPortForwardingServicesRequest_FieldPathSelectorType:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]watch_type.WatchType)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorParent:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.ParentReference)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageSize:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageToken:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PagerCursor)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.OrderBy)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorFilter:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.Filter)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PortForwardingService_FieldMask)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorView:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]view.View)}
	case WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize:
		return &WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesRequest_FieldTerminalPath: *fp, values: values.([]int32)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPortForwardingServicesRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesRequest: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServicesRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPortForwardingServicesRequest_FieldPathValue allows storing values for WatchPortForwardingServicesRequest fields according to their type
type WatchPortForwardingServicesRequest_FieldPathValue interface {
	WatchPortForwardingServicesRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPortForwardingServicesRequest)
	CompareWith(*WatchPortForwardingServicesRequest) (cmp int, comparable bool)
}

func ParseWatchPortForwardingServicesRequest_FieldPathValue(pathStr, valueStr string) (WatchPortForwardingServicesRequest_FieldPathValue, error) {
	fp, err := ParseWatchPortForwardingServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPortForwardingServicesRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPortForwardingServicesRequest_FieldPathValue), nil
}

func MustParseWatchPortForwardingServicesRequest_FieldPathValue(pathStr, valueStr string) WatchPortForwardingServicesRequest_FieldPathValue {
	fpv, err := ParseWatchPortForwardingServicesRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPortForwardingServicesRequest_FieldTerminalPathValue struct {
	WatchPortForwardingServicesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPortForwardingServicesRequest_FieldPathValue = (*WatchPortForwardingServicesRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPortForwardingServicesRequest' as interface{}
func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) AsTypeValue() (watch_type.WatchType, bool) {
	res, ok := fpv.value.(watch_type.WatchType)
	return res, ok
}
func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) AsParentValue() (*port_forwarding_service.ParentReference, bool) {
	res, ok := fpv.value.(*port_forwarding_service.ParentReference)
	return res, ok
}
func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) AsPageSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}
func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) AsPageTokenValue() (*port_forwarding_service.PagerCursor, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PagerCursor)
	return res, ok
}
func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) AsOrderByValue() (*port_forwarding_service.OrderBy, bool) {
	res, ok := fpv.value.(*port_forwarding_service.OrderBy)
	return res, ok
}
func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) AsFilterValue() (*port_forwarding_service.Filter, bool) {
	res, ok := fpv.value.(*port_forwarding_service.Filter)
	return res, ok
}
func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) AsFieldMaskValue() (*port_forwarding_service.PortForwardingService_FieldMask, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PortForwardingService_FieldMask)
	return res, ok
}
func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) AsViewValue() (view.View, bool) {
	res, ok := fpv.value.(view.View)
	return res, ok
}
func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) AsMaxChunkSizeValue() (int32, bool) {
	res, ok := fpv.value.(int32)
	return res, ok
}

// SetTo stores value for selected field for object WatchPortForwardingServicesRequest
func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) SetTo(target **WatchPortForwardingServicesRequest) {
	if *target == nil {
		*target = new(WatchPortForwardingServicesRequest)
	}
	switch fpv.selector {
	case WatchPortForwardingServicesRequest_FieldPathSelectorType:
		(*target).Type = fpv.value.(watch_type.WatchType)
	case WatchPortForwardingServicesRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*port_forwarding_service.ParentReference)
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageSize:
		(*target).PageSize = fpv.value.(int32)
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageToken:
		(*target).PageToken = fpv.value.(*port_forwarding_service.PagerCursor)
	case WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		(*target).OrderBy = fpv.value.(*port_forwarding_service.OrderBy)
	case WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchPortForwardingServicesRequest_FieldPathSelectorFilter:
		(*target).Filter = fpv.value.(*port_forwarding_service.Filter)
	case WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*port_forwarding_service.PortForwardingService_FieldMask)
	case WatchPortForwardingServicesRequest_FieldPathSelectorView:
		(*target).View = fpv.value.(view.View)
	case WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize:
		(*target).MaxChunkSize = fpv.value.(int32)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPortForwardingServicesRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPortForwardingServicesRequest_FieldTerminalPathValue' with the value under path in 'WatchPortForwardingServicesRequest'.
func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) CompareWith(source *WatchPortForwardingServicesRequest) (int, bool) {
	switch fpv.selector {
	case WatchPortForwardingServicesRequest_FieldPathSelectorType:
		leftValue := fpv.value.(watch_type.WatchType)
		rightValue := source.GetType()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPortForwardingServicesRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*port_forwarding_service.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetPageSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageToken:
		return 0, false
	case WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		return 0, false
	case WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPortForwardingServicesRequest_FieldPathSelectorFilter:
		return 0, false
	case WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		return 0, false
	case WatchPortForwardingServicesRequest_FieldPathSelectorView:
		leftValue := fpv.value.(view.View)
		rightValue := source.GetView()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize:
		leftValue := fpv.value.(int32)
		rightValue := source.GetMaxChunkSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesRequest: %d", fpv.selector))
	}
}

func (fpv *WatchPortForwardingServicesRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPortForwardingServicesRequest))
}

// WatchPortForwardingServicesRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPortForwardingServicesRequest according to their type
// Present only for array (repeated) types.
type WatchPortForwardingServicesRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPortForwardingServicesRequest_FieldPath
	ContainsValue(*WatchPortForwardingServicesRequest) bool
}

// ParseWatchPortForwardingServicesRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPortForwardingServicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPortForwardingServicesRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPortForwardingServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPortForwardingServicesRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPortForwardingServicesRequest_FieldPathArrayItemValue), nil
}

func MustParseWatchPortForwardingServicesRequest_FieldPathArrayItemValue(pathStr, valueStr string) WatchPortForwardingServicesRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPortForwardingServicesRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPortForwardingServicesRequest_FieldTerminalPathArrayItemValue struct {
	WatchPortForwardingServicesRequest_FieldTerminalPath
	value interface{}
}

var _ WatchPortForwardingServicesRequest_FieldPathArrayItemValue = (*WatchPortForwardingServicesRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPortForwardingServicesRequest as interface{}
func (fpaiv *WatchPortForwardingServicesRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPortForwardingServicesRequest_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPortForwardingServicesRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPortForwardingServicesRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPortForwardingServicesRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPortForwardingServicesRequest'
func (fpaiv *WatchPortForwardingServicesRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPortForwardingServicesRequest) bool {
	slice := fpaiv.WatchPortForwardingServicesRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPortForwardingServicesRequest_FieldPathArrayOfValues allows storing slice of values for WatchPortForwardingServicesRequest fields according to their type
type WatchPortForwardingServicesRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPortForwardingServicesRequest_FieldPath
}

func ParseWatchPortForwardingServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPortForwardingServicesRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPortForwardingServicesRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPortForwardingServicesRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPortForwardingServicesRequest_FieldPathArrayOfValues), nil
}

func MustParseWatchPortForwardingServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPortForwardingServicesRequest_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPortForwardingServicesRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues struct {
	WatchPortForwardingServicesRequest_FieldTerminalPath
	values interface{}
}

var _ WatchPortForwardingServicesRequest_FieldPathArrayOfValues = (*WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPortForwardingServicesRequest_FieldPathSelectorType:
		for _, v := range fpaov.values.([]watch_type.WatchType) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*port_forwarding_service.ParentReference) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesRequest_FieldPathSelectorPageToken:
		for _, v := range fpaov.values.([]*port_forwarding_service.PagerCursor) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy:
		for _, v := range fpaov.values.([]*port_forwarding_service.OrderBy) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesRequest_FieldPathSelectorFilter:
		for _, v := range fpaov.values.([]*port_forwarding_service.Filter) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*port_forwarding_service.PortForwardingService_FieldMask) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesRequest_FieldPathSelectorView:
		for _, v := range fpaov.values.([]view.View) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize:
		for _, v := range fpaov.values.([]int32) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsTypeArrayOfValues() ([]watch_type.WatchType, bool) {
	res, ok := fpaov.values.([]watch_type.WatchType)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*port_forwarding_service.ParentReference, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.ParentReference)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsPageSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsPageTokenArrayOfValues() ([]*port_forwarding_service.PagerCursor, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PagerCursor)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsOrderByArrayOfValues() ([]*port_forwarding_service.OrderBy, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.OrderBy)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsFilterArrayOfValues() ([]*port_forwarding_service.Filter, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.Filter)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*port_forwarding_service.PortForwardingService_FieldMask, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PortForwardingService_FieldMask)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsViewArrayOfValues() ([]view.View, bool) {
	res, ok := fpaov.values.([]view.View)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesRequest_FieldTerminalPathArrayOfValues) AsMaxChunkSizeArrayOfValues() ([]int32, bool) {
	res, ok := fpaov.values.([]int32)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPortForwardingServicesResponse_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPortForwardingServicesResponse_FieldPathSelector
	Get(source *WatchPortForwardingServicesResponse) []interface{}
	GetSingle(source *WatchPortForwardingServicesResponse) (interface{}, bool)
	ClearValue(item *WatchPortForwardingServicesResponse)

	// Those methods build corresponding WatchPortForwardingServicesResponse_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPortForwardingServicesResponse_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPortForwardingServicesResponse_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPortForwardingServicesResponse_FieldPathArrayItemValue
}

type WatchPortForwardingServicesResponse_FieldPathSelector int32

const (
	WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges WatchPortForwardingServicesResponse_FieldPathSelector = 0
	WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent                    WatchPortForwardingServicesResponse_FieldPathSelector = 1
	WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange              WatchPortForwardingServicesResponse_FieldPathSelector = 2
	WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken                  WatchPortForwardingServicesResponse_FieldPathSelector = 3
	WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize                 WatchPortForwardingServicesResponse_FieldPathSelector = 4
	WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset                  WatchPortForwardingServicesResponse_FieldPathSelector = 5
	WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset                  WatchPortForwardingServicesResponse_FieldPathSelector = 6
)

func (s WatchPortForwardingServicesResponse_FieldPathSelector) String() string {
	switch s {
	case WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges:
		return "port_forwarding_service_changes"
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent:
		return "is_current"
	case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
		return "page_token_change"
	case WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken:
		return "resume_token"
	case WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize:
		return "snapshot_size"
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset:
		return "is_soft_reset"
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset:
		return "is_hard_reset"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", s))
	}
}

func BuildWatchPortForwardingServicesResponse_FieldPath(fp gotenobject.RawFieldPath) (WatchPortForwardingServicesResponse_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPortForwardingServicesResponse")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "port_forwarding_service_changes", "portForwardingServiceChanges", "port-forwarding-service-changes":
			return &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges}, nil
		case "is_current", "isCurrent", "is-current":
			return &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent}, nil
		case "page_token_change", "pageTokenChange", "page-token-change":
			return &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange}, nil
		case "resume_token", "resumeToken", "resume-token":
			return &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken}, nil
		case "snapshot_size", "snapshotSize", "snapshot-size":
			return &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize}, nil
		case "is_soft_reset", "isSoftReset", "is-soft-reset":
			return &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset}, nil
		case "is_hard_reset", "isHardReset", "is-hard-reset":
			return &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset}, nil
		}
	} else {
		switch fp[0] {
		case "page_token_change", "pageTokenChange", "page-token-change":
			if subpath, err := BuildWatchPortForwardingServicesResponsePageTokenChange_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &WatchPortForwardingServicesResponse_FieldSubPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPortForwardingServicesResponse", fp)
}

func ParseWatchPortForwardingServicesResponse_FieldPath(rawField string) (WatchPortForwardingServicesResponse_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPortForwardingServicesResponse_FieldPath(fp)
}

func MustParseWatchPortForwardingServicesResponse_FieldPath(rawField string) WatchPortForwardingServicesResponse_FieldPath {
	fp, err := ParseWatchPortForwardingServicesResponse_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPortForwardingServicesResponse_FieldTerminalPath struct {
	selector WatchPortForwardingServicesResponse_FieldPathSelector
}

var _ WatchPortForwardingServicesResponse_FieldPath = (*WatchPortForwardingServicesResponse_FieldTerminalPath)(nil)

func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) Selector() WatchPortForwardingServicesResponse_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPortForwardingServicesResponse
func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) Get(source *WatchPortForwardingServicesResponse) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges:
			for _, value := range source.GetPortForwardingServiceChanges() {
				values = append(values, value)
			}
		case WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent:
			values = append(values, source.IsCurrent)
		case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
			if source.PageTokenChange != nil {
				values = append(values, source.PageTokenChange)
			}
		case WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken:
			values = append(values, source.ResumeToken)
		case WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize:
			values = append(values, source.SnapshotSize)
		case WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset:
			values = append(values, source.IsSoftReset)
		case WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset:
			values = append(values, source.IsHardReset)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPortForwardingServicesResponse))
}

// GetSingle returns value pointed by specific field of from source WatchPortForwardingServicesResponse
func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) GetSingle(source *WatchPortForwardingServicesResponse) (interface{}, bool) {
	switch fp.selector {
	case WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges:
		res := source.GetPortForwardingServiceChanges()
		return res, res != nil
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent:
		return source.GetIsCurrent(), source != nil
	case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
		res := source.GetPageTokenChange()
		return res, res != nil
	case WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken:
		return source.GetResumeToken(), source != nil
	case WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize:
		return source.GetSnapshotSize(), source != nil
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset:
		return source.GetIsSoftReset(), source != nil
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset:
		return source.GetIsHardReset(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPortForwardingServicesResponse))
}

// GetDefault returns a default value of the field type
func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges:
		return ([]*port_forwarding_service.PortForwardingServiceChange)(nil)
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent:
		return false
	case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
		return (*WatchPortForwardingServicesResponse_PageTokenChange)(nil)
	case WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken:
		return ""
	case WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize:
		return int64(0)
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset:
		return false
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset:
		return false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) ClearValue(item *WatchPortForwardingServicesResponse) {
	if item != nil {
		switch fp.selector {
		case WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges:
			item.PortForwardingServiceChanges = nil
		case WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent:
			item.IsCurrent = false
		case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
			item.PageTokenChange = nil
		case WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken:
			item.ResumeToken = ""
		case WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize:
			item.SnapshotSize = int64(0)
		case WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset:
			item.IsSoftReset = false
		case WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset:
			item.IsHardReset = false
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fp.selector))
		}
	}
}

func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPortForwardingServicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges ||
		fp.selector == WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent ||
		fp.selector == WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken ||
		fp.selector == WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize ||
		fp.selector == WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset ||
		fp.selector == WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset
}

func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) WithIValue(value interface{}) WatchPortForwardingServicesResponse_FieldPathValue {
	switch fp.selector {
	case WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathValue{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.([]*port_forwarding_service.PortForwardingServiceChange)}
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathValue{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathValue{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.(*WatchPortForwardingServicesResponse_PageTokenChange)}
	case WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathValue{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.(string)}
	case WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathValue{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.(int64)}
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathValue{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathValue{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.(bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPortForwardingServicesResponse_FieldPathArrayOfValues {
	fpaov := &WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, values: values.([][]*port_forwarding_service.PortForwardingServiceChange)}
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, values: values.([]*WatchPortForwardingServicesResponse_PageTokenChange)}
	case WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, values: values.([]string)}
	case WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, values: values.([]int64)}
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, values: values.([]bool)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPortForwardingServicesResponse_FieldPathArrayItemValue {
	switch fp.selector {
	case WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges:
		return &WatchPortForwardingServicesResponse_FieldTerminalPathArrayItemValue{WatchPortForwardingServicesResponse_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PortForwardingServiceChange)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServicesResponse_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type WatchPortForwardingServicesResponse_FieldSubPath struct {
	selector WatchPortForwardingServicesResponse_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ WatchPortForwardingServicesResponse_FieldPath = (*WatchPortForwardingServicesResponse_FieldSubPath)(nil)

func (fps *WatchPortForwardingServicesResponse_FieldSubPath) Selector() WatchPortForwardingServicesResponse_FieldPathSelector {
	return fps.selector
}
func (fps *WatchPortForwardingServicesResponse_FieldSubPath) AsPageTokenChangeSubPath() (WatchPortForwardingServicesResponsePageTokenChange_FieldPath, bool) {
	res, ok := fps.subPath.(WatchPortForwardingServicesResponsePageTokenChange_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *WatchPortForwardingServicesResponse_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *WatchPortForwardingServicesResponse_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source WatchPortForwardingServicesResponse
func (fps *WatchPortForwardingServicesResponse_FieldSubPath) Get(source *WatchPortForwardingServicesResponse) (values []interface{}) {
	if asPageTokenChangeFieldPath, ok := fps.AsPageTokenChangeSubPath(); ok {
		values = append(values, asPageTokenChangeFieldPath.Get(source.GetPageTokenChange())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fps.selector))
	}
	return
}

func (fps *WatchPortForwardingServicesResponse_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*WatchPortForwardingServicesResponse))
}

// GetSingle returns value of selected field from source WatchPortForwardingServicesResponse
func (fps *WatchPortForwardingServicesResponse_FieldSubPath) GetSingle(source *WatchPortForwardingServicesResponse) (interface{}, bool) {
	switch fps.selector {
	case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
		if source.GetPageTokenChange() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fps.selector))
	}
}

func (fps *WatchPortForwardingServicesResponse_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*WatchPortForwardingServicesResponse))
}

// GetDefault returns a default value of the field type
func (fps *WatchPortForwardingServicesResponse_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *WatchPortForwardingServicesResponse_FieldSubPath) ClearValue(item *WatchPortForwardingServicesResponse) {
	if item != nil {
		switch fps.selector {
		case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
			fps.subPath.ClearValueRaw(item.PageTokenChange)
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fps.selector))
		}
	}
}

func (fps *WatchPortForwardingServicesResponse_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*WatchPortForwardingServicesResponse))
}

// IsLeaf - whether field path is holds simple value
func (fps *WatchPortForwardingServicesResponse_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *WatchPortForwardingServicesResponse_FieldSubPath) WithIValue(value interface{}) WatchPortForwardingServicesResponse_FieldPathValue {
	return &WatchPortForwardingServicesResponse_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *WatchPortForwardingServicesResponse_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *WatchPortForwardingServicesResponse_FieldSubPath) WithIArrayOfValues(values interface{}) WatchPortForwardingServicesResponse_FieldPathArrayOfValues {
	return &WatchPortForwardingServicesResponse_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *WatchPortForwardingServicesResponse_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *WatchPortForwardingServicesResponse_FieldSubPath) WithIArrayItemValue(value interface{}) WatchPortForwardingServicesResponse_FieldPathArrayItemValue {
	return &WatchPortForwardingServicesResponse_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *WatchPortForwardingServicesResponse_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// WatchPortForwardingServicesResponse_FieldPathValue allows storing values for WatchPortForwardingServicesResponse fields according to their type
type WatchPortForwardingServicesResponse_FieldPathValue interface {
	WatchPortForwardingServicesResponse_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPortForwardingServicesResponse)
	CompareWith(*WatchPortForwardingServicesResponse) (cmp int, comparable bool)
}

func ParseWatchPortForwardingServicesResponse_FieldPathValue(pathStr, valueStr string) (WatchPortForwardingServicesResponse_FieldPathValue, error) {
	fp, err := ParseWatchPortForwardingServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPortForwardingServicesResponse field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPortForwardingServicesResponse_FieldPathValue), nil
}

func MustParseWatchPortForwardingServicesResponse_FieldPathValue(pathStr, valueStr string) WatchPortForwardingServicesResponse_FieldPathValue {
	fpv, err := ParseWatchPortForwardingServicesResponse_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPortForwardingServicesResponse_FieldTerminalPathValue struct {
	WatchPortForwardingServicesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPortForwardingServicesResponse_FieldPathValue = (*WatchPortForwardingServicesResponse_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'WatchPortForwardingServicesResponse' as interface{}
func (fpv *WatchPortForwardingServicesResponse_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPortForwardingServicesResponse_FieldTerminalPathValue) AsPortForwardingServiceChangesValue() ([]*port_forwarding_service.PortForwardingServiceChange, bool) {
	res, ok := fpv.value.([]*port_forwarding_service.PortForwardingServiceChange)
	return res, ok
}
func (fpv *WatchPortForwardingServicesResponse_FieldTerminalPathValue) AsIsCurrentValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchPortForwardingServicesResponse_FieldTerminalPathValue) AsPageTokenChangeValue() (*WatchPortForwardingServicesResponse_PageTokenChange, bool) {
	res, ok := fpv.value.(*WatchPortForwardingServicesResponse_PageTokenChange)
	return res, ok
}
func (fpv *WatchPortForwardingServicesResponse_FieldTerminalPathValue) AsResumeTokenValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *WatchPortForwardingServicesResponse_FieldTerminalPathValue) AsSnapshotSizeValue() (int64, bool) {
	res, ok := fpv.value.(int64)
	return res, ok
}
func (fpv *WatchPortForwardingServicesResponse_FieldTerminalPathValue) AsIsSoftResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *WatchPortForwardingServicesResponse_FieldTerminalPathValue) AsIsHardResetValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}

// SetTo stores value for selected field for object WatchPortForwardingServicesResponse
func (fpv *WatchPortForwardingServicesResponse_FieldTerminalPathValue) SetTo(target **WatchPortForwardingServicesResponse) {
	if *target == nil {
		*target = new(WatchPortForwardingServicesResponse)
	}
	switch fpv.selector {
	case WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges:
		(*target).PortForwardingServiceChanges = fpv.value.([]*port_forwarding_service.PortForwardingServiceChange)
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent:
		(*target).IsCurrent = fpv.value.(bool)
	case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
		(*target).PageTokenChange = fpv.value.(*WatchPortForwardingServicesResponse_PageTokenChange)
	case WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken:
		(*target).ResumeToken = fpv.value.(string)
	case WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize:
		(*target).SnapshotSize = fpv.value.(int64)
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset:
		(*target).IsSoftReset = fpv.value.(bool)
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset:
		(*target).IsHardReset = fpv.value.(bool)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPortForwardingServicesResponse_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPortForwardingServicesResponse)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPortForwardingServicesResponse_FieldTerminalPathValue' with the value under path in 'WatchPortForwardingServicesResponse'.
func (fpv *WatchPortForwardingServicesResponse_FieldTerminalPathValue) CompareWith(source *WatchPortForwardingServicesResponse) (int, bool) {
	switch fpv.selector {
	case WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges:
		return 0, false
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsCurrent()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
		return 0, false
	case WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken:
		leftValue := fpv.value.(string)
		rightValue := source.GetResumeToken()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize:
		leftValue := fpv.value.(int64)
		rightValue := source.GetSnapshotSize()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsSoftReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset:
		leftValue := fpv.value.(bool)
		rightValue := source.GetIsHardReset()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fpv.selector))
	}
}

func (fpv *WatchPortForwardingServicesResponse_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPortForwardingServicesResponse))
}

type WatchPortForwardingServicesResponse_FieldSubPathValue struct {
	WatchPortForwardingServicesResponse_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ WatchPortForwardingServicesResponse_FieldPathValue = (*WatchPortForwardingServicesResponse_FieldSubPathValue)(nil)

func (fpvs *WatchPortForwardingServicesResponse_FieldSubPathValue) AsPageTokenChangePathValue() (WatchPortForwardingServicesResponsePageTokenChange_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(WatchPortForwardingServicesResponsePageTokenChange_FieldPathValue)
	return res, ok
}

func (fpvs *WatchPortForwardingServicesResponse_FieldSubPathValue) SetTo(target **WatchPortForwardingServicesResponse) {
	if *target == nil {
		*target = new(WatchPortForwardingServicesResponse)
	}
	switch fpvs.Selector() {
	case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
		fpvs.subPathValue.(WatchPortForwardingServicesResponsePageTokenChange_FieldPathValue).SetTo(&(*target).PageTokenChange)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchPortForwardingServicesResponse_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPortForwardingServicesResponse)
	fpvs.SetTo(&typedObject)
}

func (fpvs *WatchPortForwardingServicesResponse_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *WatchPortForwardingServicesResponse_FieldSubPathValue) CompareWith(source *WatchPortForwardingServicesResponse) (int, bool) {
	switch fpvs.Selector() {
	case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
		return fpvs.subPathValue.(WatchPortForwardingServicesResponsePageTokenChange_FieldPathValue).CompareWith(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fpvs.Selector()))
	}
}

func (fpvs *WatchPortForwardingServicesResponse_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*WatchPortForwardingServicesResponse))
}

// WatchPortForwardingServicesResponse_FieldPathArrayItemValue allows storing single item in Path-specific values for WatchPortForwardingServicesResponse according to their type
// Present only for array (repeated) types.
type WatchPortForwardingServicesResponse_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPortForwardingServicesResponse_FieldPath
	ContainsValue(*WatchPortForwardingServicesResponse) bool
}

// ParseWatchPortForwardingServicesResponse_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPortForwardingServicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPortForwardingServicesResponse_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPortForwardingServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPortForwardingServicesResponse field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPortForwardingServicesResponse_FieldPathArrayItemValue), nil
}

func MustParseWatchPortForwardingServicesResponse_FieldPathArrayItemValue(pathStr, valueStr string) WatchPortForwardingServicesResponse_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPortForwardingServicesResponse_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPortForwardingServicesResponse_FieldTerminalPathArrayItemValue struct {
	WatchPortForwardingServicesResponse_FieldTerminalPath
	value interface{}
}

var _ WatchPortForwardingServicesResponse_FieldPathArrayItemValue = (*WatchPortForwardingServicesResponse_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPortForwardingServicesResponse as interface{}
func (fpaiv *WatchPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *WatchPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) AsPortForwardingServiceChangesItemValue() (*port_forwarding_service.PortForwardingServiceChange, bool) {
	res, ok := fpaiv.value.(*port_forwarding_service.PortForwardingServiceChange)
	return res, ok
}

func (fpaiv *WatchPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPortForwardingServicesResponse) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPortForwardingServicesResponse))
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPortForwardingServicesResponse'
func (fpaiv *WatchPortForwardingServicesResponse_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPortForwardingServicesResponse) bool {
	slice := fpaiv.WatchPortForwardingServicesResponse_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type WatchPortForwardingServicesResponse_FieldSubPathArrayItemValue struct {
	WatchPortForwardingServicesResponse_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *WatchPortForwardingServicesResponse_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *WatchPortForwardingServicesResponse_FieldSubPathArrayItemValue) AsPageTokenChangePathItemValue() (WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'WatchPortForwardingServicesResponse'
func (fpaivs *WatchPortForwardingServicesResponse_FieldSubPathArrayItemValue) ContainsValue(source *WatchPortForwardingServicesResponse) bool {
	switch fpaivs.Selector() {
	case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
		return fpaivs.subPathItemValue.(WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue).ContainsValue(source.GetPageTokenChange())
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse: %d", fpaivs.Selector()))
	}
}

// WatchPortForwardingServicesResponse_FieldPathArrayOfValues allows storing slice of values for WatchPortForwardingServicesResponse fields according to their type
type WatchPortForwardingServicesResponse_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPortForwardingServicesResponse_FieldPath
}

func ParseWatchPortForwardingServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPortForwardingServicesResponse_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPortForwardingServicesResponse_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing WatchPortForwardingServicesResponse field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPortForwardingServicesResponse_FieldPathArrayOfValues), nil
}

func MustParseWatchPortForwardingServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPortForwardingServicesResponse_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPortForwardingServicesResponse_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues struct {
	WatchPortForwardingServicesResponse_FieldTerminalPath
	values interface{}
}

var _ WatchPortForwardingServicesResponse_FieldPathArrayOfValues = (*WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges:
		for _, v := range fpaov.values.([][]*port_forwarding_service.PortForwardingServiceChange) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange:
		for _, v := range fpaov.values.([]*WatchPortForwardingServicesResponse_PageTokenChange) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize:
		for _, v := range fpaov.values.([]int64) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) AsPortForwardingServiceChangesArrayOfValues() ([][]*port_forwarding_service.PortForwardingServiceChange, bool) {
	res, ok := fpaov.values.([][]*port_forwarding_service.PortForwardingServiceChange)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) AsIsCurrentArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) AsPageTokenChangeArrayOfValues() ([]*WatchPortForwardingServicesResponse_PageTokenChange, bool) {
	res, ok := fpaov.values.([]*WatchPortForwardingServicesResponse_PageTokenChange)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) AsResumeTokenArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) AsSnapshotSizeArrayOfValues() ([]int64, bool) {
	res, ok := fpaov.values.([]int64)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) AsIsSoftResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesResponse_FieldTerminalPathArrayOfValues) AsIsHardResetArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}

type WatchPortForwardingServicesResponse_FieldSubPathArrayOfValues struct {
	WatchPortForwardingServicesResponse_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ WatchPortForwardingServicesResponse_FieldPathArrayOfValues = (*WatchPortForwardingServicesResponse_FieldSubPathArrayOfValues)(nil)

func (fpsaov *WatchPortForwardingServicesResponse_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *WatchPortForwardingServicesResponse_FieldSubPathArrayOfValues) AsPageTokenChangePathArrayOfValues() (WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type WatchPortForwardingServicesResponsePageTokenChange_FieldPath interface {
	gotenobject.FieldPath
	Selector() WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelector
	Get(source *WatchPortForwardingServicesResponse_PageTokenChange) []interface{}
	GetSingle(source *WatchPortForwardingServicesResponse_PageTokenChange) (interface{}, bool)
	ClearValue(item *WatchPortForwardingServicesResponse_PageTokenChange)

	// Those methods build corresponding WatchPortForwardingServicesResponsePageTokenChange_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) WatchPortForwardingServicesResponsePageTokenChange_FieldPathValue
	WithIArrayOfValues(values interface{}) WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue
}

type WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelector int32

const (
	WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelector = 0
	WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelector = 1
)

func (s WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelector) String() string {
	switch s {
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return "prev_page_token"
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return "next_page_token"
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse_PageTokenChange: %d", s))
	}
}

func BuildWatchPortForwardingServicesResponsePageTokenChange_FieldPath(fp gotenobject.RawFieldPath) (WatchPortForwardingServicesResponsePageTokenChange_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object WatchPortForwardingServicesResponse_PageTokenChange")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "prev_page_token", "prevPageToken", "prev-page-token":
			return &WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath{selector: WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken}, nil
		case "next_page_token", "nextPageToken", "next-page-token":
			return &WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath{selector: WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object WatchPortForwardingServicesResponse_PageTokenChange", fp)
}

func ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPath(rawField string) (WatchPortForwardingServicesResponsePageTokenChange_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildWatchPortForwardingServicesResponsePageTokenChange_FieldPath(fp)
}

func MustParseWatchPortForwardingServicesResponsePageTokenChange_FieldPath(rawField string) WatchPortForwardingServicesResponsePageTokenChange_FieldPath {
	fp, err := ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath struct {
	selector WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelector
}

var _ WatchPortForwardingServicesResponsePageTokenChange_FieldPath = (*WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath)(nil)

func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) Selector() WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source WatchPortForwardingServicesResponse_PageTokenChange
func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) Get(source *WatchPortForwardingServicesResponse_PageTokenChange) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			if source.PrevPageToken != nil {
				values = append(values, source.PrevPageToken)
			}
		case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			if source.NextPageToken != nil {
				values = append(values, source.NextPageToken)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse_PageTokenChange: %d", fp.selector))
		}
	}
	return
}

func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*WatchPortForwardingServicesResponse_PageTokenChange))
}

// GetSingle returns value pointed by specific field of from source WatchPortForwardingServicesResponse_PageTokenChange
func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) GetSingle(source *WatchPortForwardingServicesResponse_PageTokenChange) (interface{}, bool) {
	switch fp.selector {
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		res := source.GetPrevPageToken()
		return res, res != nil
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		res := source.GetNextPageToken()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*WatchPortForwardingServicesResponse_PageTokenChange))
}

// GetDefault returns a default value of the field type
func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return (*port_forwarding_service.PagerCursor)(nil)
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return (*port_forwarding_service.PagerCursor)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) ClearValue(item *WatchPortForwardingServicesResponse_PageTokenChange) {
	if item != nil {
		switch fp.selector {
		case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
			item.PrevPageToken = nil
		case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
			item.NextPageToken = nil
		default:
			panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse_PageTokenChange: %d", fp.selector))
		}
	}
}

func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*WatchPortForwardingServicesResponse_PageTokenChange))
}

// IsLeaf - whether field path is holds simple value
func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken ||
		fp.selector == WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken
}

func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) WithIValue(value interface{}) WatchPortForwardingServicesResponsePageTokenChange_FieldPathValue {
	switch fp.selector {
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathValue{WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PagerCursor)}
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathValue{WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) WithIArrayOfValues(values interface{}) WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov := &WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath: *fp}
	switch fp.selector {
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return &WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PagerCursor)}
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return &WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues{WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PagerCursor)}
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse_PageTokenChange: %d", fp.selector))
	}
	return fpaov
}

func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) WithIArrayItemValue(value interface{}) WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse_PageTokenChange: %d", fp.selector))
	}
}

func (fp *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// WatchPortForwardingServicesResponsePageTokenChange_FieldPathValue allows storing values for PageTokenChange fields according to their type
type WatchPortForwardingServicesResponsePageTokenChange_FieldPathValue interface {
	WatchPortForwardingServicesResponsePageTokenChange_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **WatchPortForwardingServicesResponse_PageTokenChange)
	CompareWith(*WatchPortForwardingServicesResponse_PageTokenChange) (cmp int, comparable bool)
}

func ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) (WatchPortForwardingServicesResponsePageTokenChange_FieldPathValue, error) {
	fp, err := ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path value from %s: %v", valueStr, err)
	}
	return fpv.(WatchPortForwardingServicesResponsePageTokenChange_FieldPathValue), nil
}

func MustParseWatchPortForwardingServicesResponsePageTokenChange_FieldPathValue(pathStr, valueStr string) WatchPortForwardingServicesResponsePageTokenChange_FieldPathValue {
	fpv, err := ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathValue struct {
	WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchPortForwardingServicesResponsePageTokenChange_FieldPathValue = (*WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PageTokenChange' as interface{}
func (fpv *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathValue) AsPrevPageTokenValue() (*port_forwarding_service.PagerCursor, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PagerCursor)
	return res, ok
}
func (fpv *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathValue) AsNextPageTokenValue() (*port_forwarding_service.PagerCursor, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PagerCursor)
	return res, ok
}

// SetTo stores value for selected field for object PageTokenChange
func (fpv *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathValue) SetTo(target **WatchPortForwardingServicesResponse_PageTokenChange) {
	if *target == nil {
		*target = new(WatchPortForwardingServicesResponse_PageTokenChange)
	}
	switch fpv.selector {
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		(*target).PrevPageToken = fpv.value.(*port_forwarding_service.PagerCursor)
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		(*target).NextPageToken = fpv.value.(*port_forwarding_service.PagerCursor)
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*WatchPortForwardingServicesResponse_PageTokenChange)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathValue' with the value under path in 'WatchPortForwardingServicesResponse_PageTokenChange'.
func (fpv *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathValue) CompareWith(source *WatchPortForwardingServicesResponse_PageTokenChange) (int, bool) {
	switch fpv.selector {
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		return 0, false
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for WatchPortForwardingServicesResponse_PageTokenChange: %d", fpv.selector))
	}
}

func (fpv *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*WatchPortForwardingServicesResponse_PageTokenChange))
}

// WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue allows storing single item in Path-specific values for PageTokenChange according to their type
// Present only for array (repeated) types.
type WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	WatchPortForwardingServicesResponsePageTokenChange_FieldPath
	ContainsValue(*WatchPortForwardingServicesResponse_PageTokenChange) bool
}

// ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) (WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue, error) {
	fp, err := ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue), nil
}

func MustParseWatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr string) WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue {
	fpaiv, err := ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathArrayItemValue struct {
	WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath
	value interface{}
}

var _ WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayItemValue = (*WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object WatchPortForwardingServicesResponse_PageTokenChange as interface{}
func (fpaiv *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingle(source *WatchPortForwardingServicesResponse_PageTokenChange) (interface{}, bool) {
	return nil, false
}

func (fpaiv *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*WatchPortForwardingServicesResponse_PageTokenChange))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PageTokenChange'
func (fpaiv *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathArrayItemValue) ContainsValue(source *WatchPortForwardingServicesResponse_PageTokenChange) bool {
	slice := fpaiv.WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayOfValues allows storing slice of values for PageTokenChange fields according to their type
type WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	WatchPortForwardingServicesResponsePageTokenChange_FieldPath
}

func ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) (WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayOfValues, error) {
	fp, err := ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PageTokenChange field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayOfValues), nil
}

func MustParseWatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr string) WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayOfValues {
	fpaov, err := ParseWatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues struct {
	WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath
	values interface{}
}

var _ WatchPortForwardingServicesResponsePageTokenChange_FieldPathArrayOfValues = (*WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken:
		for _, v := range fpaov.values.([]*port_forwarding_service.PagerCursor) {
			values = append(values, v)
		}
	case WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken:
		for _, v := range fpaov.values.([]*port_forwarding_service.PagerCursor) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsPrevPageTokenArrayOfValues() ([]*port_forwarding_service.PagerCursor, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PagerCursor)
	return res, ok
}
func (fpaov *WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPathArrayOfValues) AsNextPageTokenArrayOfValues() ([]*port_forwarding_service.PagerCursor, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PagerCursor)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type CreatePortForwardingServiceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() CreatePortForwardingServiceRequest_FieldPathSelector
	Get(source *CreatePortForwardingServiceRequest) []interface{}
	GetSingle(source *CreatePortForwardingServiceRequest) (interface{}, bool)
	ClearValue(item *CreatePortForwardingServiceRequest)

	// Those methods build corresponding CreatePortForwardingServiceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) CreatePortForwardingServiceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) CreatePortForwardingServiceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) CreatePortForwardingServiceRequest_FieldPathArrayItemValue
}

type CreatePortForwardingServiceRequest_FieldPathSelector int32

const (
	CreatePortForwardingServiceRequest_FieldPathSelectorParent                CreatePortForwardingServiceRequest_FieldPathSelector = 0
	CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService CreatePortForwardingServiceRequest_FieldPathSelector = 1
)

func (s CreatePortForwardingServiceRequest_FieldPathSelector) String() string {
	switch s {
	case CreatePortForwardingServiceRequest_FieldPathSelectorParent:
		return "parent"
	case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		return "port_forwarding_service"
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", s))
	}
}

func BuildCreatePortForwardingServiceRequest_FieldPath(fp gotenobject.RawFieldPath) (CreatePortForwardingServiceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object CreatePortForwardingServiceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "parent":
			return &CreatePortForwardingServiceRequest_FieldTerminalPath{selector: CreatePortForwardingServiceRequest_FieldPathSelectorParent}, nil
		case "port_forwarding_service", "portForwardingService", "port-forwarding-service":
			return &CreatePortForwardingServiceRequest_FieldTerminalPath{selector: CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService}, nil
		}
	} else {
		switch fp[0] {
		case "port_forwarding_service", "portForwardingService", "port-forwarding-service":
			if subpath, err := port_forwarding_service.BuildPortForwardingService_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &CreatePortForwardingServiceRequest_FieldSubPath{selector: CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object CreatePortForwardingServiceRequest", fp)
}

func ParseCreatePortForwardingServiceRequest_FieldPath(rawField string) (CreatePortForwardingServiceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildCreatePortForwardingServiceRequest_FieldPath(fp)
}

func MustParseCreatePortForwardingServiceRequest_FieldPath(rawField string) CreatePortForwardingServiceRequest_FieldPath {
	fp, err := ParseCreatePortForwardingServiceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type CreatePortForwardingServiceRequest_FieldTerminalPath struct {
	selector CreatePortForwardingServiceRequest_FieldPathSelector
}

var _ CreatePortForwardingServiceRequest_FieldPath = (*CreatePortForwardingServiceRequest_FieldTerminalPath)(nil)

func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) Selector() CreatePortForwardingServiceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source CreatePortForwardingServiceRequest
func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) Get(source *CreatePortForwardingServiceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case CreatePortForwardingServiceRequest_FieldPathSelectorParent:
			if source.Parent != nil {
				values = append(values, source.Parent)
			}
		case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
			if source.PortForwardingService != nil {
				values = append(values, source.PortForwardingService)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*CreatePortForwardingServiceRequest))
}

// GetSingle returns value pointed by specific field of from source CreatePortForwardingServiceRequest
func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) GetSingle(source *CreatePortForwardingServiceRequest) (interface{}, bool) {
	switch fp.selector {
	case CreatePortForwardingServiceRequest_FieldPathSelectorParent:
		res := source.GetParent()
		return res, res != nil
	case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		res := source.GetPortForwardingService()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*CreatePortForwardingServiceRequest))
}

// GetDefault returns a default value of the field type
func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case CreatePortForwardingServiceRequest_FieldPathSelectorParent:
		return (*port_forwarding_service.ParentReference)(nil)
	case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		return (*port_forwarding_service.PortForwardingService)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) ClearValue(item *CreatePortForwardingServiceRequest) {
	if item != nil {
		switch fp.selector {
		case CreatePortForwardingServiceRequest_FieldPathSelectorParent:
			item.Parent = nil
		case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
			item.PortForwardingService = nil
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fp.selector))
		}
	}
}

func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*CreatePortForwardingServiceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == CreatePortForwardingServiceRequest_FieldPathSelectorParent
}

func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) WithIValue(value interface{}) CreatePortForwardingServiceRequest_FieldPathValue {
	switch fp.selector {
	case CreatePortForwardingServiceRequest_FieldPathSelectorParent:
		return &CreatePortForwardingServiceRequest_FieldTerminalPathValue{CreatePortForwardingServiceRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.ParentReference)}
	case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		return &CreatePortForwardingServiceRequest_FieldTerminalPathValue{CreatePortForwardingServiceRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PortForwardingService)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) CreatePortForwardingServiceRequest_FieldPathArrayOfValues {
	fpaov := &CreatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues{CreatePortForwardingServiceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case CreatePortForwardingServiceRequest_FieldPathSelectorParent:
		return &CreatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues{CreatePortForwardingServiceRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.ParentReference)}
	case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		return &CreatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues{CreatePortForwardingServiceRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PortForwardingService)}
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) CreatePortForwardingServiceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *CreatePortForwardingServiceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type CreatePortForwardingServiceRequest_FieldSubPath struct {
	selector CreatePortForwardingServiceRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ CreatePortForwardingServiceRequest_FieldPath = (*CreatePortForwardingServiceRequest_FieldSubPath)(nil)

func (fps *CreatePortForwardingServiceRequest_FieldSubPath) Selector() CreatePortForwardingServiceRequest_FieldPathSelector {
	return fps.selector
}
func (fps *CreatePortForwardingServiceRequest_FieldSubPath) AsPortForwardingServiceSubPath() (port_forwarding_service.PortForwardingService_FieldPath, bool) {
	res, ok := fps.subPath.(port_forwarding_service.PortForwardingService_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *CreatePortForwardingServiceRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *CreatePortForwardingServiceRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source CreatePortForwardingServiceRequest
func (fps *CreatePortForwardingServiceRequest_FieldSubPath) Get(source *CreatePortForwardingServiceRequest) (values []interface{}) {
	if asPortForwardingServiceFieldPath, ok := fps.AsPortForwardingServiceSubPath(); ok {
		values = append(values, asPortForwardingServiceFieldPath.Get(source.GetPortForwardingService())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fps.selector))
	}
	return
}

func (fps *CreatePortForwardingServiceRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*CreatePortForwardingServiceRequest))
}

// GetSingle returns value of selected field from source CreatePortForwardingServiceRequest
func (fps *CreatePortForwardingServiceRequest_FieldSubPath) GetSingle(source *CreatePortForwardingServiceRequest) (interface{}, bool) {
	switch fps.selector {
	case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		if source.GetPortForwardingService() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPortForwardingService())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fps.selector))
	}
}

func (fps *CreatePortForwardingServiceRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*CreatePortForwardingServiceRequest))
}

// GetDefault returns a default value of the field type
func (fps *CreatePortForwardingServiceRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *CreatePortForwardingServiceRequest_FieldSubPath) ClearValue(item *CreatePortForwardingServiceRequest) {
	if item != nil {
		switch fps.selector {
		case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
			fps.subPath.ClearValueRaw(item.PortForwardingService)
		default:
			panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fps.selector))
		}
	}
}

func (fps *CreatePortForwardingServiceRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*CreatePortForwardingServiceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *CreatePortForwardingServiceRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *CreatePortForwardingServiceRequest_FieldSubPath) WithIValue(value interface{}) CreatePortForwardingServiceRequest_FieldPathValue {
	return &CreatePortForwardingServiceRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *CreatePortForwardingServiceRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *CreatePortForwardingServiceRequest_FieldSubPath) WithIArrayOfValues(values interface{}) CreatePortForwardingServiceRequest_FieldPathArrayOfValues {
	return &CreatePortForwardingServiceRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *CreatePortForwardingServiceRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *CreatePortForwardingServiceRequest_FieldSubPath) WithIArrayItemValue(value interface{}) CreatePortForwardingServiceRequest_FieldPathArrayItemValue {
	return &CreatePortForwardingServiceRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *CreatePortForwardingServiceRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// CreatePortForwardingServiceRequest_FieldPathValue allows storing values for CreatePortForwardingServiceRequest fields according to their type
type CreatePortForwardingServiceRequest_FieldPathValue interface {
	CreatePortForwardingServiceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **CreatePortForwardingServiceRequest)
	CompareWith(*CreatePortForwardingServiceRequest) (cmp int, comparable bool)
}

func ParseCreatePortForwardingServiceRequest_FieldPathValue(pathStr, valueStr string) (CreatePortForwardingServiceRequest_FieldPathValue, error) {
	fp, err := ParseCreatePortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePortForwardingServiceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(CreatePortForwardingServiceRequest_FieldPathValue), nil
}

func MustParseCreatePortForwardingServiceRequest_FieldPathValue(pathStr, valueStr string) CreatePortForwardingServiceRequest_FieldPathValue {
	fpv, err := ParseCreatePortForwardingServiceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type CreatePortForwardingServiceRequest_FieldTerminalPathValue struct {
	CreatePortForwardingServiceRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePortForwardingServiceRequest_FieldPathValue = (*CreatePortForwardingServiceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CreatePortForwardingServiceRequest' as interface{}
func (fpv *CreatePortForwardingServiceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *CreatePortForwardingServiceRequest_FieldTerminalPathValue) AsParentValue() (*port_forwarding_service.ParentReference, bool) {
	res, ok := fpv.value.(*port_forwarding_service.ParentReference)
	return res, ok
}
func (fpv *CreatePortForwardingServiceRequest_FieldTerminalPathValue) AsPortForwardingServiceValue() (*port_forwarding_service.PortForwardingService, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PortForwardingService)
	return res, ok
}

// SetTo stores value for selected field for object CreatePortForwardingServiceRequest
func (fpv *CreatePortForwardingServiceRequest_FieldTerminalPathValue) SetTo(target **CreatePortForwardingServiceRequest) {
	if *target == nil {
		*target = new(CreatePortForwardingServiceRequest)
	}
	switch fpv.selector {
	case CreatePortForwardingServiceRequest_FieldPathSelectorParent:
		(*target).Parent = fpv.value.(*port_forwarding_service.ParentReference)
	case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		(*target).PortForwardingService = fpv.value.(*port_forwarding_service.PortForwardingService)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePortForwardingServiceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePortForwardingServiceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'CreatePortForwardingServiceRequest_FieldTerminalPathValue' with the value under path in 'CreatePortForwardingServiceRequest'.
func (fpv *CreatePortForwardingServiceRequest_FieldTerminalPathValue) CompareWith(source *CreatePortForwardingServiceRequest) (int, bool) {
	switch fpv.selector {
	case CreatePortForwardingServiceRequest_FieldPathSelectorParent:
		leftValue := fpv.value.(*port_forwarding_service.ParentReference)
		rightValue := source.GetParent()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fpv.selector))
	}
}

func (fpv *CreatePortForwardingServiceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*CreatePortForwardingServiceRequest))
}

type CreatePortForwardingServiceRequest_FieldSubPathValue struct {
	CreatePortForwardingServiceRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ CreatePortForwardingServiceRequest_FieldPathValue = (*CreatePortForwardingServiceRequest_FieldSubPathValue)(nil)

func (fpvs *CreatePortForwardingServiceRequest_FieldSubPathValue) AsPortForwardingServicePathValue() (port_forwarding_service.PortForwardingService_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(port_forwarding_service.PortForwardingService_FieldPathValue)
	return res, ok
}

func (fpvs *CreatePortForwardingServiceRequest_FieldSubPathValue) SetTo(target **CreatePortForwardingServiceRequest) {
	if *target == nil {
		*target = new(CreatePortForwardingServiceRequest)
	}
	switch fpvs.Selector() {
	case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		fpvs.subPathValue.(port_forwarding_service.PortForwardingService_FieldPathValue).SetTo(&(*target).PortForwardingService)
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePortForwardingServiceRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*CreatePortForwardingServiceRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *CreatePortForwardingServiceRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *CreatePortForwardingServiceRequest_FieldSubPathValue) CompareWith(source *CreatePortForwardingServiceRequest) (int, bool) {
	switch fpvs.Selector() {
	case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		return fpvs.subPathValue.(port_forwarding_service.PortForwardingService_FieldPathValue).CompareWith(source.GetPortForwardingService())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *CreatePortForwardingServiceRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*CreatePortForwardingServiceRequest))
}

// CreatePortForwardingServiceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for CreatePortForwardingServiceRequest according to their type
// Present only for array (repeated) types.
type CreatePortForwardingServiceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	CreatePortForwardingServiceRequest_FieldPath
	ContainsValue(*CreatePortForwardingServiceRequest) bool
}

// ParseCreatePortForwardingServiceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseCreatePortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (CreatePortForwardingServiceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseCreatePortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePortForwardingServiceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(CreatePortForwardingServiceRequest_FieldPathArrayItemValue), nil
}

func MustParseCreatePortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) CreatePortForwardingServiceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseCreatePortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type CreatePortForwardingServiceRequest_FieldTerminalPathArrayItemValue struct {
	CreatePortForwardingServiceRequest_FieldTerminalPath
	value interface{}
}

var _ CreatePortForwardingServiceRequest_FieldPathArrayItemValue = (*CreatePortForwardingServiceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object CreatePortForwardingServiceRequest as interface{}
func (fpaiv *CreatePortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *CreatePortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *CreatePortForwardingServiceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *CreatePortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*CreatePortForwardingServiceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePortForwardingServiceRequest'
func (fpaiv *CreatePortForwardingServiceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *CreatePortForwardingServiceRequest) bool {
	slice := fpaiv.CreatePortForwardingServiceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type CreatePortForwardingServiceRequest_FieldSubPathArrayItemValue struct {
	CreatePortForwardingServiceRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *CreatePortForwardingServiceRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *CreatePortForwardingServiceRequest_FieldSubPathArrayItemValue) AsPortForwardingServicePathItemValue() (port_forwarding_service.PortForwardingService_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(port_forwarding_service.PortForwardingService_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CreatePortForwardingServiceRequest'
func (fpaivs *CreatePortForwardingServiceRequest_FieldSubPathArrayItemValue) ContainsValue(source *CreatePortForwardingServiceRequest) bool {
	switch fpaivs.Selector() {
	case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		return fpaivs.subPathItemValue.(port_forwarding_service.PortForwardingService_FieldPathArrayItemValue).ContainsValue(source.GetPortForwardingService())
	default:
		panic(fmt.Sprintf("Invalid selector for CreatePortForwardingServiceRequest: %d", fpaivs.Selector()))
	}
}

// CreatePortForwardingServiceRequest_FieldPathArrayOfValues allows storing slice of values for CreatePortForwardingServiceRequest fields according to their type
type CreatePortForwardingServiceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	CreatePortForwardingServiceRequest_FieldPath
}

func ParseCreatePortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (CreatePortForwardingServiceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseCreatePortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CreatePortForwardingServiceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(CreatePortForwardingServiceRequest_FieldPathArrayOfValues), nil
}

func MustParseCreatePortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) CreatePortForwardingServiceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseCreatePortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type CreatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues struct {
	CreatePortForwardingServiceRequest_FieldTerminalPath
	values interface{}
}

var _ CreatePortForwardingServiceRequest_FieldPathArrayOfValues = (*CreatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *CreatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case CreatePortForwardingServiceRequest_FieldPathSelectorParent:
		for _, v := range fpaov.values.([]*port_forwarding_service.ParentReference) {
			values = append(values, v)
		}
	case CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		for _, v := range fpaov.values.([]*port_forwarding_service.PortForwardingService) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *CreatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues) AsParentArrayOfValues() ([]*port_forwarding_service.ParentReference, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.ParentReference)
	return res, ok
}
func (fpaov *CreatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues) AsPortForwardingServiceArrayOfValues() ([]*port_forwarding_service.PortForwardingService, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PortForwardingService)
	return res, ok
}

type CreatePortForwardingServiceRequest_FieldSubPathArrayOfValues struct {
	CreatePortForwardingServiceRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ CreatePortForwardingServiceRequest_FieldPathArrayOfValues = (*CreatePortForwardingServiceRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *CreatePortForwardingServiceRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *CreatePortForwardingServiceRequest_FieldSubPathArrayOfValues) AsPortForwardingServicePathArrayOfValues() (port_forwarding_service.PortForwardingService_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(port_forwarding_service.PortForwardingService_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdatePortForwardingServiceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdatePortForwardingServiceRequest_FieldPathSelector
	Get(source *UpdatePortForwardingServiceRequest) []interface{}
	GetSingle(source *UpdatePortForwardingServiceRequest) (interface{}, bool)
	ClearValue(item *UpdatePortForwardingServiceRequest)

	// Those methods build corresponding UpdatePortForwardingServiceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdatePortForwardingServiceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdatePortForwardingServiceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdatePortForwardingServiceRequest_FieldPathArrayItemValue
}

type UpdatePortForwardingServiceRequest_FieldPathSelector int32

const (
	UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService UpdatePortForwardingServiceRequest_FieldPathSelector = 0
	UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask            UpdatePortForwardingServiceRequest_FieldPathSelector = 1
	UpdatePortForwardingServiceRequest_FieldPathSelectorCas                   UpdatePortForwardingServiceRequest_FieldPathSelector = 2
)

func (s UpdatePortForwardingServiceRequest_FieldPathSelector) String() string {
	switch s {
	case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		return "port_forwarding_service"
	case UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask:
		return "update_mask"
	case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
		return "cas"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", s))
	}
}

func BuildUpdatePortForwardingServiceRequest_FieldPath(fp gotenobject.RawFieldPath) (UpdatePortForwardingServiceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdatePortForwardingServiceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "port_forwarding_service", "portForwardingService", "port-forwarding-service":
			return &UpdatePortForwardingServiceRequest_FieldTerminalPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService}, nil
		case "update_mask", "updateMask", "update-mask":
			return &UpdatePortForwardingServiceRequest_FieldTerminalPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask}, nil
		case "cas":
			return &UpdatePortForwardingServiceRequest_FieldTerminalPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorCas}, nil
		}
	} else {
		switch fp[0] {
		case "port_forwarding_service", "portForwardingService", "port-forwarding-service":
			if subpath, err := port_forwarding_service.BuildPortForwardingService_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePortForwardingServiceRequest_FieldSubPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService, subPath: subpath}, nil
			}
		case "cas":
			if subpath, err := BuildUpdatePortForwardingServiceRequestCAS_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePortForwardingServiceRequest_FieldSubPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorCas, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdatePortForwardingServiceRequest", fp)
}

func ParseUpdatePortForwardingServiceRequest_FieldPath(rawField string) (UpdatePortForwardingServiceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdatePortForwardingServiceRequest_FieldPath(fp)
}

func MustParseUpdatePortForwardingServiceRequest_FieldPath(rawField string) UpdatePortForwardingServiceRequest_FieldPath {
	fp, err := ParseUpdatePortForwardingServiceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdatePortForwardingServiceRequest_FieldTerminalPath struct {
	selector UpdatePortForwardingServiceRequest_FieldPathSelector
}

var _ UpdatePortForwardingServiceRequest_FieldPath = (*UpdatePortForwardingServiceRequest_FieldTerminalPath)(nil)

func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) Selector() UpdatePortForwardingServiceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdatePortForwardingServiceRequest
func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) Get(source *UpdatePortForwardingServiceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
			if source.PortForwardingService != nil {
				values = append(values, source.PortForwardingService)
			}
		case UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask:
			if source.UpdateMask != nil {
				values = append(values, source.UpdateMask)
			}
		case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
			if source.Cas != nil {
				values = append(values, source.Cas)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdatePortForwardingServiceRequest))
}

// GetSingle returns value pointed by specific field of from source UpdatePortForwardingServiceRequest
func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) GetSingle(source *UpdatePortForwardingServiceRequest) (interface{}, bool) {
	switch fp.selector {
	case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		res := source.GetPortForwardingService()
		return res, res != nil
	case UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask:
		res := source.GetUpdateMask()
		return res, res != nil
	case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
		res := source.GetCas()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdatePortForwardingServiceRequest))
}

// GetDefault returns a default value of the field type
func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		return (*port_forwarding_service.PortForwardingService)(nil)
	case UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask:
		return (*port_forwarding_service.PortForwardingService_FieldMask)(nil)
	case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
		return (*UpdatePortForwardingServiceRequest_CAS)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) ClearValue(item *UpdatePortForwardingServiceRequest) {
	if item != nil {
		switch fp.selector {
		case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
			item.PortForwardingService = nil
		case UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask:
			item.UpdateMask = nil
		case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
			item.Cas = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fp.selector))
		}
	}
}

func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdatePortForwardingServiceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask
}

func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) WithIValue(value interface{}) UpdatePortForwardingServiceRequest_FieldPathValue {
	switch fp.selector {
	case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		return &UpdatePortForwardingServiceRequest_FieldTerminalPathValue{UpdatePortForwardingServiceRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PortForwardingService)}
	case UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask:
		return &UpdatePortForwardingServiceRequest_FieldTerminalPathValue{UpdatePortForwardingServiceRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PortForwardingService_FieldMask)}
	case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
		return &UpdatePortForwardingServiceRequest_FieldTerminalPathValue{UpdatePortForwardingServiceRequest_FieldTerminalPath: *fp, value: value.(*UpdatePortForwardingServiceRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdatePortForwardingServiceRequest_FieldPathArrayOfValues {
	fpaov := &UpdatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues{UpdatePortForwardingServiceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		return &UpdatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues{UpdatePortForwardingServiceRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PortForwardingService)}
	case UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask:
		return &UpdatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues{UpdatePortForwardingServiceRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PortForwardingService_FieldMask)}
	case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
		return &UpdatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues{UpdatePortForwardingServiceRequest_FieldTerminalPath: *fp, values: values.([]*UpdatePortForwardingServiceRequest_CAS)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdatePortForwardingServiceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *UpdatePortForwardingServiceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdatePortForwardingServiceRequest_FieldSubPath struct {
	selector UpdatePortForwardingServiceRequest_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdatePortForwardingServiceRequest_FieldPath = (*UpdatePortForwardingServiceRequest_FieldSubPath)(nil)

func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) Selector() UpdatePortForwardingServiceRequest_FieldPathSelector {
	return fps.selector
}
func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) AsPortForwardingServiceSubPath() (port_forwarding_service.PortForwardingService_FieldPath, bool) {
	res, ok := fps.subPath.(port_forwarding_service.PortForwardingService_FieldPath)
	return res, ok
}
func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) AsCasSubPath() (UpdatePortForwardingServiceRequestCAS_FieldPath, bool) {
	res, ok := fps.subPath.(UpdatePortForwardingServiceRequestCAS_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdatePortForwardingServiceRequest
func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) Get(source *UpdatePortForwardingServiceRequest) (values []interface{}) {
	if asPortForwardingServiceFieldPath, ok := fps.AsPortForwardingServiceSubPath(); ok {
		values = append(values, asPortForwardingServiceFieldPath.Get(source.GetPortForwardingService())...)
	} else if asCASFieldPath, ok := fps.AsCasSubPath(); ok {
		values = append(values, asCASFieldPath.Get(source.GetCas())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fps.selector))
	}
	return
}

func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdatePortForwardingServiceRequest))
}

// GetSingle returns value of selected field from source UpdatePortForwardingServiceRequest
func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) GetSingle(source *UpdatePortForwardingServiceRequest) (interface{}, bool) {
	switch fps.selector {
	case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		if source.GetPortForwardingService() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetPortForwardingService())
	case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
		if source.GetCas() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fps.selector))
	}
}

func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdatePortForwardingServiceRequest))
}

// GetDefault returns a default value of the field type
func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) ClearValue(item *UpdatePortForwardingServiceRequest) {
	if item != nil {
		switch fps.selector {
		case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
			fps.subPath.ClearValueRaw(item.PortForwardingService)
		case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
			fps.subPath.ClearValueRaw(item.Cas)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fps.selector))
		}
	}
}

func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdatePortForwardingServiceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) WithIValue(value interface{}) UpdatePortForwardingServiceRequest_FieldPathValue {
	return &UpdatePortForwardingServiceRequest_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) WithIArrayOfValues(values interface{}) UpdatePortForwardingServiceRequest_FieldPathArrayOfValues {
	return &UpdatePortForwardingServiceRequest_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) WithIArrayItemValue(value interface{}) UpdatePortForwardingServiceRequest_FieldPathArrayItemValue {
	return &UpdatePortForwardingServiceRequest_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdatePortForwardingServiceRequest_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdatePortForwardingServiceRequest_FieldPathValue allows storing values for UpdatePortForwardingServiceRequest fields according to their type
type UpdatePortForwardingServiceRequest_FieldPathValue interface {
	UpdatePortForwardingServiceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdatePortForwardingServiceRequest)
	CompareWith(*UpdatePortForwardingServiceRequest) (cmp int, comparable bool)
}

func ParseUpdatePortForwardingServiceRequest_FieldPathValue(pathStr, valueStr string) (UpdatePortForwardingServiceRequest_FieldPathValue, error) {
	fp, err := ParseUpdatePortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePortForwardingServiceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdatePortForwardingServiceRequest_FieldPathValue), nil
}

func MustParseUpdatePortForwardingServiceRequest_FieldPathValue(pathStr, valueStr string) UpdatePortForwardingServiceRequest_FieldPathValue {
	fpv, err := ParseUpdatePortForwardingServiceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdatePortForwardingServiceRequest_FieldTerminalPathValue struct {
	UpdatePortForwardingServiceRequest_FieldTerminalPath
	value interface{}
}

var _ UpdatePortForwardingServiceRequest_FieldPathValue = (*UpdatePortForwardingServiceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'UpdatePortForwardingServiceRequest' as interface{}
func (fpv *UpdatePortForwardingServiceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdatePortForwardingServiceRequest_FieldTerminalPathValue) AsPortForwardingServiceValue() (*port_forwarding_service.PortForwardingService, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PortForwardingService)
	return res, ok
}
func (fpv *UpdatePortForwardingServiceRequest_FieldTerminalPathValue) AsUpdateMaskValue() (*port_forwarding_service.PortForwardingService_FieldMask, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PortForwardingService_FieldMask)
	return res, ok
}
func (fpv *UpdatePortForwardingServiceRequest_FieldTerminalPathValue) AsCasValue() (*UpdatePortForwardingServiceRequest_CAS, bool) {
	res, ok := fpv.value.(*UpdatePortForwardingServiceRequest_CAS)
	return res, ok
}

// SetTo stores value for selected field for object UpdatePortForwardingServiceRequest
func (fpv *UpdatePortForwardingServiceRequest_FieldTerminalPathValue) SetTo(target **UpdatePortForwardingServiceRequest) {
	if *target == nil {
		*target = new(UpdatePortForwardingServiceRequest)
	}
	switch fpv.selector {
	case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		(*target).PortForwardingService = fpv.value.(*port_forwarding_service.PortForwardingService)
	case UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask:
		(*target).UpdateMask = fpv.value.(*port_forwarding_service.PortForwardingService_FieldMask)
	case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
		(*target).Cas = fpv.value.(*UpdatePortForwardingServiceRequest_CAS)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fpv.selector))
	}
}

func (fpv *UpdatePortForwardingServiceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePortForwardingServiceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdatePortForwardingServiceRequest_FieldTerminalPathValue' with the value under path in 'UpdatePortForwardingServiceRequest'.
func (fpv *UpdatePortForwardingServiceRequest_FieldTerminalPathValue) CompareWith(source *UpdatePortForwardingServiceRequest) (int, bool) {
	switch fpv.selector {
	case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		return 0, false
	case UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask:
		return 0, false
	case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fpv.selector))
	}
}

func (fpv *UpdatePortForwardingServiceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdatePortForwardingServiceRequest))
}

type UpdatePortForwardingServiceRequest_FieldSubPathValue struct {
	UpdatePortForwardingServiceRequest_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdatePortForwardingServiceRequest_FieldPathValue = (*UpdatePortForwardingServiceRequest_FieldSubPathValue)(nil)

func (fpvs *UpdatePortForwardingServiceRequest_FieldSubPathValue) AsPortForwardingServicePathValue() (port_forwarding_service.PortForwardingService_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(port_forwarding_service.PortForwardingService_FieldPathValue)
	return res, ok
}
func (fpvs *UpdatePortForwardingServiceRequest_FieldSubPathValue) AsCasPathValue() (UpdatePortForwardingServiceRequestCAS_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(UpdatePortForwardingServiceRequestCAS_FieldPathValue)
	return res, ok
}

func (fpvs *UpdatePortForwardingServiceRequest_FieldSubPathValue) SetTo(target **UpdatePortForwardingServiceRequest) {
	if *target == nil {
		*target = new(UpdatePortForwardingServiceRequest)
	}
	switch fpvs.Selector() {
	case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		fpvs.subPathValue.(port_forwarding_service.PortForwardingService_FieldPathValue).SetTo(&(*target).PortForwardingService)
	case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
		fpvs.subPathValue.(UpdatePortForwardingServiceRequestCAS_FieldPathValue).SetTo(&(*target).Cas)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePortForwardingServiceRequest_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePortForwardingServiceRequest)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdatePortForwardingServiceRequest_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdatePortForwardingServiceRequest_FieldSubPathValue) CompareWith(source *UpdatePortForwardingServiceRequest) (int, bool) {
	switch fpvs.Selector() {
	case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		return fpvs.subPathValue.(port_forwarding_service.PortForwardingService_FieldPathValue).CompareWith(source.GetPortForwardingService())
	case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
		return fpvs.subPathValue.(UpdatePortForwardingServiceRequestCAS_FieldPathValue).CompareWith(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePortForwardingServiceRequest_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdatePortForwardingServiceRequest))
}

// UpdatePortForwardingServiceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for UpdatePortForwardingServiceRequest according to their type
// Present only for array (repeated) types.
type UpdatePortForwardingServiceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdatePortForwardingServiceRequest_FieldPath
	ContainsValue(*UpdatePortForwardingServiceRequest) bool
}

// ParseUpdatePortForwardingServiceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdatePortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (UpdatePortForwardingServiceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdatePortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePortForwardingServiceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdatePortForwardingServiceRequest_FieldPathArrayItemValue), nil
}

func MustParseUpdatePortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) UpdatePortForwardingServiceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdatePortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdatePortForwardingServiceRequest_FieldTerminalPathArrayItemValue struct {
	UpdatePortForwardingServiceRequest_FieldTerminalPath
	value interface{}
}

var _ UpdatePortForwardingServiceRequest_FieldPathArrayItemValue = (*UpdatePortForwardingServiceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdatePortForwardingServiceRequest as interface{}
func (fpaiv *UpdatePortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdatePortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *UpdatePortForwardingServiceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdatePortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdatePortForwardingServiceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdatePortForwardingServiceRequest'
func (fpaiv *UpdatePortForwardingServiceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdatePortForwardingServiceRequest) bool {
	slice := fpaiv.UpdatePortForwardingServiceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdatePortForwardingServiceRequest_FieldSubPathArrayItemValue struct {
	UpdatePortForwardingServiceRequest_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdatePortForwardingServiceRequest_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdatePortForwardingServiceRequest_FieldSubPathArrayItemValue) AsPortForwardingServicePathItemValue() (port_forwarding_service.PortForwardingService_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(port_forwarding_service.PortForwardingService_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *UpdatePortForwardingServiceRequest_FieldSubPathArrayItemValue) AsCasPathItemValue() (UpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(UpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'UpdatePortForwardingServiceRequest'
func (fpaivs *UpdatePortForwardingServiceRequest_FieldSubPathArrayItemValue) ContainsValue(source *UpdatePortForwardingServiceRequest) bool {
	switch fpaivs.Selector() {
	case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		return fpaivs.subPathItemValue.(port_forwarding_service.PortForwardingService_FieldPathArrayItemValue).ContainsValue(source.GetPortForwardingService())
	case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
		return fpaivs.subPathItemValue.(UpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue).ContainsValue(source.GetCas())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest: %d", fpaivs.Selector()))
	}
}

// UpdatePortForwardingServiceRequest_FieldPathArrayOfValues allows storing slice of values for UpdatePortForwardingServiceRequest fields according to their type
type UpdatePortForwardingServiceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdatePortForwardingServiceRequest_FieldPath
}

func ParseUpdatePortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdatePortForwardingServiceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdatePortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing UpdatePortForwardingServiceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdatePortForwardingServiceRequest_FieldPathArrayOfValues), nil
}

func MustParseUpdatePortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) UpdatePortForwardingServiceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseUpdatePortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues struct {
	UpdatePortForwardingServiceRequest_FieldTerminalPath
	values interface{}
}

var _ UpdatePortForwardingServiceRequest_FieldPathArrayOfValues = (*UpdatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService:
		for _, v := range fpaov.values.([]*port_forwarding_service.PortForwardingService) {
			values = append(values, v)
		}
	case UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask:
		for _, v := range fpaov.values.([]*port_forwarding_service.PortForwardingService_FieldMask) {
			values = append(values, v)
		}
	case UpdatePortForwardingServiceRequest_FieldPathSelectorCas:
		for _, v := range fpaov.values.([]*UpdatePortForwardingServiceRequest_CAS) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues) AsPortForwardingServiceArrayOfValues() ([]*port_forwarding_service.PortForwardingService, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PortForwardingService)
	return res, ok
}
func (fpaov *UpdatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues) AsUpdateMaskArrayOfValues() ([]*port_forwarding_service.PortForwardingService_FieldMask, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PortForwardingService_FieldMask)
	return res, ok
}
func (fpaov *UpdatePortForwardingServiceRequest_FieldTerminalPathArrayOfValues) AsCasArrayOfValues() ([]*UpdatePortForwardingServiceRequest_CAS, bool) {
	res, ok := fpaov.values.([]*UpdatePortForwardingServiceRequest_CAS)
	return res, ok
}

type UpdatePortForwardingServiceRequest_FieldSubPathArrayOfValues struct {
	UpdatePortForwardingServiceRequest_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdatePortForwardingServiceRequest_FieldPathArrayOfValues = (*UpdatePortForwardingServiceRequest_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdatePortForwardingServiceRequest_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdatePortForwardingServiceRequest_FieldSubPathArrayOfValues) AsPortForwardingServicePathArrayOfValues() (port_forwarding_service.PortForwardingService_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(port_forwarding_service.PortForwardingService_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *UpdatePortForwardingServiceRequest_FieldSubPathArrayOfValues) AsCasPathArrayOfValues() (UpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(UpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type UpdatePortForwardingServiceRequestCAS_FieldPath interface {
	gotenobject.FieldPath
	Selector() UpdatePortForwardingServiceRequestCAS_FieldPathSelector
	Get(source *UpdatePortForwardingServiceRequest_CAS) []interface{}
	GetSingle(source *UpdatePortForwardingServiceRequest_CAS) (interface{}, bool)
	ClearValue(item *UpdatePortForwardingServiceRequest_CAS)

	// Those methods build corresponding UpdatePortForwardingServiceRequestCAS_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) UpdatePortForwardingServiceRequestCAS_FieldPathValue
	WithIArrayOfValues(values interface{}) UpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) UpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue
}

type UpdatePortForwardingServiceRequestCAS_FieldPathSelector int32

const (
	UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState UpdatePortForwardingServiceRequestCAS_FieldPathSelector = 0
	UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask        UpdatePortForwardingServiceRequestCAS_FieldPathSelector = 1
)

func (s UpdatePortForwardingServiceRequestCAS_FieldPathSelector) String() string {
	switch s {
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
		return "conditional_state"
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask:
		return "field_mask"
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", s))
	}
}

func BuildUpdatePortForwardingServiceRequestCAS_FieldPath(fp gotenobject.RawFieldPath) (UpdatePortForwardingServiceRequestCAS_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object UpdatePortForwardingServiceRequest_CAS")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			return &UpdatePortForwardingServiceRequestCAS_FieldTerminalPath{selector: UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState}, nil
		case "field_mask", "fieldMask", "field-mask":
			return &UpdatePortForwardingServiceRequestCAS_FieldTerminalPath{selector: UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask}, nil
		}
	} else {
		switch fp[0] {
		case "conditional_state", "conditionalState", "conditional-state":
			if subpath, err := port_forwarding_service.BuildPortForwardingService_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &UpdatePortForwardingServiceRequestCAS_FieldSubPath{selector: UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object UpdatePortForwardingServiceRequest_CAS", fp)
}

func ParseUpdatePortForwardingServiceRequestCAS_FieldPath(rawField string) (UpdatePortForwardingServiceRequestCAS_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildUpdatePortForwardingServiceRequestCAS_FieldPath(fp)
}

func MustParseUpdatePortForwardingServiceRequestCAS_FieldPath(rawField string) UpdatePortForwardingServiceRequestCAS_FieldPath {
	fp, err := ParseUpdatePortForwardingServiceRequestCAS_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type UpdatePortForwardingServiceRequestCAS_FieldTerminalPath struct {
	selector UpdatePortForwardingServiceRequestCAS_FieldPathSelector
}

var _ UpdatePortForwardingServiceRequestCAS_FieldPath = (*UpdatePortForwardingServiceRequestCAS_FieldTerminalPath)(nil)

func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) Selector() UpdatePortForwardingServiceRequestCAS_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source UpdatePortForwardingServiceRequest_CAS
func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) Get(source *UpdatePortForwardingServiceRequest_CAS) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
			if source.ConditionalState != nil {
				values = append(values, source.ConditionalState)
			}
		case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask:
			if source.FieldMask != nil {
				values = append(values, source.FieldMask)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fp.selector))
		}
	}
	return
}

func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*UpdatePortForwardingServiceRequest_CAS))
}

// GetSingle returns value pointed by specific field of from source UpdatePortForwardingServiceRequest_CAS
func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) GetSingle(source *UpdatePortForwardingServiceRequest_CAS) (interface{}, bool) {
	switch fp.selector {
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
		res := source.GetConditionalState()
		return res, res != nil
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask:
		res := source.GetFieldMask()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*UpdatePortForwardingServiceRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
		return (*port_forwarding_service.PortForwardingService)(nil)
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask:
		return (*port_forwarding_service.PortForwardingService_FieldMask)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) ClearValue(item *UpdatePortForwardingServiceRequest_CAS) {
	if item != nil {
		switch fp.selector {
		case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
			item.ConditionalState = nil
		case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask:
			item.FieldMask = nil
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fp.selector))
		}
	}
}

func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*UpdatePortForwardingServiceRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask
}

func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) WithIValue(value interface{}) UpdatePortForwardingServiceRequestCAS_FieldPathValue {
	switch fp.selector {
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
		return &UpdatePortForwardingServiceRequestCAS_FieldTerminalPathValue{UpdatePortForwardingServiceRequestCAS_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PortForwardingService)}
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask:
		return &UpdatePortForwardingServiceRequestCAS_FieldTerminalPathValue{UpdatePortForwardingServiceRequestCAS_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.PortForwardingService_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) WithIArrayOfValues(values interface{}) UpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues {
	fpaov := &UpdatePortForwardingServiceRequestCAS_FieldTerminalPathArrayOfValues{UpdatePortForwardingServiceRequestCAS_FieldTerminalPath: *fp}
	switch fp.selector {
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
		return &UpdatePortForwardingServiceRequestCAS_FieldTerminalPathArrayOfValues{UpdatePortForwardingServiceRequestCAS_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PortForwardingService)}
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask:
		return &UpdatePortForwardingServiceRequestCAS_FieldTerminalPathArrayOfValues{UpdatePortForwardingServiceRequestCAS_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.PortForwardingService_FieldMask)}
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fp.selector))
	}
	return fpaov
}

func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) WithIArrayItemValue(value interface{}) UpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fp.selector))
	}
}

func (fp *UpdatePortForwardingServiceRequestCAS_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type UpdatePortForwardingServiceRequestCAS_FieldSubPath struct {
	selector UpdatePortForwardingServiceRequestCAS_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ UpdatePortForwardingServiceRequestCAS_FieldPath = (*UpdatePortForwardingServiceRequestCAS_FieldSubPath)(nil)

func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) Selector() UpdatePortForwardingServiceRequestCAS_FieldPathSelector {
	return fps.selector
}
func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) AsConditionalStateSubPath() (port_forwarding_service.PortForwardingService_FieldPath, bool) {
	res, ok := fps.subPath.(port_forwarding_service.PortForwardingService_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source UpdatePortForwardingServiceRequest_CAS
func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) Get(source *UpdatePortForwardingServiceRequest_CAS) (values []interface{}) {
	if asPortForwardingServiceFieldPath, ok := fps.AsConditionalStateSubPath(); ok {
		values = append(values, asPortForwardingServiceFieldPath.Get(source.GetConditionalState())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fps.selector))
	}
	return
}

func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*UpdatePortForwardingServiceRequest_CAS))
}

// GetSingle returns value of selected field from source UpdatePortForwardingServiceRequest_CAS
func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) GetSingle(source *UpdatePortForwardingServiceRequest_CAS) (interface{}, bool) {
	switch fps.selector {
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
		if source.GetConditionalState() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fps.selector))
	}
}

func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*UpdatePortForwardingServiceRequest_CAS))
}

// GetDefault returns a default value of the field type
func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) ClearValue(item *UpdatePortForwardingServiceRequest_CAS) {
	if item != nil {
		switch fps.selector {
		case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
			fps.subPath.ClearValueRaw(item.ConditionalState)
		default:
			panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fps.selector))
		}
	}
}

func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*UpdatePortForwardingServiceRequest_CAS))
}

// IsLeaf - whether field path is holds simple value
func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) WithIValue(value interface{}) UpdatePortForwardingServiceRequestCAS_FieldPathValue {
	return &UpdatePortForwardingServiceRequestCAS_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) WithIArrayOfValues(values interface{}) UpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues {
	return &UpdatePortForwardingServiceRequestCAS_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) WithIArrayItemValue(value interface{}) UpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue {
	return &UpdatePortForwardingServiceRequestCAS_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *UpdatePortForwardingServiceRequestCAS_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// UpdatePortForwardingServiceRequestCAS_FieldPathValue allows storing values for CAS fields according to their type
type UpdatePortForwardingServiceRequestCAS_FieldPathValue interface {
	UpdatePortForwardingServiceRequestCAS_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **UpdatePortForwardingServiceRequest_CAS)
	CompareWith(*UpdatePortForwardingServiceRequest_CAS) (cmp int, comparable bool)
}

func ParseUpdatePortForwardingServiceRequestCAS_FieldPathValue(pathStr, valueStr string) (UpdatePortForwardingServiceRequestCAS_FieldPathValue, error) {
	fp, err := ParseUpdatePortForwardingServiceRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path value from %s: %v", valueStr, err)
	}
	return fpv.(UpdatePortForwardingServiceRequestCAS_FieldPathValue), nil
}

func MustParseUpdatePortForwardingServiceRequestCAS_FieldPathValue(pathStr, valueStr string) UpdatePortForwardingServiceRequestCAS_FieldPathValue {
	fpv, err := ParseUpdatePortForwardingServiceRequestCAS_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type UpdatePortForwardingServiceRequestCAS_FieldTerminalPathValue struct {
	UpdatePortForwardingServiceRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdatePortForwardingServiceRequestCAS_FieldPathValue = (*UpdatePortForwardingServiceRequestCAS_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'CAS' as interface{}
func (fpv *UpdatePortForwardingServiceRequestCAS_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *UpdatePortForwardingServiceRequestCAS_FieldTerminalPathValue) AsConditionalStateValue() (*port_forwarding_service.PortForwardingService, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PortForwardingService)
	return res, ok
}
func (fpv *UpdatePortForwardingServiceRequestCAS_FieldTerminalPathValue) AsFieldMaskValue() (*port_forwarding_service.PortForwardingService_FieldMask, bool) {
	res, ok := fpv.value.(*port_forwarding_service.PortForwardingService_FieldMask)
	return res, ok
}

// SetTo stores value for selected field for object CAS
func (fpv *UpdatePortForwardingServiceRequestCAS_FieldTerminalPathValue) SetTo(target **UpdatePortForwardingServiceRequest_CAS) {
	if *target == nil {
		*target = new(UpdatePortForwardingServiceRequest_CAS)
	}
	switch fpv.selector {
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
		(*target).ConditionalState = fpv.value.(*port_forwarding_service.PortForwardingService)
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask:
		(*target).FieldMask = fpv.value.(*port_forwarding_service.PortForwardingService_FieldMask)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdatePortForwardingServiceRequestCAS_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePortForwardingServiceRequest_CAS)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'UpdatePortForwardingServiceRequestCAS_FieldTerminalPathValue' with the value under path in 'UpdatePortForwardingServiceRequest_CAS'.
func (fpv *UpdatePortForwardingServiceRequestCAS_FieldTerminalPathValue) CompareWith(source *UpdatePortForwardingServiceRequest_CAS) (int, bool) {
	switch fpv.selector {
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
		return 0, false
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fpv.selector))
	}
}

func (fpv *UpdatePortForwardingServiceRequestCAS_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*UpdatePortForwardingServiceRequest_CAS))
}

type UpdatePortForwardingServiceRequestCAS_FieldSubPathValue struct {
	UpdatePortForwardingServiceRequestCAS_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ UpdatePortForwardingServiceRequestCAS_FieldPathValue = (*UpdatePortForwardingServiceRequestCAS_FieldSubPathValue)(nil)

func (fpvs *UpdatePortForwardingServiceRequestCAS_FieldSubPathValue) AsConditionalStatePathValue() (port_forwarding_service.PortForwardingService_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(port_forwarding_service.PortForwardingService_FieldPathValue)
	return res, ok
}

func (fpvs *UpdatePortForwardingServiceRequestCAS_FieldSubPathValue) SetTo(target **UpdatePortForwardingServiceRequest_CAS) {
	if *target == nil {
		*target = new(UpdatePortForwardingServiceRequest_CAS)
	}
	switch fpvs.Selector() {
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
		fpvs.subPathValue.(port_forwarding_service.PortForwardingService_FieldPathValue).SetTo(&(*target).ConditionalState)
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePortForwardingServiceRequestCAS_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*UpdatePortForwardingServiceRequest_CAS)
	fpvs.SetTo(&typedObject)
}

func (fpvs *UpdatePortForwardingServiceRequestCAS_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *UpdatePortForwardingServiceRequestCAS_FieldSubPathValue) CompareWith(source *UpdatePortForwardingServiceRequest_CAS) (int, bool) {
	switch fpvs.Selector() {
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
		return fpvs.subPathValue.(port_forwarding_service.PortForwardingService_FieldPathValue).CompareWith(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fpvs.Selector()))
	}
}

func (fpvs *UpdatePortForwardingServiceRequestCAS_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*UpdatePortForwardingServiceRequest_CAS))
}

// UpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue allows storing single item in Path-specific values for CAS according to their type
// Present only for array (repeated) types.
type UpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	UpdatePortForwardingServiceRequestCAS_FieldPath
	ContainsValue(*UpdatePortForwardingServiceRequest_CAS) bool
}

// ParseUpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseUpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) (UpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue, error) {
	fp, err := ParseUpdatePortForwardingServiceRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(UpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue), nil
}

func MustParseUpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue(pathStr, valueStr string) UpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue {
	fpaiv, err := ParseUpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type UpdatePortForwardingServiceRequestCAS_FieldTerminalPathArrayItemValue struct {
	UpdatePortForwardingServiceRequestCAS_FieldTerminalPath
	value interface{}
}

var _ UpdatePortForwardingServiceRequestCAS_FieldPathArrayItemValue = (*UpdatePortForwardingServiceRequestCAS_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object UpdatePortForwardingServiceRequest_CAS as interface{}
func (fpaiv *UpdatePortForwardingServiceRequestCAS_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *UpdatePortForwardingServiceRequestCAS_FieldTerminalPathArrayItemValue) GetSingle(source *UpdatePortForwardingServiceRequest_CAS) (interface{}, bool) {
	return nil, false
}

func (fpaiv *UpdatePortForwardingServiceRequestCAS_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*UpdatePortForwardingServiceRequest_CAS))
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaiv *UpdatePortForwardingServiceRequestCAS_FieldTerminalPathArrayItemValue) ContainsValue(source *UpdatePortForwardingServiceRequest_CAS) bool {
	slice := fpaiv.UpdatePortForwardingServiceRequestCAS_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type UpdatePortForwardingServiceRequestCAS_FieldSubPathArrayItemValue struct {
	UpdatePortForwardingServiceRequestCAS_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *UpdatePortForwardingServiceRequestCAS_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *UpdatePortForwardingServiceRequestCAS_FieldSubPathArrayItemValue) AsConditionalStatePathItemValue() (port_forwarding_service.PortForwardingService_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(port_forwarding_service.PortForwardingService_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'CAS'
func (fpaivs *UpdatePortForwardingServiceRequestCAS_FieldSubPathArrayItemValue) ContainsValue(source *UpdatePortForwardingServiceRequest_CAS) bool {
	switch fpaivs.Selector() {
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
		return fpaivs.subPathItemValue.(port_forwarding_service.PortForwardingService_FieldPathArrayItemValue).ContainsValue(source.GetConditionalState())
	default:
		panic(fmt.Sprintf("Invalid selector for UpdatePortForwardingServiceRequest_CAS: %d", fpaivs.Selector()))
	}
}

// UpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues allows storing slice of values for CAS fields according to their type
type UpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	UpdatePortForwardingServiceRequestCAS_FieldPath
}

func ParseUpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) (UpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues, error) {
	fp, err := ParseUpdatePortForwardingServiceRequestCAS_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing CAS field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(UpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues), nil
}

func MustParseUpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr string) UpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues {
	fpaov, err := ParseUpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type UpdatePortForwardingServiceRequestCAS_FieldTerminalPathArrayOfValues struct {
	UpdatePortForwardingServiceRequestCAS_FieldTerminalPath
	values interface{}
}

var _ UpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues = (*UpdatePortForwardingServiceRequestCAS_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *UpdatePortForwardingServiceRequestCAS_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState:
		for _, v := range fpaov.values.([]*port_forwarding_service.PortForwardingService) {
			values = append(values, v)
		}
	case UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask:
		for _, v := range fpaov.values.([]*port_forwarding_service.PortForwardingService_FieldMask) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *UpdatePortForwardingServiceRequestCAS_FieldTerminalPathArrayOfValues) AsConditionalStateArrayOfValues() ([]*port_forwarding_service.PortForwardingService, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PortForwardingService)
	return res, ok
}
func (fpaov *UpdatePortForwardingServiceRequestCAS_FieldTerminalPathArrayOfValues) AsFieldMaskArrayOfValues() ([]*port_forwarding_service.PortForwardingService_FieldMask, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.PortForwardingService_FieldMask)
	return res, ok
}

type UpdatePortForwardingServiceRequestCAS_FieldSubPathArrayOfValues struct {
	UpdatePortForwardingServiceRequestCAS_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ UpdatePortForwardingServiceRequestCAS_FieldPathArrayOfValues = (*UpdatePortForwardingServiceRequestCAS_FieldSubPathArrayOfValues)(nil)

func (fpsaov *UpdatePortForwardingServiceRequestCAS_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *UpdatePortForwardingServiceRequestCAS_FieldSubPathArrayOfValues) AsConditionalStatePathArrayOfValues() (port_forwarding_service.PortForwardingService_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(port_forwarding_service.PortForwardingService_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type DeletePortForwardingServiceRequest_FieldPath interface {
	gotenobject.FieldPath
	Selector() DeletePortForwardingServiceRequest_FieldPathSelector
	Get(source *DeletePortForwardingServiceRequest) []interface{}
	GetSingle(source *DeletePortForwardingServiceRequest) (interface{}, bool)
	ClearValue(item *DeletePortForwardingServiceRequest)

	// Those methods build corresponding DeletePortForwardingServiceRequest_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) DeletePortForwardingServiceRequest_FieldPathValue
	WithIArrayOfValues(values interface{}) DeletePortForwardingServiceRequest_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) DeletePortForwardingServiceRequest_FieldPathArrayItemValue
}

type DeletePortForwardingServiceRequest_FieldPathSelector int32

const (
	DeletePortForwardingServiceRequest_FieldPathSelectorName DeletePortForwardingServiceRequest_FieldPathSelector = 0
)

func (s DeletePortForwardingServiceRequest_FieldPathSelector) String() string {
	switch s {
	case DeletePortForwardingServiceRequest_FieldPathSelectorName:
		return "name"
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePortForwardingServiceRequest: %d", s))
	}
}

func BuildDeletePortForwardingServiceRequest_FieldPath(fp gotenobject.RawFieldPath) (DeletePortForwardingServiceRequest_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object DeletePortForwardingServiceRequest")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &DeletePortForwardingServiceRequest_FieldTerminalPath{selector: DeletePortForwardingServiceRequest_FieldPathSelectorName}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object DeletePortForwardingServiceRequest", fp)
}

func ParseDeletePortForwardingServiceRequest_FieldPath(rawField string) (DeletePortForwardingServiceRequest_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildDeletePortForwardingServiceRequest_FieldPath(fp)
}

func MustParseDeletePortForwardingServiceRequest_FieldPath(rawField string) DeletePortForwardingServiceRequest_FieldPath {
	fp, err := ParseDeletePortForwardingServiceRequest_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type DeletePortForwardingServiceRequest_FieldTerminalPath struct {
	selector DeletePortForwardingServiceRequest_FieldPathSelector
}

var _ DeletePortForwardingServiceRequest_FieldPath = (*DeletePortForwardingServiceRequest_FieldTerminalPath)(nil)

func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) Selector() DeletePortForwardingServiceRequest_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source DeletePortForwardingServiceRequest
func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) Get(source *DeletePortForwardingServiceRequest) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case DeletePortForwardingServiceRequest_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for DeletePortForwardingServiceRequest: %d", fp.selector))
		}
	}
	return
}

func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*DeletePortForwardingServiceRequest))
}

// GetSingle returns value pointed by specific field of from source DeletePortForwardingServiceRequest
func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) GetSingle(source *DeletePortForwardingServiceRequest) (interface{}, bool) {
	switch fp.selector {
	case DeletePortForwardingServiceRequest_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*DeletePortForwardingServiceRequest))
}

// GetDefault returns a default value of the field type
func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case DeletePortForwardingServiceRequest_FieldPathSelectorName:
		return (*port_forwarding_service.Reference)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) ClearValue(item *DeletePortForwardingServiceRequest) {
	if item != nil {
		switch fp.selector {
		case DeletePortForwardingServiceRequest_FieldPathSelectorName:
			item.Name = nil
		default:
			panic(fmt.Sprintf("Invalid selector for DeletePortForwardingServiceRequest: %d", fp.selector))
		}
	}
}

func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*DeletePortForwardingServiceRequest))
}

// IsLeaf - whether field path is holds simple value
func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == DeletePortForwardingServiceRequest_FieldPathSelectorName
}

func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) WithIValue(value interface{}) DeletePortForwardingServiceRequest_FieldPathValue {
	switch fp.selector {
	case DeletePortForwardingServiceRequest_FieldPathSelectorName:
		return &DeletePortForwardingServiceRequest_FieldTerminalPathValue{DeletePortForwardingServiceRequest_FieldTerminalPath: *fp, value: value.(*port_forwarding_service.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) WithIArrayOfValues(values interface{}) DeletePortForwardingServiceRequest_FieldPathArrayOfValues {
	fpaov := &DeletePortForwardingServiceRequest_FieldTerminalPathArrayOfValues{DeletePortForwardingServiceRequest_FieldTerminalPath: *fp}
	switch fp.selector {
	case DeletePortForwardingServiceRequest_FieldPathSelectorName:
		return &DeletePortForwardingServiceRequest_FieldTerminalPathArrayOfValues{DeletePortForwardingServiceRequest_FieldTerminalPath: *fp, values: values.([]*port_forwarding_service.Reference)}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePortForwardingServiceRequest: %d", fp.selector))
	}
	return fpaov
}

func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) WithIArrayItemValue(value interface{}) DeletePortForwardingServiceRequest_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePortForwardingServiceRequest: %d", fp.selector))
	}
}

func (fp *DeletePortForwardingServiceRequest_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// DeletePortForwardingServiceRequest_FieldPathValue allows storing values for DeletePortForwardingServiceRequest fields according to their type
type DeletePortForwardingServiceRequest_FieldPathValue interface {
	DeletePortForwardingServiceRequest_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **DeletePortForwardingServiceRequest)
	CompareWith(*DeletePortForwardingServiceRequest) (cmp int, comparable bool)
}

func ParseDeletePortForwardingServiceRequest_FieldPathValue(pathStr, valueStr string) (DeletePortForwardingServiceRequest_FieldPathValue, error) {
	fp, err := ParseDeletePortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePortForwardingServiceRequest field path value from %s: %v", valueStr, err)
	}
	return fpv.(DeletePortForwardingServiceRequest_FieldPathValue), nil
}

func MustParseDeletePortForwardingServiceRequest_FieldPathValue(pathStr, valueStr string) DeletePortForwardingServiceRequest_FieldPathValue {
	fpv, err := ParseDeletePortForwardingServiceRequest_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type DeletePortForwardingServiceRequest_FieldTerminalPathValue struct {
	DeletePortForwardingServiceRequest_FieldTerminalPath
	value interface{}
}

var _ DeletePortForwardingServiceRequest_FieldPathValue = (*DeletePortForwardingServiceRequest_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'DeletePortForwardingServiceRequest' as interface{}
func (fpv *DeletePortForwardingServiceRequest_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *DeletePortForwardingServiceRequest_FieldTerminalPathValue) AsNameValue() (*port_forwarding_service.Reference, bool) {
	res, ok := fpv.value.(*port_forwarding_service.Reference)
	return res, ok
}

// SetTo stores value for selected field for object DeletePortForwardingServiceRequest
func (fpv *DeletePortForwardingServiceRequest_FieldTerminalPathValue) SetTo(target **DeletePortForwardingServiceRequest) {
	if *target == nil {
		*target = new(DeletePortForwardingServiceRequest)
	}
	switch fpv.selector {
	case DeletePortForwardingServiceRequest_FieldPathSelectorName:
		(*target).Name = fpv.value.(*port_forwarding_service.Reference)
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePortForwardingServiceRequest: %d", fpv.selector))
	}
}

func (fpv *DeletePortForwardingServiceRequest_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*DeletePortForwardingServiceRequest)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'DeletePortForwardingServiceRequest_FieldTerminalPathValue' with the value under path in 'DeletePortForwardingServiceRequest'.
func (fpv *DeletePortForwardingServiceRequest_FieldTerminalPathValue) CompareWith(source *DeletePortForwardingServiceRequest) (int, bool) {
	switch fpv.selector {
	case DeletePortForwardingServiceRequest_FieldPathSelectorName:
		leftValue := fpv.value.(*port_forwarding_service.Reference)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for DeletePortForwardingServiceRequest: %d", fpv.selector))
	}
}

func (fpv *DeletePortForwardingServiceRequest_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*DeletePortForwardingServiceRequest))
}

// DeletePortForwardingServiceRequest_FieldPathArrayItemValue allows storing single item in Path-specific values for DeletePortForwardingServiceRequest according to their type
// Present only for array (repeated) types.
type DeletePortForwardingServiceRequest_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	DeletePortForwardingServiceRequest_FieldPath
	ContainsValue(*DeletePortForwardingServiceRequest) bool
}

// ParseDeletePortForwardingServiceRequest_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseDeletePortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) (DeletePortForwardingServiceRequest_FieldPathArrayItemValue, error) {
	fp, err := ParseDeletePortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePortForwardingServiceRequest field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(DeletePortForwardingServiceRequest_FieldPathArrayItemValue), nil
}

func MustParseDeletePortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr string) DeletePortForwardingServiceRequest_FieldPathArrayItemValue {
	fpaiv, err := ParseDeletePortForwardingServiceRequest_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type DeletePortForwardingServiceRequest_FieldTerminalPathArrayItemValue struct {
	DeletePortForwardingServiceRequest_FieldTerminalPath
	value interface{}
}

var _ DeletePortForwardingServiceRequest_FieldPathArrayItemValue = (*DeletePortForwardingServiceRequest_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object DeletePortForwardingServiceRequest as interface{}
func (fpaiv *DeletePortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *DeletePortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetSingle(source *DeletePortForwardingServiceRequest) (interface{}, bool) {
	return nil, false
}

func (fpaiv *DeletePortForwardingServiceRequest_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*DeletePortForwardingServiceRequest))
}

// Contains returns a boolean indicating if value that is being held is present in given 'DeletePortForwardingServiceRequest'
func (fpaiv *DeletePortForwardingServiceRequest_FieldTerminalPathArrayItemValue) ContainsValue(source *DeletePortForwardingServiceRequest) bool {
	slice := fpaiv.DeletePortForwardingServiceRequest_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// DeletePortForwardingServiceRequest_FieldPathArrayOfValues allows storing slice of values for DeletePortForwardingServiceRequest fields according to their type
type DeletePortForwardingServiceRequest_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	DeletePortForwardingServiceRequest_FieldPath
}

func ParseDeletePortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) (DeletePortForwardingServiceRequest_FieldPathArrayOfValues, error) {
	fp, err := ParseDeletePortForwardingServiceRequest_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing DeletePortForwardingServiceRequest field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(DeletePortForwardingServiceRequest_FieldPathArrayOfValues), nil
}

func MustParseDeletePortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr string) DeletePortForwardingServiceRequest_FieldPathArrayOfValues {
	fpaov, err := ParseDeletePortForwardingServiceRequest_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type DeletePortForwardingServiceRequest_FieldTerminalPathArrayOfValues struct {
	DeletePortForwardingServiceRequest_FieldTerminalPath
	values interface{}
}

var _ DeletePortForwardingServiceRequest_FieldPathArrayOfValues = (*DeletePortForwardingServiceRequest_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *DeletePortForwardingServiceRequest_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case DeletePortForwardingServiceRequest_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*port_forwarding_service.Reference) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *DeletePortForwardingServiceRequest_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*port_forwarding_service.Reference, bool) {
	res, ok := fpaov.values.([]*port_forwarding_service.Reference)
	return res, ok
}
