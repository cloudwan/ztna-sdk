// Code generated by protoc-gen-goten-object
// File: ztna/proto/v1alpha/port_forwarding_service_service.proto
// DO NOT EDIT!!!

package port_forwarding_service_client

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	view "github.com/cloudwan/goten-sdk/runtime/api/view"
	watch_type "github.com/cloudwan/goten-sdk/runtime/api/watch_type"
	port_forwarding_service "github.com/cloudwan/ztna-sdk/resources/v1alpha/port_forwarding_service"
	empty "github.com/golang/protobuf/ptypes/empty"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &empty.Empty{}
	_ = &field_mask.FieldMask{}
	_ = view.View(0)
	_ = watch_type.WatchType(0)
	_ = &port_forwarding_service.PortForwardingService{}
)

func (o *GetPortForwardingServiceRequest) GotenObjectExt() {}

func (o *GetPortForwardingServiceRequest) MakeFullFieldMask() *GetPortForwardingServiceRequest_FieldMask {
	return FullGetPortForwardingServiceRequest_FieldMask()
}

func (o *GetPortForwardingServiceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullGetPortForwardingServiceRequest_FieldMask()
}

func (o *GetPortForwardingServiceRequest) MakeDiffFieldMask(other *GetPortForwardingServiceRequest) *GetPortForwardingServiceRequest_FieldMask {
	if o == nil && other == nil {
		return &GetPortForwardingServiceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullGetPortForwardingServiceRequest_FieldMask()
	}

	res := &GetPortForwardingServiceRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &GetPortForwardingServiceRequest_FieldTerminalPath{selector: GetPortForwardingServiceRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &GetPortForwardingServiceRequest_FieldTerminalPath{selector: GetPortForwardingServiceRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &GetPortForwardingServiceRequest_FieldTerminalPath{selector: GetPortForwardingServiceRequest_FieldPathSelectorView})
	}
	return res
}

func (o *GetPortForwardingServiceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*GetPortForwardingServiceRequest))
}

func (o *GetPortForwardingServiceRequest) Clone() *GetPortForwardingServiceRequest {
	if o == nil {
		return nil
	}
	result := &GetPortForwardingServiceRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &port_forwarding_service.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*port_forwarding_service.PortForwardingService_FieldMask)
	result.View = o.View
	return result
}

func (o *GetPortForwardingServiceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *GetPortForwardingServiceRequest) Merge(source *GetPortForwardingServiceRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &port_forwarding_service.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(port_forwarding_service.PortForwardingService_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *GetPortForwardingServiceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*GetPortForwardingServiceRequest))
}

func (o *BatchGetPortForwardingServicesRequest) GotenObjectExt() {}

func (o *BatchGetPortForwardingServicesRequest) MakeFullFieldMask() *BatchGetPortForwardingServicesRequest_FieldMask {
	return FullBatchGetPortForwardingServicesRequest_FieldMask()
}

func (o *BatchGetPortForwardingServicesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetPortForwardingServicesRequest_FieldMask()
}

func (o *BatchGetPortForwardingServicesRequest) MakeDiffFieldMask(other *BatchGetPortForwardingServicesRequest) *BatchGetPortForwardingServicesRequest_FieldMask {
	if o == nil && other == nil {
		return &BatchGetPortForwardingServicesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetPortForwardingServicesRequest_FieldMask()
	}

	res := &BatchGetPortForwardingServicesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &BatchGetPortForwardingServicesRequest_FieldTerminalPath{selector: BatchGetPortForwardingServicesRequest_FieldPathSelectorParent})
	}

	if len(o.GetNames()) == len(other.GetNames()) {
		for i, lValue := range o.GetNames() {
			rValue := other.GetNames()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetPortForwardingServicesRequest_FieldTerminalPath{selector: BatchGetPortForwardingServicesRequest_FieldPathSelectorNames})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPortForwardingServicesRequest_FieldTerminalPath{selector: BatchGetPortForwardingServicesRequest_FieldPathSelectorNames})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &BatchGetPortForwardingServicesRequest_FieldTerminalPath{selector: BatchGetPortForwardingServicesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &BatchGetPortForwardingServicesRequest_FieldTerminalPath{selector: BatchGetPortForwardingServicesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *BatchGetPortForwardingServicesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetPortForwardingServicesRequest))
}

func (o *BatchGetPortForwardingServicesRequest) Clone() *BatchGetPortForwardingServicesRequest {
	if o == nil {
		return nil
	}
	result := &BatchGetPortForwardingServicesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &port_forwarding_service.Reference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Names = make([]*port_forwarding_service.Reference, len(o.Names))
	for i, sourceValue := range o.Names {
		if sourceValue == nil {
			result.Names[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Names[i] = &port_forwarding_service.Reference{}
			if err := result.Names[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*port_forwarding_service.PortForwardingService_FieldMask)
	result.View = o.View
	return result
}

func (o *BatchGetPortForwardingServicesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetPortForwardingServicesRequest) Merge(source *BatchGetPortForwardingServicesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &port_forwarding_service.Reference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	for _, sourceValue := range source.GetNames() {
		exists := false
		for _, currentValue := range o.Names {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *port_forwarding_service.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &port_forwarding_service.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Names = append(o.Names, newDstElement)
		}
	}

	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(port_forwarding_service.PortForwardingService_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *BatchGetPortForwardingServicesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetPortForwardingServicesRequest))
}

func (o *BatchGetPortForwardingServicesResponse) GotenObjectExt() {}

func (o *BatchGetPortForwardingServicesResponse) MakeFullFieldMask() *BatchGetPortForwardingServicesResponse_FieldMask {
	return FullBatchGetPortForwardingServicesResponse_FieldMask()
}

func (o *BatchGetPortForwardingServicesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullBatchGetPortForwardingServicesResponse_FieldMask()
}

func (o *BatchGetPortForwardingServicesResponse) MakeDiffFieldMask(other *BatchGetPortForwardingServicesResponse) *BatchGetPortForwardingServicesResponse_FieldMask {
	if o == nil && other == nil {
		return &BatchGetPortForwardingServicesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullBatchGetPortForwardingServicesResponse_FieldMask()
	}

	res := &BatchGetPortForwardingServicesResponse_FieldMask{}

	if len(o.GetPortForwardingServices()) == len(other.GetPortForwardingServices()) {
		for i, lValue := range o.GetPortForwardingServices() {
			rValue := other.GetPortForwardingServices()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &BatchGetPortForwardingServicesResponse_FieldTerminalPath{selector: BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPortForwardingServicesResponse_FieldTerminalPath{selector: BatchGetPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices})
	}

	if len(o.GetMissing()) == len(other.GetMissing()) {
		for i, lValue := range o.GetMissing() {
			rValue := other.GetMissing()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &BatchGetPortForwardingServicesResponse_FieldTerminalPath{selector: BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &BatchGetPortForwardingServicesResponse_FieldTerminalPath{selector: BatchGetPortForwardingServicesResponse_FieldPathSelectorMissing})
	}
	return res
}

func (o *BatchGetPortForwardingServicesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*BatchGetPortForwardingServicesResponse))
}

func (o *BatchGetPortForwardingServicesResponse) Clone() *BatchGetPortForwardingServicesResponse {
	if o == nil {
		return nil
	}
	result := &BatchGetPortForwardingServicesResponse{}
	result.PortForwardingServices = make([]*port_forwarding_service.PortForwardingService, len(o.PortForwardingServices))
	for i, sourceValue := range o.PortForwardingServices {
		result.PortForwardingServices[i] = sourceValue.Clone()
	}
	result.Missing = make([]*port_forwarding_service.Reference, len(o.Missing))
	for i, sourceValue := range o.Missing {
		if sourceValue == nil {
			result.Missing[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.Missing[i] = &port_forwarding_service.Reference{}
			if err := result.Missing[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *BatchGetPortForwardingServicesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *BatchGetPortForwardingServicesResponse) Merge(source *BatchGetPortForwardingServicesResponse) {
	for _, sourceValue := range source.GetPortForwardingServices() {
		exists := false
		for _, currentValue := range o.PortForwardingServices {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *port_forwarding_service.PortForwardingService
			if sourceValue != nil {
				newDstElement = new(port_forwarding_service.PortForwardingService)
				newDstElement.Merge(sourceValue)
			}
			o.PortForwardingServices = append(o.PortForwardingServices, newDstElement)
		}
	}

	for _, sourceValue := range source.GetMissing() {
		exists := false
		for _, currentValue := range o.Missing {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *port_forwarding_service.Reference
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &port_forwarding_service.Reference{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.Missing = append(o.Missing, newDstElement)
		}
	}

}

func (o *BatchGetPortForwardingServicesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*BatchGetPortForwardingServicesResponse))
}

func (o *ListPortForwardingServicesRequest) GotenObjectExt() {}

func (o *ListPortForwardingServicesRequest) MakeFullFieldMask() *ListPortForwardingServicesRequest_FieldMask {
	return FullListPortForwardingServicesRequest_FieldMask()
}

func (o *ListPortForwardingServicesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListPortForwardingServicesRequest_FieldMask()
}

func (o *ListPortForwardingServicesRequest) MakeDiffFieldMask(other *ListPortForwardingServicesRequest) *ListPortForwardingServicesRequest_FieldMask {
	if o == nil && other == nil {
		return &ListPortForwardingServicesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListPortForwardingServicesRequest_FieldMask()
	}

	res := &ListPortForwardingServicesRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &ListPortForwardingServicesRequest_FieldTerminalPath{selector: ListPortForwardingServicesRequest_FieldPathSelectorView})
	}
	return res
}

func (o *ListPortForwardingServicesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListPortForwardingServicesRequest))
}

func (o *ListPortForwardingServicesRequest) Clone() *ListPortForwardingServicesRequest {
	if o == nil {
		return nil
	}
	result := &ListPortForwardingServicesRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &port_forwarding_service.ParentName{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &port_forwarding_service.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &port_forwarding_service.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &port_forwarding_service.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*port_forwarding_service.PortForwardingService_FieldMask)
	result.View = o.View
	return result
}

func (o *ListPortForwardingServicesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListPortForwardingServicesRequest) Merge(source *ListPortForwardingServicesRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &port_forwarding_service.ParentName{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &port_forwarding_service.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &port_forwarding_service.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &port_forwarding_service.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(port_forwarding_service.PortForwardingService_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *ListPortForwardingServicesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListPortForwardingServicesRequest))
}

func (o *ListPortForwardingServicesResponse) GotenObjectExt() {}

func (o *ListPortForwardingServicesResponse) MakeFullFieldMask() *ListPortForwardingServicesResponse_FieldMask {
	return FullListPortForwardingServicesResponse_FieldMask()
}

func (o *ListPortForwardingServicesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullListPortForwardingServicesResponse_FieldMask()
}

func (o *ListPortForwardingServicesResponse) MakeDiffFieldMask(other *ListPortForwardingServicesResponse) *ListPortForwardingServicesResponse_FieldMask {
	if o == nil && other == nil {
		return &ListPortForwardingServicesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullListPortForwardingServicesResponse_FieldMask()
	}

	res := &ListPortForwardingServicesResponse_FieldMask{}

	if len(o.GetPortForwardingServices()) == len(other.GetPortForwardingServices()) {
		for i, lValue := range o.GetPortForwardingServices() {
			rValue := other.GetPortForwardingServices()[i]
			if len(lValue.MakeDiffFieldMask(rValue).Paths) > 0 {
				res.Paths = append(res.Paths, &ListPortForwardingServicesResponse_FieldTerminalPath{selector: ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &ListPortForwardingServicesResponse_FieldTerminalPath{selector: ListPortForwardingServicesResponse_FieldPathSelectorPortForwardingServices})
	}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &ListPortForwardingServicesResponse_FieldTerminalPath{selector: ListPortForwardingServicesResponse_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &ListPortForwardingServicesResponse_FieldTerminalPath{selector: ListPortForwardingServicesResponse_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *ListPortForwardingServicesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*ListPortForwardingServicesResponse))
}

func (o *ListPortForwardingServicesResponse) Clone() *ListPortForwardingServicesResponse {
	if o == nil {
		return nil
	}
	result := &ListPortForwardingServicesResponse{}
	result.PortForwardingServices = make([]*port_forwarding_service.PortForwardingService, len(o.PortForwardingServices))
	for i, sourceValue := range o.PortForwardingServices {
		result.PortForwardingServices[i] = sourceValue.Clone()
	}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &port_forwarding_service.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &port_forwarding_service.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *ListPortForwardingServicesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *ListPortForwardingServicesResponse) Merge(source *ListPortForwardingServicesResponse) {
	for _, sourceValue := range source.GetPortForwardingServices() {
		exists := false
		for _, currentValue := range o.PortForwardingServices {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *port_forwarding_service.PortForwardingService
			if sourceValue != nil {
				newDstElement = new(port_forwarding_service.PortForwardingService)
				newDstElement.Merge(sourceValue)
			}
			o.PortForwardingServices = append(o.PortForwardingServices, newDstElement)
		}
	}

	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &port_forwarding_service.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &port_forwarding_service.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *ListPortForwardingServicesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*ListPortForwardingServicesResponse))
}

func (o *WatchPortForwardingServiceRequest) GotenObjectExt() {}

func (o *WatchPortForwardingServiceRequest) MakeFullFieldMask() *WatchPortForwardingServiceRequest_FieldMask {
	return FullWatchPortForwardingServiceRequest_FieldMask()
}

func (o *WatchPortForwardingServiceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPortForwardingServiceRequest_FieldMask()
}

func (o *WatchPortForwardingServiceRequest) MakeDiffFieldMask(other *WatchPortForwardingServiceRequest) *WatchPortForwardingServiceRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchPortForwardingServiceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPortForwardingServiceRequest_FieldMask()
	}

	res := &WatchPortForwardingServiceRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &WatchPortForwardingServiceRequest_FieldTerminalPath{selector: WatchPortForwardingServiceRequest_FieldPathSelectorName})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchPortForwardingServiceRequest_FieldTerminalPath{selector: WatchPortForwardingServiceRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchPortForwardingServiceRequest_FieldTerminalPath{selector: WatchPortForwardingServiceRequest_FieldPathSelectorView})
	}
	return res
}

func (o *WatchPortForwardingServiceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPortForwardingServiceRequest))
}

func (o *WatchPortForwardingServiceRequest) Clone() *WatchPortForwardingServiceRequest {
	if o == nil {
		return nil
	}
	result := &WatchPortForwardingServiceRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &port_forwarding_service.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*port_forwarding_service.PortForwardingService_FieldMask)
	result.View = o.View
	return result
}

func (o *WatchPortForwardingServiceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPortForwardingServiceRequest) Merge(source *WatchPortForwardingServiceRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &port_forwarding_service.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(port_forwarding_service.PortForwardingService_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
}

func (o *WatchPortForwardingServiceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPortForwardingServiceRequest))
}

func (o *WatchPortForwardingServiceResponse) GotenObjectExt() {}

func (o *WatchPortForwardingServiceResponse) MakeFullFieldMask() *WatchPortForwardingServiceResponse_FieldMask {
	return FullWatchPortForwardingServiceResponse_FieldMask()
}

func (o *WatchPortForwardingServiceResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPortForwardingServiceResponse_FieldMask()
}

func (o *WatchPortForwardingServiceResponse) MakeDiffFieldMask(other *WatchPortForwardingServiceResponse) *WatchPortForwardingServiceResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchPortForwardingServiceResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPortForwardingServiceResponse_FieldMask()
	}

	res := &WatchPortForwardingServiceResponse_FieldMask{}
	if !proto.Equal(o.GetChange(), other.GetChange()) {
		res.Paths = append(res.Paths, &WatchPortForwardingServiceResponse_FieldTerminalPath{selector: WatchPortForwardingServiceResponse_FieldPathSelectorChange})
	}
	return res
}

func (o *WatchPortForwardingServiceResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPortForwardingServiceResponse))
}

func (o *WatchPortForwardingServiceResponse) Clone() *WatchPortForwardingServiceResponse {
	if o == nil {
		return nil
	}
	result := &WatchPortForwardingServiceResponse{}
	result.Change = proto.Clone(o.Change).(*port_forwarding_service.PortForwardingServiceChange)
	return result
}

func (o *WatchPortForwardingServiceResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPortForwardingServiceResponse) Merge(source *WatchPortForwardingServiceResponse) {
	if source.GetChange() != nil {
		if o.Change == nil {
			o.Change = new(port_forwarding_service.PortForwardingServiceChange)
		}
		proto.Merge(o.Change, source.GetChange())
	}
}

func (o *WatchPortForwardingServiceResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPortForwardingServiceResponse))
}

func (o *WatchPortForwardingServicesRequest) GotenObjectExt() {}

func (o *WatchPortForwardingServicesRequest) MakeFullFieldMask() *WatchPortForwardingServicesRequest_FieldMask {
	return FullWatchPortForwardingServicesRequest_FieldMask()
}

func (o *WatchPortForwardingServicesRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPortForwardingServicesRequest_FieldMask()
}

func (o *WatchPortForwardingServicesRequest) MakeDiffFieldMask(other *WatchPortForwardingServicesRequest) *WatchPortForwardingServicesRequest_FieldMask {
	if o == nil && other == nil {
		return &WatchPortForwardingServicesRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPortForwardingServicesRequest_FieldMask()
	}

	res := &WatchPortForwardingServicesRequest_FieldMask{}
	if o.GetType() != other.GetType() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorType})
	}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorParent})
	}
	if o.GetPageSize() != other.GetPageSize() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorPageSize})
	}
	if o.GetPageToken().String() != other.GetPageToken().String() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorPageToken})
	}
	if o.GetOrderBy().String() != other.GetOrderBy().String() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorOrderBy})
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorResumeToken})
	}
	if o.GetFilter().String() != other.GetFilter().String() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorFilter})
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorFieldMask})
	}
	if o.GetView() != other.GetView() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorView})
	}
	if o.GetMaxChunkSize() != other.GetMaxChunkSize() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesRequest_FieldTerminalPath{selector: WatchPortForwardingServicesRequest_FieldPathSelectorMaxChunkSize})
	}
	return res
}

func (o *WatchPortForwardingServicesRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPortForwardingServicesRequest))
}

func (o *WatchPortForwardingServicesRequest) Clone() *WatchPortForwardingServicesRequest {
	if o == nil {
		return nil
	}
	result := &WatchPortForwardingServicesRequest{}
	result.Type = o.Type
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &port_forwarding_service.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PageSize = o.PageSize
	if o.PageToken == nil {
		result.PageToken = nil
	} else if data, err := o.PageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PageToken = &port_forwarding_service.PagerCursor{}
		if err := result.PageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.OrderBy == nil {
		result.OrderBy = nil
	} else if data, err := o.OrderBy.ProtoString(); err != nil {
		panic(err)
	} else {
		result.OrderBy = &port_forwarding_service.OrderBy{}
		if err := result.OrderBy.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.ResumeToken = o.ResumeToken
	if o.Filter == nil {
		result.Filter = nil
	} else if data, err := o.Filter.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Filter = &port_forwarding_service.Filter{}
		if err := result.Filter.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.FieldMask = proto.Clone(o.FieldMask).(*port_forwarding_service.PortForwardingService_FieldMask)
	result.View = o.View
	result.MaxChunkSize = o.MaxChunkSize
	return result
}

func (o *WatchPortForwardingServicesRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPortForwardingServicesRequest) Merge(source *WatchPortForwardingServicesRequest) {
	o.Type = source.GetType()
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &port_forwarding_service.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	o.PageSize = source.GetPageSize()
	if source.GetPageToken() != nil {
		if data, err := source.GetPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PageToken = &port_forwarding_service.PagerCursor{}
			if err := o.PageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PageToken = nil
	}
	if source.GetOrderBy() != nil {
		if data, err := source.GetOrderBy().ProtoString(); err != nil {
			panic(err)
		} else {
			o.OrderBy = &port_forwarding_service.OrderBy{}
			if err := o.OrderBy.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.OrderBy = nil
	}
	o.ResumeToken = source.GetResumeToken()
	if source.GetFilter() != nil {
		if data, err := source.GetFilter().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Filter = &port_forwarding_service.Filter{}
			if err := o.Filter.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Filter = nil
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(port_forwarding_service.PortForwardingService_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	o.View = source.GetView()
	o.MaxChunkSize = source.GetMaxChunkSize()
}

func (o *WatchPortForwardingServicesRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPortForwardingServicesRequest))
}

func (o *WatchPortForwardingServicesResponse) GotenObjectExt() {}

func (o *WatchPortForwardingServicesResponse) MakeFullFieldMask() *WatchPortForwardingServicesResponse_FieldMask {
	return FullWatchPortForwardingServicesResponse_FieldMask()
}

func (o *WatchPortForwardingServicesResponse) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPortForwardingServicesResponse_FieldMask()
}

func (o *WatchPortForwardingServicesResponse) MakeDiffFieldMask(other *WatchPortForwardingServicesResponse) *WatchPortForwardingServicesResponse_FieldMask {
	if o == nil && other == nil {
		return &WatchPortForwardingServicesResponse_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPortForwardingServicesResponse_FieldMask()
	}

	res := &WatchPortForwardingServicesResponse_FieldMask{}

	if len(o.GetPortForwardingServiceChanges()) == len(other.GetPortForwardingServiceChanges()) {
		for i, lValue := range o.GetPortForwardingServiceChanges() {
			rValue := other.GetPortForwardingServiceChanges()[i]
			if !proto.Equal(lValue, rValue) {
				res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorPortForwardingServiceChanges})
	}
	if o.GetIsCurrent() != other.GetIsCurrent() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorIsCurrent})
	}
	{
		subMask := o.GetPageTokenChange().MakeDiffFieldMask(other.GetPageTokenChange())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldSubPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorPageTokenChange, subPath: subpath})
			}
		}
	}
	if o.GetResumeToken() != other.GetResumeToken() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorResumeToken})
	}
	if o.GetSnapshotSize() != other.GetSnapshotSize() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorSnapshotSize})
	}
	if o.GetIsSoftReset() != other.GetIsSoftReset() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorIsSoftReset})
	}
	if o.GetIsHardReset() != other.GetIsHardReset() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesResponse_FieldTerminalPath{selector: WatchPortForwardingServicesResponse_FieldPathSelectorIsHardReset})
	}
	return res
}

func (o *WatchPortForwardingServicesResponse) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPortForwardingServicesResponse))
}

func (o *WatchPortForwardingServicesResponse) Clone() *WatchPortForwardingServicesResponse {
	if o == nil {
		return nil
	}
	result := &WatchPortForwardingServicesResponse{}
	result.PortForwardingServiceChanges = make([]*port_forwarding_service.PortForwardingServiceChange, len(o.PortForwardingServiceChanges))
	for i, sourceValue := range o.PortForwardingServiceChanges {
		result.PortForwardingServiceChanges[i] = proto.Clone(sourceValue).(*port_forwarding_service.PortForwardingServiceChange)
	}
	result.IsCurrent = o.IsCurrent
	result.PageTokenChange = o.PageTokenChange.Clone()
	result.ResumeToken = o.ResumeToken
	result.SnapshotSize = o.SnapshotSize
	result.IsSoftReset = o.IsSoftReset
	result.IsHardReset = o.IsHardReset
	return result
}

func (o *WatchPortForwardingServicesResponse) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPortForwardingServicesResponse) Merge(source *WatchPortForwardingServicesResponse) {
	for _, sourceValue := range source.GetPortForwardingServiceChanges() {
		exists := false
		for _, currentValue := range o.PortForwardingServiceChanges {
			if proto.Equal(sourceValue, currentValue) {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *port_forwarding_service.PortForwardingServiceChange
			if sourceValue != nil {
				newDstElement = new(port_forwarding_service.PortForwardingServiceChange)
				proto.Merge(newDstElement, sourceValue)
			}
			o.PortForwardingServiceChanges = append(o.PortForwardingServiceChanges, newDstElement)
		}
	}

	o.IsCurrent = source.GetIsCurrent()
	if source.GetPageTokenChange() != nil {
		if o.PageTokenChange == nil {
			o.PageTokenChange = new(WatchPortForwardingServicesResponse_PageTokenChange)
		}
		o.PageTokenChange.Merge(source.GetPageTokenChange())
	}
	o.ResumeToken = source.GetResumeToken()
	o.SnapshotSize = source.GetSnapshotSize()
	o.IsSoftReset = source.GetIsSoftReset()
	o.IsHardReset = source.GetIsHardReset()
}

func (o *WatchPortForwardingServicesResponse) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPortForwardingServicesResponse))
}

func (o *WatchPortForwardingServicesResponse_PageTokenChange) GotenObjectExt() {}

func (o *WatchPortForwardingServicesResponse_PageTokenChange) MakeFullFieldMask() *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask {
	return FullWatchPortForwardingServicesResponse_PageTokenChange_FieldMask()
}

func (o *WatchPortForwardingServicesResponse_PageTokenChange) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullWatchPortForwardingServicesResponse_PageTokenChange_FieldMask()
}

func (o *WatchPortForwardingServicesResponse_PageTokenChange) MakeDiffFieldMask(other *WatchPortForwardingServicesResponse_PageTokenChange) *WatchPortForwardingServicesResponse_PageTokenChange_FieldMask {
	if o == nil && other == nil {
		return &WatchPortForwardingServicesResponse_PageTokenChange_FieldMask{}
	}
	if o == nil || other == nil {
		return FullWatchPortForwardingServicesResponse_PageTokenChange_FieldMask()
	}

	res := &WatchPortForwardingServicesResponse_PageTokenChange_FieldMask{}
	if o.GetPrevPageToken().String() != other.GetPrevPageToken().String() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath{selector: WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorPrevPageToken})
	}
	if o.GetNextPageToken().String() != other.GetNextPageToken().String() {
		res.Paths = append(res.Paths, &WatchPortForwardingServicesResponsePageTokenChange_FieldTerminalPath{selector: WatchPortForwardingServicesResponsePageTokenChange_FieldPathSelectorNextPageToken})
	}
	return res
}

func (o *WatchPortForwardingServicesResponse_PageTokenChange) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*WatchPortForwardingServicesResponse_PageTokenChange))
}

func (o *WatchPortForwardingServicesResponse_PageTokenChange) Clone() *WatchPortForwardingServicesResponse_PageTokenChange {
	if o == nil {
		return nil
	}
	result := &WatchPortForwardingServicesResponse_PageTokenChange{}
	if o.PrevPageToken == nil {
		result.PrevPageToken = nil
	} else if data, err := o.PrevPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.PrevPageToken = &port_forwarding_service.PagerCursor{}
		if err := result.PrevPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	if o.NextPageToken == nil {
		result.NextPageToken = nil
	} else if data, err := o.NextPageToken.ProtoString(); err != nil {
		panic(err)
	} else {
		result.NextPageToken = &port_forwarding_service.PagerCursor{}
		if err := result.NextPageToken.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *WatchPortForwardingServicesResponse_PageTokenChange) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *WatchPortForwardingServicesResponse_PageTokenChange) Merge(source *WatchPortForwardingServicesResponse_PageTokenChange) {
	if source.GetPrevPageToken() != nil {
		if data, err := source.GetPrevPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.PrevPageToken = &port_forwarding_service.PagerCursor{}
			if err := o.PrevPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.PrevPageToken = nil
	}
	if source.GetNextPageToken() != nil {
		if data, err := source.GetNextPageToken().ProtoString(); err != nil {
			panic(err)
		} else {
			o.NextPageToken = &port_forwarding_service.PagerCursor{}
			if err := o.NextPageToken.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.NextPageToken = nil
	}
}

func (o *WatchPortForwardingServicesResponse_PageTokenChange) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*WatchPortForwardingServicesResponse_PageTokenChange))
}

func (o *CreatePortForwardingServiceRequest) GotenObjectExt() {}

func (o *CreatePortForwardingServiceRequest) MakeFullFieldMask() *CreatePortForwardingServiceRequest_FieldMask {
	return FullCreatePortForwardingServiceRequest_FieldMask()
}

func (o *CreatePortForwardingServiceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullCreatePortForwardingServiceRequest_FieldMask()
}

func (o *CreatePortForwardingServiceRequest) MakeDiffFieldMask(other *CreatePortForwardingServiceRequest) *CreatePortForwardingServiceRequest_FieldMask {
	if o == nil && other == nil {
		return &CreatePortForwardingServiceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullCreatePortForwardingServiceRequest_FieldMask()
	}

	res := &CreatePortForwardingServiceRequest_FieldMask{}
	if o.GetParent().String() != other.GetParent().String() {
		res.Paths = append(res.Paths, &CreatePortForwardingServiceRequest_FieldTerminalPath{selector: CreatePortForwardingServiceRequest_FieldPathSelectorParent})
	}
	{
		subMask := o.GetPortForwardingService().MakeDiffFieldMask(other.GetPortForwardingService())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &CreatePortForwardingServiceRequest_FieldTerminalPath{selector: CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &CreatePortForwardingServiceRequest_FieldSubPath{selector: CreatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService, subPath: subpath})
			}
		}
	}
	return res
}

func (o *CreatePortForwardingServiceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*CreatePortForwardingServiceRequest))
}

func (o *CreatePortForwardingServiceRequest) Clone() *CreatePortForwardingServiceRequest {
	if o == nil {
		return nil
	}
	result := &CreatePortForwardingServiceRequest{}
	if o.Parent == nil {
		result.Parent = nil
	} else if data, err := o.Parent.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Parent = &port_forwarding_service.ParentReference{}
		if err := result.Parent.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.PortForwardingService = o.PortForwardingService.Clone()
	return result
}

func (o *CreatePortForwardingServiceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *CreatePortForwardingServiceRequest) Merge(source *CreatePortForwardingServiceRequest) {
	if source.GetParent() != nil {
		if data, err := source.GetParent().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Parent = &port_forwarding_service.ParentReference{}
			if err := o.Parent.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Parent = nil
	}
	if source.GetPortForwardingService() != nil {
		if o.PortForwardingService == nil {
			o.PortForwardingService = new(port_forwarding_service.PortForwardingService)
		}
		o.PortForwardingService.Merge(source.GetPortForwardingService())
	}
}

func (o *CreatePortForwardingServiceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*CreatePortForwardingServiceRequest))
}

func (o *UpdatePortForwardingServiceRequest) GotenObjectExt() {}

func (o *UpdatePortForwardingServiceRequest) MakeFullFieldMask() *UpdatePortForwardingServiceRequest_FieldMask {
	return FullUpdatePortForwardingServiceRequest_FieldMask()
}

func (o *UpdatePortForwardingServiceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdatePortForwardingServiceRequest_FieldMask()
}

func (o *UpdatePortForwardingServiceRequest) MakeDiffFieldMask(other *UpdatePortForwardingServiceRequest) *UpdatePortForwardingServiceRequest_FieldMask {
	if o == nil && other == nil {
		return &UpdatePortForwardingServiceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdatePortForwardingServiceRequest_FieldMask()
	}

	res := &UpdatePortForwardingServiceRequest_FieldMask{}
	{
		subMask := o.GetPortForwardingService().MakeDiffFieldMask(other.GetPortForwardingService())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePortForwardingServiceRequest_FieldTerminalPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePortForwardingServiceRequest_FieldSubPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorPortForwardingService, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetUpdateMask(), other.GetUpdateMask()) {
		res.Paths = append(res.Paths, &UpdatePortForwardingServiceRequest_FieldTerminalPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorUpdateMask})
	}
	{
		subMask := o.GetCas().MakeDiffFieldMask(other.GetCas())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePortForwardingServiceRequest_FieldTerminalPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorCas})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePortForwardingServiceRequest_FieldSubPath{selector: UpdatePortForwardingServiceRequest_FieldPathSelectorCas, subPath: subpath})
			}
		}
	}
	return res
}

func (o *UpdatePortForwardingServiceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdatePortForwardingServiceRequest))
}

func (o *UpdatePortForwardingServiceRequest) Clone() *UpdatePortForwardingServiceRequest {
	if o == nil {
		return nil
	}
	result := &UpdatePortForwardingServiceRequest{}
	result.PortForwardingService = o.PortForwardingService.Clone()
	result.UpdateMask = proto.Clone(o.UpdateMask).(*port_forwarding_service.PortForwardingService_FieldMask)
	result.Cas = o.Cas.Clone()
	return result
}

func (o *UpdatePortForwardingServiceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdatePortForwardingServiceRequest) Merge(source *UpdatePortForwardingServiceRequest) {
	if source.GetPortForwardingService() != nil {
		if o.PortForwardingService == nil {
			o.PortForwardingService = new(port_forwarding_service.PortForwardingService)
		}
		o.PortForwardingService.Merge(source.GetPortForwardingService())
	}
	if source.GetUpdateMask() != nil {
		if o.UpdateMask == nil {
			o.UpdateMask = new(port_forwarding_service.PortForwardingService_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetUpdateMask().ToProtoFieldMask(), o.UpdateMask.ToProtoFieldMask())
		if err := o.UpdateMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
	if source.GetCas() != nil {
		if o.Cas == nil {
			o.Cas = new(UpdatePortForwardingServiceRequest_CAS)
		}
		o.Cas.Merge(source.GetCas())
	}
}

func (o *UpdatePortForwardingServiceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdatePortForwardingServiceRequest))
}

func (o *UpdatePortForwardingServiceRequest_CAS) GotenObjectExt() {}

func (o *UpdatePortForwardingServiceRequest_CAS) MakeFullFieldMask() *UpdatePortForwardingServiceRequest_CAS_FieldMask {
	return FullUpdatePortForwardingServiceRequest_CAS_FieldMask()
}

func (o *UpdatePortForwardingServiceRequest_CAS) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullUpdatePortForwardingServiceRequest_CAS_FieldMask()
}

func (o *UpdatePortForwardingServiceRequest_CAS) MakeDiffFieldMask(other *UpdatePortForwardingServiceRequest_CAS) *UpdatePortForwardingServiceRequest_CAS_FieldMask {
	if o == nil && other == nil {
		return &UpdatePortForwardingServiceRequest_CAS_FieldMask{}
	}
	if o == nil || other == nil {
		return FullUpdatePortForwardingServiceRequest_CAS_FieldMask()
	}

	res := &UpdatePortForwardingServiceRequest_CAS_FieldMask{}
	{
		subMask := o.GetConditionalState().MakeDiffFieldMask(other.GetConditionalState())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &UpdatePortForwardingServiceRequestCAS_FieldTerminalPath{selector: UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &UpdatePortForwardingServiceRequestCAS_FieldSubPath{selector: UpdatePortForwardingServiceRequestCAS_FieldPathSelectorConditionalState, subPath: subpath})
			}
		}
	}
	if !proto.Equal(o.GetFieldMask(), other.GetFieldMask()) {
		res.Paths = append(res.Paths, &UpdatePortForwardingServiceRequestCAS_FieldTerminalPath{selector: UpdatePortForwardingServiceRequestCAS_FieldPathSelectorFieldMask})
	}
	return res
}

func (o *UpdatePortForwardingServiceRequest_CAS) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*UpdatePortForwardingServiceRequest_CAS))
}

func (o *UpdatePortForwardingServiceRequest_CAS) Clone() *UpdatePortForwardingServiceRequest_CAS {
	if o == nil {
		return nil
	}
	result := &UpdatePortForwardingServiceRequest_CAS{}
	result.ConditionalState = o.ConditionalState.Clone()
	result.FieldMask = proto.Clone(o.FieldMask).(*port_forwarding_service.PortForwardingService_FieldMask)
	return result
}

func (o *UpdatePortForwardingServiceRequest_CAS) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *UpdatePortForwardingServiceRequest_CAS) Merge(source *UpdatePortForwardingServiceRequest_CAS) {
	if source.GetConditionalState() != nil {
		if o.ConditionalState == nil {
			o.ConditionalState = new(port_forwarding_service.PortForwardingService)
		}
		o.ConditionalState.Merge(source.GetConditionalState())
	}
	if source.GetFieldMask() != nil {
		if o.FieldMask == nil {
			o.FieldMask = new(port_forwarding_service.PortForwardingService_FieldMask)
		}
		mergedMask := fieldmaskpb.Union(source.GetFieldMask().ToProtoFieldMask(), o.FieldMask.ToProtoFieldMask())
		if err := o.FieldMask.FromProtoFieldMask(mergedMask); err != nil {
			panic(err)
		}
	}
}

func (o *UpdatePortForwardingServiceRequest_CAS) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*UpdatePortForwardingServiceRequest_CAS))
}

func (o *DeletePortForwardingServiceRequest) GotenObjectExt() {}

func (o *DeletePortForwardingServiceRequest) MakeFullFieldMask() *DeletePortForwardingServiceRequest_FieldMask {
	return FullDeletePortForwardingServiceRequest_FieldMask()
}

func (o *DeletePortForwardingServiceRequest) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullDeletePortForwardingServiceRequest_FieldMask()
}

func (o *DeletePortForwardingServiceRequest) MakeDiffFieldMask(other *DeletePortForwardingServiceRequest) *DeletePortForwardingServiceRequest_FieldMask {
	if o == nil && other == nil {
		return &DeletePortForwardingServiceRequest_FieldMask{}
	}
	if o == nil || other == nil {
		return FullDeletePortForwardingServiceRequest_FieldMask()
	}

	res := &DeletePortForwardingServiceRequest_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &DeletePortForwardingServiceRequest_FieldTerminalPath{selector: DeletePortForwardingServiceRequest_FieldPathSelectorName})
	}
	return res
}

func (o *DeletePortForwardingServiceRequest) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*DeletePortForwardingServiceRequest))
}

func (o *DeletePortForwardingServiceRequest) Clone() *DeletePortForwardingServiceRequest {
	if o == nil {
		return nil
	}
	result := &DeletePortForwardingServiceRequest{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &port_forwarding_service.Reference{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	return result
}

func (o *DeletePortForwardingServiceRequest) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *DeletePortForwardingServiceRequest) Merge(source *DeletePortForwardingServiceRequest) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &port_forwarding_service.Reference{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
}

func (o *DeletePortForwardingServiceRequest) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*DeletePortForwardingServiceRequest))
}
