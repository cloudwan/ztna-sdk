// Code generated by protoc-gen-goten-resource
// Resource: AccessPoint
// DO NOT EDIT!!!

package access_point

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
)

// ensure the imports are used
var (
	_ = new(gotenresource.ListQuery)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
)

type AccessPointList []*AccessPoint

func (l AccessPointList) Append(item gotenresource.Resource) gotenresource.ResourceList {
	return append(l, item.(*AccessPoint))
}

func (l AccessPointList) AppendList(list gotenresource.ResourceList) gotenresource.ResourceList {
	return append(l, list.(AccessPointList)...)
}

func (l AccessPointList) Slice(first, second int) gotenresource.ResourceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AccessPointList) At(idx int) gotenresource.Resource {
	return l[idx]
}

func (l AccessPointList) Set(idx int, res gotenresource.Resource) {
	l[idx] = res.(*AccessPoint)
}

func (l AccessPointList) Length() int {
	return len(l)
}

type AccessPointChangeList []*AccessPointChange

func (l AccessPointChangeList) Append(item gotenresource.ResourceChange) gotenresource.ResourceChangeList {
	return append(l, item.(*AccessPointChange))
}

func (l AccessPointChangeList) AppendList(list gotenresource.ResourceChangeList) gotenresource.ResourceChangeList {
	return append(l, list.(AccessPointChangeList)...)
}

func (l AccessPointChangeList) Slice(first, second int) gotenresource.ResourceChangeList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AccessPointChangeList) At(idx int) gotenresource.ResourceChange {
	return l[idx]
}

func (l AccessPointChangeList) Set(idx int, change gotenresource.ResourceChange) {
	l[idx] = change.(*AccessPointChange)
}

func (l AccessPointChangeList) Length() int {
	return len(l)
}

type AccessPointNameList []*Name

func (l AccessPointNameList) Append(name gotenresource.Name) gotenresource.NameList {
	return append(l, name.(*Name))
}

func (l AccessPointNameList) AppendList(list gotenresource.NameList) gotenresource.NameList {
	return append(l, list.(AccessPointNameList)...)
}

func (l AccessPointNameList) Slice(first, second int) gotenresource.NameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AccessPointNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l AccessPointNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*Name)
}

func (l AccessPointNameList) Length() int {
	return len(l)
}

type AccessPointReferenceList []*Reference

func (l AccessPointReferenceList) Append(ref gotenresource.Reference) gotenresource.ReferenceList {
	return append(l, ref.(*Reference))
}

func (l AccessPointReferenceList) AppendList(list gotenresource.ReferenceList) gotenresource.ReferenceList {
	return append(l, list.(AccessPointReferenceList)...)
}

func (l AccessPointReferenceList) Slice(first, second int) gotenresource.ReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AccessPointReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l AccessPointReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*Reference)
}

func (l AccessPointReferenceList) Length() int {
	return len(l)
}

type AccessPointParentNameList []*ParentName

func (l AccessPointParentNameList) Append(name gotenresource.Name) gotenresource.ParentNameList {
	return append(l, name.(*ParentName))
}

func (l AccessPointParentNameList) AppendList(list gotenresource.ParentNameList) gotenresource.ParentNameList {
	return append(l, list.(AccessPointParentNameList)...)
}

func (l AccessPointParentNameList) Slice(first, second int) gotenresource.ParentNameList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AccessPointParentNameList) At(idx int) gotenresource.Name {
	return l[idx]
}

func (l AccessPointParentNameList) Set(idx int, name gotenresource.Name) {
	l[idx] = name.(*ParentName)
}

func (l AccessPointParentNameList) Length() int {
	return len(l)
}

type AccessPointParentReferenceList []*ParentReference

func (l AccessPointParentReferenceList) Append(ref gotenresource.Reference) gotenresource.ParentReferenceList {
	return append(l, ref.(*ParentReference))
}

func (l AccessPointParentReferenceList) AppendList(list gotenresource.ParentReferenceList) gotenresource.ParentReferenceList {
	return append(l, list.(AccessPointParentReferenceList)...)
}

func (l AccessPointParentReferenceList) Slice(first, second int) gotenresource.ParentReferenceList {
	if first > 0 && second > 0 {
		return l[first:second]
	} else if first > 0 {
		return l[first:]
	} else if second > 0 {
		return l[:second]
	}
	return l[:]
}

func (l AccessPointParentReferenceList) At(idx int) gotenresource.Reference {
	return l[idx]
}

func (l AccessPointParentReferenceList) Set(idx int, ref gotenresource.Reference) {
	l[idx] = ref.(*ParentReference)
}

func (l AccessPointParentReferenceList) Length() int {
	return len(l)
}

type AccessPointMap map[Name]*AccessPoint

func (m AccessPointMap) Get(name gotenresource.Name) gotenresource.Resource {
	return m[*name.(*Name)]
}

func (m AccessPointMap) Set(res gotenresource.Resource) {
	tRes := res.(*AccessPoint)
	m[*tRes.Name] = tRes
}

func (m AccessPointMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m AccessPointMap) Length() int {
	return len(m)
}

func (m AccessPointMap) ForEach(cb func(gotenresource.Name, gotenresource.Resource) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}

type AccessPointChangeMap map[Name]*AccessPointChange

func (m AccessPointChangeMap) Get(name gotenresource.Name) gotenresource.ResourceChange {
	return m[*name.(*Name)]
}

func (m AccessPointChangeMap) Set(change gotenresource.ResourceChange) {
	tChange := change.(*AccessPointChange)
	m[*tChange.GetAccessPointName()] = tChange
}

func (m AccessPointChangeMap) Delete(name gotenresource.Name) {
	delete(m, *name.(*Name))
}

func (m AccessPointChangeMap) Length() int {
	return len(m)
}

func (m AccessPointChangeMap) ForEach(cb func(gotenresource.Name, gotenresource.ResourceChange) bool) {
	for name, res := range m {
		if !cb(&name, res) {
			break
		}
	}
}
