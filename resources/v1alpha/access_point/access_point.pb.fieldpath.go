// Code generated by protoc-gen-goten-object
// File: ztna/proto/v1alpha/access_point.proto
// DO NOT EDIT!!!

package access_point

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
)

// ensure the imports are used
var (
	_ = json.Marshaler(nil)
	_ = fmt.Stringer(nil)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = proto.Message(nil)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AccessPoint_FieldPath interface {
	gotenobject.FieldPath
	Selector() AccessPoint_FieldPathSelector
	Get(source *AccessPoint) []interface{}
	GetSingle(source *AccessPoint) (interface{}, bool)
	ClearValue(item *AccessPoint)

	// Those methods build corresponding AccessPoint_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AccessPoint_FieldPathValue
	WithIArrayOfValues(values interface{}) AccessPoint_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AccessPoint_FieldPathArrayItemValue
}

type AccessPoint_FieldPathSelector int32

const (
	AccessPoint_FieldPathSelectorName  AccessPoint_FieldPathSelector = 0
	AccessPoint_FieldPathSelectorSpec  AccessPoint_FieldPathSelector = 1
	AccessPoint_FieldPathSelectorStaus AccessPoint_FieldPathSelector = 2
)

func (s AccessPoint_FieldPathSelector) String() string {
	switch s {
	case AccessPoint_FieldPathSelectorName:
		return "name"
	case AccessPoint_FieldPathSelectorSpec:
		return "spec"
	case AccessPoint_FieldPathSelectorStaus:
		return "staus"
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", s))
	}
}

func BuildAccessPoint_FieldPath(fp gotenobject.RawFieldPath) (AccessPoint_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AccessPoint")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &AccessPoint_FieldTerminalPath{selector: AccessPoint_FieldPathSelectorName}, nil
		case "spec":
			return &AccessPoint_FieldTerminalPath{selector: AccessPoint_FieldPathSelectorSpec}, nil
		case "staus":
			return &AccessPoint_FieldTerminalPath{selector: AccessPoint_FieldPathSelectorStaus}, nil
		}
	} else {
		switch fp[0] {
		case "spec":
			if subpath, err := BuildAccessPointStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AccessPoint_FieldSubPath{selector: AccessPoint_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "staus":
			if subpath, err := BuildAccessPointStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &AccessPoint_FieldSubPath{selector: AccessPoint_FieldPathSelectorStaus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AccessPoint", fp)
}

func ParseAccessPoint_FieldPath(rawField string) (AccessPoint_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAccessPoint_FieldPath(fp)
}

func MustParseAccessPoint_FieldPath(rawField string) AccessPoint_FieldPath {
	fp, err := ParseAccessPoint_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AccessPoint_FieldTerminalPath struct {
	selector AccessPoint_FieldPathSelector
}

var _ AccessPoint_FieldPath = (*AccessPoint_FieldTerminalPath)(nil)

func (fp *AccessPoint_FieldTerminalPath) Selector() AccessPoint_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AccessPoint_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AccessPoint_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AccessPoint
func (fp *AccessPoint_FieldTerminalPath) Get(source *AccessPoint) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AccessPoint_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case AccessPoint_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case AccessPoint_FieldPathSelectorStaus:
			if source.Staus != nil {
				values = append(values, source.Staus)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fp.selector))
		}
	}
	return
}

func (fp *AccessPoint_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AccessPoint))
}

// GetSingle returns value pointed by specific field of from source AccessPoint
func (fp *AccessPoint_FieldTerminalPath) GetSingle(source *AccessPoint) (interface{}, bool) {
	switch fp.selector {
	case AccessPoint_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case AccessPoint_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case AccessPoint_FieldPathSelectorStaus:
		res := source.GetStaus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fp.selector))
	}
}

func (fp *AccessPoint_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AccessPoint))
}

// GetDefault returns a default value of the field type
func (fp *AccessPoint_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AccessPoint_FieldPathSelectorName:
		return (*Name)(nil)
	case AccessPoint_FieldPathSelectorSpec:
		return (*AccessPoint_Status)(nil)
	case AccessPoint_FieldPathSelectorStaus:
		return (*AccessPoint_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fp.selector))
	}
}

func (fp *AccessPoint_FieldTerminalPath) ClearValue(item *AccessPoint) {
	if item != nil {
		switch fp.selector {
		case AccessPoint_FieldPathSelectorName:
			item.Name = nil
		case AccessPoint_FieldPathSelectorSpec:
			item.Spec = nil
		case AccessPoint_FieldPathSelectorStaus:
			item.Staus = nil
		default:
			panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fp.selector))
		}
	}
}

func (fp *AccessPoint_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AccessPoint))
}

// IsLeaf - whether field path is holds simple value
func (fp *AccessPoint_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AccessPoint_FieldPathSelectorName
}

func (fp *AccessPoint_FieldTerminalPath) WithIValue(value interface{}) AccessPoint_FieldPathValue {
	switch fp.selector {
	case AccessPoint_FieldPathSelectorName:
		return &AccessPoint_FieldTerminalPathValue{AccessPoint_FieldTerminalPath: *fp, value: value.(*Name)}
	case AccessPoint_FieldPathSelectorSpec:
		return &AccessPoint_FieldTerminalPathValue{AccessPoint_FieldTerminalPath: *fp, value: value.(*AccessPoint_Status)}
	case AccessPoint_FieldPathSelectorStaus:
		return &AccessPoint_FieldTerminalPathValue{AccessPoint_FieldTerminalPath: *fp, value: value.(*AccessPoint_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fp.selector))
	}
}

func (fp *AccessPoint_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AccessPoint_FieldTerminalPath) WithIArrayOfValues(values interface{}) AccessPoint_FieldPathArrayOfValues {
	fpaov := &AccessPoint_FieldTerminalPathArrayOfValues{AccessPoint_FieldTerminalPath: *fp}
	switch fp.selector {
	case AccessPoint_FieldPathSelectorName:
		return &AccessPoint_FieldTerminalPathArrayOfValues{AccessPoint_FieldTerminalPath: *fp, values: values.([]*Name)}
	case AccessPoint_FieldPathSelectorSpec:
		return &AccessPoint_FieldTerminalPathArrayOfValues{AccessPoint_FieldTerminalPath: *fp, values: values.([]*AccessPoint_Status)}
	case AccessPoint_FieldPathSelectorStaus:
		return &AccessPoint_FieldTerminalPathArrayOfValues{AccessPoint_FieldTerminalPath: *fp, values: values.([]*AccessPoint_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fp.selector))
	}
	return fpaov
}

func (fp *AccessPoint_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AccessPoint_FieldTerminalPath) WithIArrayItemValue(value interface{}) AccessPoint_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fp.selector))
	}
}

func (fp *AccessPoint_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type AccessPoint_FieldSubPath struct {
	selector AccessPoint_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ AccessPoint_FieldPath = (*AccessPoint_FieldSubPath)(nil)

func (fps *AccessPoint_FieldSubPath) Selector() AccessPoint_FieldPathSelector {
	return fps.selector
}
func (fps *AccessPoint_FieldSubPath) AsSpecSubPath() (AccessPointStatus_FieldPath, bool) {
	res, ok := fps.subPath.(AccessPointStatus_FieldPath)
	return res, ok
}
func (fps *AccessPoint_FieldSubPath) AsStausSubPath() (AccessPointStatus_FieldPath, bool) {
	res, ok := fps.subPath.(AccessPointStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *AccessPoint_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *AccessPoint_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source AccessPoint
func (fps *AccessPoint_FieldSubPath) Get(source *AccessPoint) (values []interface{}) {
	if asStatusFieldPath, ok := fps.AsSpecSubPath(); ok {
		values = append(values, asStatusFieldPath.Get(source.GetSpec())...)
	} else if asStatusFieldPath, ok := fps.AsStausSubPath(); ok {
		values = append(values, asStatusFieldPath.Get(source.GetStaus())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fps.selector))
	}
	return
}

func (fps *AccessPoint_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*AccessPoint))
}

// GetSingle returns value of selected field from source AccessPoint
func (fps *AccessPoint_FieldSubPath) GetSingle(source *AccessPoint) (interface{}, bool) {
	switch fps.selector {
	case AccessPoint_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case AccessPoint_FieldPathSelectorStaus:
		if source.GetStaus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStaus())
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fps.selector))
	}
}

func (fps *AccessPoint_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*AccessPoint))
}

// GetDefault returns a default value of the field type
func (fps *AccessPoint_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *AccessPoint_FieldSubPath) ClearValue(item *AccessPoint) {
	if item != nil {
		switch fps.selector {
		case AccessPoint_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case AccessPoint_FieldPathSelectorStaus:
			fps.subPath.ClearValueRaw(item.Staus)
		default:
			panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fps.selector))
		}
	}
}

func (fps *AccessPoint_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*AccessPoint))
}

// IsLeaf - whether field path is holds simple value
func (fps *AccessPoint_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *AccessPoint_FieldSubPath) WithIValue(value interface{}) AccessPoint_FieldPathValue {
	return &AccessPoint_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *AccessPoint_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *AccessPoint_FieldSubPath) WithIArrayOfValues(values interface{}) AccessPoint_FieldPathArrayOfValues {
	return &AccessPoint_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *AccessPoint_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *AccessPoint_FieldSubPath) WithIArrayItemValue(value interface{}) AccessPoint_FieldPathArrayItemValue {
	return &AccessPoint_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *AccessPoint_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// AccessPoint_FieldPathValue allows storing values for AccessPoint fields according to their type
type AccessPoint_FieldPathValue interface {
	AccessPoint_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AccessPoint)
	CompareWith(*AccessPoint) (cmp int, comparable bool)
}

func ParseAccessPoint_FieldPathValue(pathStr, valueStr string) (AccessPoint_FieldPathValue, error) {
	fp, err := ParseAccessPoint_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AccessPoint field path value from %s: %v", valueStr, err)
	}
	return fpv.(AccessPoint_FieldPathValue), nil
}

func MustParseAccessPoint_FieldPathValue(pathStr, valueStr string) AccessPoint_FieldPathValue {
	fpv, err := ParseAccessPoint_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AccessPoint_FieldTerminalPathValue struct {
	AccessPoint_FieldTerminalPath
	value interface{}
}

var _ AccessPoint_FieldPathValue = (*AccessPoint_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'AccessPoint' as interface{}
func (fpv *AccessPoint_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AccessPoint_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *AccessPoint_FieldTerminalPathValue) AsSpecValue() (*AccessPoint_Status, bool) {
	res, ok := fpv.value.(*AccessPoint_Status)
	return res, ok
}
func (fpv *AccessPoint_FieldTerminalPathValue) AsStausValue() (*AccessPoint_Status, bool) {
	res, ok := fpv.value.(*AccessPoint_Status)
	return res, ok
}

// SetTo stores value for selected field for object AccessPoint
func (fpv *AccessPoint_FieldTerminalPathValue) SetTo(target **AccessPoint) {
	if *target == nil {
		*target = new(AccessPoint)
	}
	switch fpv.selector {
	case AccessPoint_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case AccessPoint_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*AccessPoint_Status)
	case AccessPoint_FieldPathSelectorStaus:
		(*target).Staus = fpv.value.(*AccessPoint_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fpv.selector))
	}
}

func (fpv *AccessPoint_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AccessPoint)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AccessPoint_FieldTerminalPathValue' with the value under path in 'AccessPoint'.
func (fpv *AccessPoint_FieldTerminalPathValue) CompareWith(source *AccessPoint) (int, bool) {
	switch fpv.selector {
	case AccessPoint_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case AccessPoint_FieldPathSelectorSpec:
		return 0, false
	case AccessPoint_FieldPathSelectorStaus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fpv.selector))
	}
}

func (fpv *AccessPoint_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AccessPoint))
}

type AccessPoint_FieldSubPathValue struct {
	AccessPoint_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ AccessPoint_FieldPathValue = (*AccessPoint_FieldSubPathValue)(nil)

func (fpvs *AccessPoint_FieldSubPathValue) AsSpecPathValue() (AccessPointStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AccessPointStatus_FieldPathValue)
	return res, ok
}
func (fpvs *AccessPoint_FieldSubPathValue) AsStausPathValue() (AccessPointStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(AccessPointStatus_FieldPathValue)
	return res, ok
}

func (fpvs *AccessPoint_FieldSubPathValue) SetTo(target **AccessPoint) {
	if *target == nil {
		*target = new(AccessPoint)
	}
	switch fpvs.Selector() {
	case AccessPoint_FieldPathSelectorSpec:
		fpvs.subPathValue.(AccessPointStatus_FieldPathValue).SetTo(&(*target).Spec)
	case AccessPoint_FieldPathSelectorStaus:
		fpvs.subPathValue.(AccessPointStatus_FieldPathValue).SetTo(&(*target).Staus)
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fpvs.Selector()))
	}
}

func (fpvs *AccessPoint_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AccessPoint)
	fpvs.SetTo(&typedObject)
}

func (fpvs *AccessPoint_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *AccessPoint_FieldSubPathValue) CompareWith(source *AccessPoint) (int, bool) {
	switch fpvs.Selector() {
	case AccessPoint_FieldPathSelectorSpec:
		return fpvs.subPathValue.(AccessPointStatus_FieldPathValue).CompareWith(source.GetSpec())
	case AccessPoint_FieldPathSelectorStaus:
		return fpvs.subPathValue.(AccessPointStatus_FieldPathValue).CompareWith(source.GetStaus())
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fpvs.Selector()))
	}
}

func (fpvs *AccessPoint_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*AccessPoint))
}

// AccessPoint_FieldPathArrayItemValue allows storing single item in Path-specific values for AccessPoint according to their type
// Present only for array (repeated) types.
type AccessPoint_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AccessPoint_FieldPath
	ContainsValue(*AccessPoint) bool
}

// ParseAccessPoint_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAccessPoint_FieldPathArrayItemValue(pathStr, valueStr string) (AccessPoint_FieldPathArrayItemValue, error) {
	fp, err := ParseAccessPoint_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AccessPoint field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AccessPoint_FieldPathArrayItemValue), nil
}

func MustParseAccessPoint_FieldPathArrayItemValue(pathStr, valueStr string) AccessPoint_FieldPathArrayItemValue {
	fpaiv, err := ParseAccessPoint_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AccessPoint_FieldTerminalPathArrayItemValue struct {
	AccessPoint_FieldTerminalPath
	value interface{}
}

var _ AccessPoint_FieldPathArrayItemValue = (*AccessPoint_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AccessPoint as interface{}
func (fpaiv *AccessPoint_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AccessPoint_FieldTerminalPathArrayItemValue) GetSingle(source *AccessPoint) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AccessPoint_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AccessPoint))
}

// Contains returns a boolean indicating if value that is being held is present in given 'AccessPoint'
func (fpaiv *AccessPoint_FieldTerminalPathArrayItemValue) ContainsValue(source *AccessPoint) bool {
	slice := fpaiv.AccessPoint_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type AccessPoint_FieldSubPathArrayItemValue struct {
	AccessPoint_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *AccessPoint_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *AccessPoint_FieldSubPathArrayItemValue) AsSpecPathItemValue() (AccessPointStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AccessPointStatus_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *AccessPoint_FieldSubPathArrayItemValue) AsStausPathItemValue() (AccessPointStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(AccessPointStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'AccessPoint'
func (fpaivs *AccessPoint_FieldSubPathArrayItemValue) ContainsValue(source *AccessPoint) bool {
	switch fpaivs.Selector() {
	case AccessPoint_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(AccessPointStatus_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case AccessPoint_FieldPathSelectorStaus:
		return fpaivs.subPathItemValue.(AccessPointStatus_FieldPathArrayItemValue).ContainsValue(source.GetStaus())
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint: %d", fpaivs.Selector()))
	}
}

// AccessPoint_FieldPathArrayOfValues allows storing slice of values for AccessPoint fields according to their type
type AccessPoint_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AccessPoint_FieldPath
}

func ParseAccessPoint_FieldPathArrayOfValues(pathStr, valuesStr string) (AccessPoint_FieldPathArrayOfValues, error) {
	fp, err := ParseAccessPoint_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing AccessPoint field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AccessPoint_FieldPathArrayOfValues), nil
}

func MustParseAccessPoint_FieldPathArrayOfValues(pathStr, valuesStr string) AccessPoint_FieldPathArrayOfValues {
	fpaov, err := ParseAccessPoint_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AccessPoint_FieldTerminalPathArrayOfValues struct {
	AccessPoint_FieldTerminalPath
	values interface{}
}

var _ AccessPoint_FieldPathArrayOfValues = (*AccessPoint_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AccessPoint_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AccessPoint_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case AccessPoint_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*AccessPoint_Status) {
			values = append(values, v)
		}
	case AccessPoint_FieldPathSelectorStaus:
		for _, v := range fpaov.values.([]*AccessPoint_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AccessPoint_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *AccessPoint_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*AccessPoint_Status, bool) {
	res, ok := fpaov.values.([]*AccessPoint_Status)
	return res, ok
}
func (fpaov *AccessPoint_FieldTerminalPathArrayOfValues) AsStausArrayOfValues() ([]*AccessPoint_Status, bool) {
	res, ok := fpaov.values.([]*AccessPoint_Status)
	return res, ok
}

type AccessPoint_FieldSubPathArrayOfValues struct {
	AccessPoint_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ AccessPoint_FieldPathArrayOfValues = (*AccessPoint_FieldSubPathArrayOfValues)(nil)

func (fpsaov *AccessPoint_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *AccessPoint_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (AccessPointStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AccessPointStatus_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *AccessPoint_FieldSubPathArrayOfValues) AsStausPathArrayOfValues() (AccessPointStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(AccessPointStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AccessPointSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() AccessPointSpec_FieldPathSelector
	Get(source *AccessPoint_Spec) []interface{}
	GetSingle(source *AccessPoint_Spec) (interface{}, bool)
	ClearValue(item *AccessPoint_Spec)

	// Those methods build corresponding AccessPointSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AccessPointSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) AccessPointSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AccessPointSpec_FieldPathArrayItemValue
}

type AccessPointSpec_FieldPathSelector int32

const (
	AccessPointSpec_FieldPathSelectorAddressingMode AccessPointSpec_FieldPathSelector = 0
	AccessPointSpec_FieldPathSelectorAddress        AccessPointSpec_FieldPathSelector = 1
)

func (s AccessPointSpec_FieldPathSelector) String() string {
	switch s {
	case AccessPointSpec_FieldPathSelectorAddressingMode:
		return "addressing_mode"
	case AccessPointSpec_FieldPathSelectorAddress:
		return "address"
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Spec: %d", s))
	}
}

func BuildAccessPointSpec_FieldPath(fp gotenobject.RawFieldPath) (AccessPointSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AccessPoint_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "addressing_mode", "addressingMode", "addressing-mode":
			return &AccessPointSpec_FieldTerminalPath{selector: AccessPointSpec_FieldPathSelectorAddressingMode}, nil
		case "address":
			return &AccessPointSpec_FieldTerminalPath{selector: AccessPointSpec_FieldPathSelectorAddress}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AccessPoint_Spec", fp)
}

func ParseAccessPointSpec_FieldPath(rawField string) (AccessPointSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAccessPointSpec_FieldPath(fp)
}

func MustParseAccessPointSpec_FieldPath(rawField string) AccessPointSpec_FieldPath {
	fp, err := ParseAccessPointSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AccessPointSpec_FieldTerminalPath struct {
	selector AccessPointSpec_FieldPathSelector
}

var _ AccessPointSpec_FieldPath = (*AccessPointSpec_FieldTerminalPath)(nil)

func (fp *AccessPointSpec_FieldTerminalPath) Selector() AccessPointSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AccessPointSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AccessPointSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AccessPoint_Spec
func (fp *AccessPointSpec_FieldTerminalPath) Get(source *AccessPoint_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AccessPointSpec_FieldPathSelectorAddressingMode:
			values = append(values, source.AddressingMode)
		case AccessPointSpec_FieldPathSelectorAddress:
			values = append(values, source.Address)
		default:
			panic(fmt.Sprintf("Invalid selector for AccessPoint_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *AccessPointSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AccessPoint_Spec))
}

// GetSingle returns value pointed by specific field of from source AccessPoint_Spec
func (fp *AccessPointSpec_FieldTerminalPath) GetSingle(source *AccessPoint_Spec) (interface{}, bool) {
	switch fp.selector {
	case AccessPointSpec_FieldPathSelectorAddressingMode:
		return source.GetAddressingMode(), source != nil
	case AccessPointSpec_FieldPathSelectorAddress:
		return source.GetAddress(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Spec: %d", fp.selector))
	}
}

func (fp *AccessPointSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AccessPoint_Spec))
}

// GetDefault returns a default value of the field type
func (fp *AccessPointSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AccessPointSpec_FieldPathSelectorAddressingMode:
		return AccessPoint_Spec_ADDRESSING_MODE_UNSPECIFIED
	case AccessPointSpec_FieldPathSelectorAddress:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Spec: %d", fp.selector))
	}
}

func (fp *AccessPointSpec_FieldTerminalPath) ClearValue(item *AccessPoint_Spec) {
	if item != nil {
		switch fp.selector {
		case AccessPointSpec_FieldPathSelectorAddressingMode:
			item.AddressingMode = AccessPoint_Spec_ADDRESSING_MODE_UNSPECIFIED
		case AccessPointSpec_FieldPathSelectorAddress:
			item.Address = ""
		default:
			panic(fmt.Sprintf("Invalid selector for AccessPoint_Spec: %d", fp.selector))
		}
	}
}

func (fp *AccessPointSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AccessPoint_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *AccessPointSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AccessPointSpec_FieldPathSelectorAddressingMode ||
		fp.selector == AccessPointSpec_FieldPathSelectorAddress
}

func (fp *AccessPointSpec_FieldTerminalPath) WithIValue(value interface{}) AccessPointSpec_FieldPathValue {
	switch fp.selector {
	case AccessPointSpec_FieldPathSelectorAddressingMode:
		return &AccessPointSpec_FieldTerminalPathValue{AccessPointSpec_FieldTerminalPath: *fp, value: value.(AccessPoint_Spec_AddressingMode)}
	case AccessPointSpec_FieldPathSelectorAddress:
		return &AccessPointSpec_FieldTerminalPathValue{AccessPointSpec_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Spec: %d", fp.selector))
	}
}

func (fp *AccessPointSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AccessPointSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) AccessPointSpec_FieldPathArrayOfValues {
	fpaov := &AccessPointSpec_FieldTerminalPathArrayOfValues{AccessPointSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case AccessPointSpec_FieldPathSelectorAddressingMode:
		return &AccessPointSpec_FieldTerminalPathArrayOfValues{AccessPointSpec_FieldTerminalPath: *fp, values: values.([]AccessPoint_Spec_AddressingMode)}
	case AccessPointSpec_FieldPathSelectorAddress:
		return &AccessPointSpec_FieldTerminalPathArrayOfValues{AccessPointSpec_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *AccessPointSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AccessPointSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) AccessPointSpec_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Spec: %d", fp.selector))
	}
}

func (fp *AccessPointSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// AccessPointSpec_FieldPathValue allows storing values for Spec fields according to their type
type AccessPointSpec_FieldPathValue interface {
	AccessPointSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AccessPoint_Spec)
	CompareWith(*AccessPoint_Spec) (cmp int, comparable bool)
}

func ParseAccessPointSpec_FieldPathValue(pathStr, valueStr string) (AccessPointSpec_FieldPathValue, error) {
	fp, err := ParseAccessPointSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(AccessPointSpec_FieldPathValue), nil
}

func MustParseAccessPointSpec_FieldPathValue(pathStr, valueStr string) AccessPointSpec_FieldPathValue {
	fpv, err := ParseAccessPointSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AccessPointSpec_FieldTerminalPathValue struct {
	AccessPointSpec_FieldTerminalPath
	value interface{}
}

var _ AccessPointSpec_FieldPathValue = (*AccessPointSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *AccessPointSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AccessPointSpec_FieldTerminalPathValue) AsAddressingModeValue() (AccessPoint_Spec_AddressingMode, bool) {
	res, ok := fpv.value.(AccessPoint_Spec_AddressingMode)
	return res, ok
}
func (fpv *AccessPointSpec_FieldTerminalPathValue) AsAddressValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *AccessPointSpec_FieldTerminalPathValue) SetTo(target **AccessPoint_Spec) {
	if *target == nil {
		*target = new(AccessPoint_Spec)
	}
	switch fpv.selector {
	case AccessPointSpec_FieldPathSelectorAddressingMode:
		(*target).AddressingMode = fpv.value.(AccessPoint_Spec_AddressingMode)
	case AccessPointSpec_FieldPathSelectorAddress:
		(*target).Address = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Spec: %d", fpv.selector))
	}
}

func (fpv *AccessPointSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AccessPoint_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AccessPointSpec_FieldTerminalPathValue' with the value under path in 'AccessPoint_Spec'.
func (fpv *AccessPointSpec_FieldTerminalPathValue) CompareWith(source *AccessPoint_Spec) (int, bool) {
	switch fpv.selector {
	case AccessPointSpec_FieldPathSelectorAddressingMode:
		leftValue := fpv.value.(AccessPoint_Spec_AddressingMode)
		rightValue := source.GetAddressingMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AccessPointSpec_FieldPathSelectorAddress:
		leftValue := fpv.value.(string)
		rightValue := source.GetAddress()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Spec: %d", fpv.selector))
	}
}

func (fpv *AccessPointSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AccessPoint_Spec))
}

// AccessPointSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type AccessPointSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AccessPointSpec_FieldPath
	ContainsValue(*AccessPoint_Spec) bool
}

// ParseAccessPointSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAccessPointSpec_FieldPathArrayItemValue(pathStr, valueStr string) (AccessPointSpec_FieldPathArrayItemValue, error) {
	fp, err := ParseAccessPointSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AccessPointSpec_FieldPathArrayItemValue), nil
}

func MustParseAccessPointSpec_FieldPathArrayItemValue(pathStr, valueStr string) AccessPointSpec_FieldPathArrayItemValue {
	fpaiv, err := ParseAccessPointSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AccessPointSpec_FieldTerminalPathArrayItemValue struct {
	AccessPointSpec_FieldTerminalPath
	value interface{}
}

var _ AccessPointSpec_FieldPathArrayItemValue = (*AccessPointSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AccessPoint_Spec as interface{}
func (fpaiv *AccessPointSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AccessPointSpec_FieldTerminalPathArrayItemValue) GetSingle(source *AccessPoint_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AccessPointSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AccessPoint_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *AccessPointSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *AccessPoint_Spec) bool {
	slice := fpaiv.AccessPointSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// AccessPointSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type AccessPointSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AccessPointSpec_FieldPath
}

func ParseAccessPointSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (AccessPointSpec_FieldPathArrayOfValues, error) {
	fp, err := ParseAccessPointSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AccessPointSpec_FieldPathArrayOfValues), nil
}

func MustParseAccessPointSpec_FieldPathArrayOfValues(pathStr, valuesStr string) AccessPointSpec_FieldPathArrayOfValues {
	fpaov, err := ParseAccessPointSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AccessPointSpec_FieldTerminalPathArrayOfValues struct {
	AccessPointSpec_FieldTerminalPath
	values interface{}
}

var _ AccessPointSpec_FieldPathArrayOfValues = (*AccessPointSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AccessPointSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AccessPointSpec_FieldPathSelectorAddressingMode:
		for _, v := range fpaov.values.([]AccessPoint_Spec_AddressingMode) {
			values = append(values, v)
		}
	case AccessPointSpec_FieldPathSelectorAddress:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AccessPointSpec_FieldTerminalPathArrayOfValues) AsAddressingModeArrayOfValues() ([]AccessPoint_Spec_AddressingMode, bool) {
	res, ok := fpaov.values.([]AccessPoint_Spec_AddressingMode)
	return res, ok
}
func (fpaov *AccessPointSpec_FieldTerminalPathArrayOfValues) AsAddressArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type AccessPointStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() AccessPointStatus_FieldPathSelector
	Get(source *AccessPoint_Status) []interface{}
	GetSingle(source *AccessPoint_Status) (interface{}, bool)
	ClearValue(item *AccessPoint_Status)

	// Those methods build corresponding AccessPointStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) AccessPointStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) AccessPointStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) AccessPointStatus_FieldPathArrayItemValue
}

type AccessPointStatus_FieldPathSelector int32

const (
	AccessPointStatus_FieldPathSelectorIpAddressV4 AccessPointStatus_FieldPathSelector = 0
	AccessPointStatus_FieldPathSelectorIpAddressV6 AccessPointStatus_FieldPathSelector = 1
)

func (s AccessPointStatus_FieldPathSelector) String() string {
	switch s {
	case AccessPointStatus_FieldPathSelectorIpAddressV4:
		return "ip_address_v4"
	case AccessPointStatus_FieldPathSelectorIpAddressV6:
		return "ip_address_v6"
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Status: %d", s))
	}
}

func BuildAccessPointStatus_FieldPath(fp gotenobject.RawFieldPath) (AccessPointStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object AccessPoint_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "ip_address_v4", "ipAddressV4", "ip-address-v4":
			return &AccessPointStatus_FieldTerminalPath{selector: AccessPointStatus_FieldPathSelectorIpAddressV4}, nil
		case "ip_address_v6", "ipAddressV6", "ip-address-v6":
			return &AccessPointStatus_FieldTerminalPath{selector: AccessPointStatus_FieldPathSelectorIpAddressV6}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object AccessPoint_Status", fp)
}

func ParseAccessPointStatus_FieldPath(rawField string) (AccessPointStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildAccessPointStatus_FieldPath(fp)
}

func MustParseAccessPointStatus_FieldPath(rawField string) AccessPointStatus_FieldPath {
	fp, err := ParseAccessPointStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type AccessPointStatus_FieldTerminalPath struct {
	selector AccessPointStatus_FieldPathSelector
}

var _ AccessPointStatus_FieldPath = (*AccessPointStatus_FieldTerminalPath)(nil)

func (fp *AccessPointStatus_FieldTerminalPath) Selector() AccessPointStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *AccessPointStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *AccessPointStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source AccessPoint_Status
func (fp *AccessPointStatus_FieldTerminalPath) Get(source *AccessPoint_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case AccessPointStatus_FieldPathSelectorIpAddressV4:
			values = append(values, source.IpAddressV4)
		case AccessPointStatus_FieldPathSelectorIpAddressV6:
			values = append(values, source.IpAddressV6)
		default:
			panic(fmt.Sprintf("Invalid selector for AccessPoint_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *AccessPointStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*AccessPoint_Status))
}

// GetSingle returns value pointed by specific field of from source AccessPoint_Status
func (fp *AccessPointStatus_FieldTerminalPath) GetSingle(source *AccessPoint_Status) (interface{}, bool) {
	switch fp.selector {
	case AccessPointStatus_FieldPathSelectorIpAddressV4:
		return source.GetIpAddressV4(), source != nil
	case AccessPointStatus_FieldPathSelectorIpAddressV6:
		return source.GetIpAddressV6(), source != nil
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Status: %d", fp.selector))
	}
}

func (fp *AccessPointStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*AccessPoint_Status))
}

// GetDefault returns a default value of the field type
func (fp *AccessPointStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case AccessPointStatus_FieldPathSelectorIpAddressV4:
		return ""
	case AccessPointStatus_FieldPathSelectorIpAddressV6:
		return ""
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Status: %d", fp.selector))
	}
}

func (fp *AccessPointStatus_FieldTerminalPath) ClearValue(item *AccessPoint_Status) {
	if item != nil {
		switch fp.selector {
		case AccessPointStatus_FieldPathSelectorIpAddressV4:
			item.IpAddressV4 = ""
		case AccessPointStatus_FieldPathSelectorIpAddressV6:
			item.IpAddressV6 = ""
		default:
			panic(fmt.Sprintf("Invalid selector for AccessPoint_Status: %d", fp.selector))
		}
	}
}

func (fp *AccessPointStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*AccessPoint_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *AccessPointStatus_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == AccessPointStatus_FieldPathSelectorIpAddressV4 ||
		fp.selector == AccessPointStatus_FieldPathSelectorIpAddressV6
}

func (fp *AccessPointStatus_FieldTerminalPath) WithIValue(value interface{}) AccessPointStatus_FieldPathValue {
	switch fp.selector {
	case AccessPointStatus_FieldPathSelectorIpAddressV4:
		return &AccessPointStatus_FieldTerminalPathValue{AccessPointStatus_FieldTerminalPath: *fp, value: value.(string)}
	case AccessPointStatus_FieldPathSelectorIpAddressV6:
		return &AccessPointStatus_FieldTerminalPathValue{AccessPointStatus_FieldTerminalPath: *fp, value: value.(string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Status: %d", fp.selector))
	}
}

func (fp *AccessPointStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *AccessPointStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) AccessPointStatus_FieldPathArrayOfValues {
	fpaov := &AccessPointStatus_FieldTerminalPathArrayOfValues{AccessPointStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	case AccessPointStatus_FieldPathSelectorIpAddressV4:
		return &AccessPointStatus_FieldTerminalPathArrayOfValues{AccessPointStatus_FieldTerminalPath: *fp, values: values.([]string)}
	case AccessPointStatus_FieldPathSelectorIpAddressV6:
		return &AccessPointStatus_FieldTerminalPathArrayOfValues{AccessPointStatus_FieldTerminalPath: *fp, values: values.([]string)}
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *AccessPointStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *AccessPointStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) AccessPointStatus_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Status: %d", fp.selector))
	}
}

func (fp *AccessPointStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// AccessPointStatus_FieldPathValue allows storing values for Status fields according to their type
type AccessPointStatus_FieldPathValue interface {
	AccessPointStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **AccessPoint_Status)
	CompareWith(*AccessPoint_Status) (cmp int, comparable bool)
}

func ParseAccessPointStatus_FieldPathValue(pathStr, valueStr string) (AccessPointStatus_FieldPathValue, error) {
	fp, err := ParseAccessPointStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(AccessPointStatus_FieldPathValue), nil
}

func MustParseAccessPointStatus_FieldPathValue(pathStr, valueStr string) AccessPointStatus_FieldPathValue {
	fpv, err := ParseAccessPointStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type AccessPointStatus_FieldTerminalPathValue struct {
	AccessPointStatus_FieldTerminalPath
	value interface{}
}

var _ AccessPointStatus_FieldPathValue = (*AccessPointStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *AccessPointStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *AccessPointStatus_FieldTerminalPathValue) AsIpAddressV4Value() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *AccessPointStatus_FieldTerminalPathValue) AsIpAddressV6Value() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}

// SetTo stores value for selected field for object Status
func (fpv *AccessPointStatus_FieldTerminalPathValue) SetTo(target **AccessPoint_Status) {
	if *target == nil {
		*target = new(AccessPoint_Status)
	}
	switch fpv.selector {
	case AccessPointStatus_FieldPathSelectorIpAddressV4:
		(*target).IpAddressV4 = fpv.value.(string)
	case AccessPointStatus_FieldPathSelectorIpAddressV6:
		(*target).IpAddressV6 = fpv.value.(string)
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Status: %d", fpv.selector))
	}
}

func (fpv *AccessPointStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*AccessPoint_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'AccessPointStatus_FieldTerminalPathValue' with the value under path in 'AccessPoint_Status'.
func (fpv *AccessPointStatus_FieldTerminalPathValue) CompareWith(source *AccessPoint_Status) (int, bool) {
	switch fpv.selector {
	case AccessPointStatus_FieldPathSelectorIpAddressV4:
		leftValue := fpv.value.(string)
		rightValue := source.GetIpAddressV4()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case AccessPointStatus_FieldPathSelectorIpAddressV6:
		leftValue := fpv.value.(string)
		rightValue := source.GetIpAddressV6()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	default:
		panic(fmt.Sprintf("Invalid selector for AccessPoint_Status: %d", fpv.selector))
	}
}

func (fpv *AccessPointStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*AccessPoint_Status))
}

// AccessPointStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type AccessPointStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	AccessPointStatus_FieldPath
	ContainsValue(*AccessPoint_Status) bool
}

// ParseAccessPointStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParseAccessPointStatus_FieldPathArrayItemValue(pathStr, valueStr string) (AccessPointStatus_FieldPathArrayItemValue, error) {
	fp, err := ParseAccessPointStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(AccessPointStatus_FieldPathArrayItemValue), nil
}

func MustParseAccessPointStatus_FieldPathArrayItemValue(pathStr, valueStr string) AccessPointStatus_FieldPathArrayItemValue {
	fpaiv, err := ParseAccessPointStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type AccessPointStatus_FieldTerminalPathArrayItemValue struct {
	AccessPointStatus_FieldTerminalPath
	value interface{}
}

var _ AccessPointStatus_FieldPathArrayItemValue = (*AccessPointStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object AccessPoint_Status as interface{}
func (fpaiv *AccessPointStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *AccessPointStatus_FieldTerminalPathArrayItemValue) GetSingle(source *AccessPoint_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *AccessPointStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*AccessPoint_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *AccessPointStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *AccessPoint_Status) bool {
	slice := fpaiv.AccessPointStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// AccessPointStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type AccessPointStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	AccessPointStatus_FieldPath
}

func ParseAccessPointStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (AccessPointStatus_FieldPathArrayOfValues, error) {
	fp, err := ParseAccessPointStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(AccessPointStatus_FieldPathArrayOfValues), nil
}

func MustParseAccessPointStatus_FieldPathArrayOfValues(pathStr, valuesStr string) AccessPointStatus_FieldPathArrayOfValues {
	fpaov, err := ParseAccessPointStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type AccessPointStatus_FieldTerminalPathArrayOfValues struct {
	AccessPointStatus_FieldTerminalPath
	values interface{}
}

var _ AccessPointStatus_FieldPathArrayOfValues = (*AccessPointStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *AccessPointStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case AccessPointStatus_FieldPathSelectorIpAddressV4:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case AccessPointStatus_FieldPathSelectorIpAddressV6:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *AccessPointStatus_FieldTerminalPathArrayOfValues) AsIpAddressV4ArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *AccessPointStatus_FieldTerminalPathArrayOfValues) AsIpAddressV6ArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
