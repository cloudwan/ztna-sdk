// Code generated by protoc-gen-goten-resource
// Resource: AccessPoint
// DO NOT EDIT!!!

package access_point

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
	gotenfilter "github.com/cloudwan/goten-sdk/runtime/resource/filter"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_organization "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/organization"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	syncing_meta "github.com/cloudwan/edgelq-sdk/meta/multi_region/proto/syncing_meta"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
)

// ensure the imports are used
var (
	_ = gotenresource.ConditionContainsTypeAll
	_ = gotenfilter.AND
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_organization.Organization{}
	_ = &iam_project.Project{}
	_ = &syncing_meta.SyncingMeta{}
	_ = &timestamp.Timestamp{}
)

type FilterBuilderOrCondition interface {
	_IsAccessPointFilterBuilderOrCondition()
}

type FilterBuilder struct {
	conds  []FilterCondition
	useNot bool
	op     gotenfilter.CompositeOperator
}

func NewFilterBuilder() *FilterBuilder {
	return NewAndFilterBuilder()
}

func NewAndFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.AND,
	}
}

func NewOrFilterBuilder() *FilterBuilder {
	return &FilterBuilder{
		op: gotenfilter.OR,
	}
}

func (b *FilterBuilder) _IsAccessPointFilterBuilderOrCondition() {}

func (b *FilterBuilder) With(condOrBuilder FilterBuilderOrCondition, opts ...gotenfilter.FilterConditionOption) *FilterBuilder {
	var cond FilterCondition
	switch typedObj := condOrBuilder.(type) {
	case *Filter:
		cond = typedObj.GetCondition()
	case *FilterBuilder:
		cond = &FilterConditionComposite{Operator: typedObj.op, Conditions: typedObj.conds}
	case FilterCondition:
		cond = typedObj
	default:
		panic("Unknown condition or builder type")
	}
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	if cfg.IsNot() {
		cond = &FilterConditionNot{cond}
	}
	b.conds = append(b.conds, cond)
	return b
}

func (b *FilterBuilder) Where(opts ...gotenfilter.FilterConditionOption) *filterCndBuilder {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilder{builder: b}
}

func (b *FilterBuilder) WherePath(fp AccessPoint_FieldPath, opts ...gotenfilter.FilterConditionOption) *filterCndBuilderAnyPath {
	cfg := gotenfilter.MakeFilterCondOptions(opts)
	b.useNot = cfg.IsNot()
	return &filterCndBuilderAnyPath{builder: b, fp: fp}
}

func (b *FilterBuilder) Filter() *Filter {
	return &Filter{
		FilterCondition: &FilterConditionComposite{Operator: b.op, Conditions: b.conds},
	}
}

func (b *FilterBuilder) addCond(cond FilterCondition) *FilterBuilder {
	if b.useNot {
		cond = &FilterConditionNot{cond}
		b.useNot = false
	}
	b.conds = append(b.conds, cond)
	return b
}

type filterCndBuilderAnyPath struct {
	builder *FilterBuilder
	fp      AccessPoint_FieldPath
}

func (b *filterCndBuilderAnyPath) Eq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderAnyPath) Neq(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderAnyPath) Gt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderAnyPath) Gte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderAnyPath) Lt(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderAnyPath) Lte(value interface{}) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderAnyPath) In(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AccessPoint_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) NotIn(values interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AccessPoint_FieldPathArrayOfValues: b.fp.WithIArrayOfValues(values),
	})
}

func (b *filterCndBuilderAnyPath) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: b.fp,
	})
}

func (b *filterCndBuilderAnyPath) compare(op gotenfilter.CompareOperator, value interface{}) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		AccessPoint_FieldPathValue: b.fp.WithIValue(value),
	})
}

type filterCndBuilder struct {
	builder *FilterBuilder
}

func (b *filterCndBuilder) Name() *filterCndBuilderName {
	return &filterCndBuilderName{builder: b.builder}
}

func (b *filterCndBuilder) Spec() *filterCndBuilderSpec {
	return &filterCndBuilderSpec{builder: b.builder}
}

func (b *filterCndBuilder) Staus() *filterCndBuilderStaus {
	return &filterCndBuilderStaus{builder: b.builder}
}

type filterCndBuilderName struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderName) Eq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderName) Neq(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderName) Gt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderName) Gte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderName) Lt(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderName) Lte(value *Name) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderName) In(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AccessPoint_FieldPathArrayOfValues: NewAccessPointFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) NotIn(values []*Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AccessPoint_FieldPathArrayOfValues: NewAccessPointFieldPathBuilder().Name().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderName) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAccessPointFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAccessPointFieldPathBuilder().Name().FieldPath(),
	})
}

func (b *filterCndBuilderName) compare(op gotenfilter.CompareOperator, value *Name) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		AccessPoint_FieldPathValue: NewAccessPointFieldPathBuilder().Name().WithValue(value),
	})
}

type filterCndBuilderSpec struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpec) Eq(value *AccessPoint_Status) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpec) Neq(value *AccessPoint_Status) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpec) Gt(value *AccessPoint_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpec) Gte(value *AccessPoint_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpec) Lt(value *AccessPoint_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpec) Lte(value *AccessPoint_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpec) In(values []*AccessPoint_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AccessPoint_FieldPathArrayOfValues: NewAccessPointFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) NotIn(values []*AccessPoint_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AccessPoint_FieldPathArrayOfValues: NewAccessPointFieldPathBuilder().Spec().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpec) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAccessPointFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAccessPointFieldPathBuilder().Spec().FieldPath(),
	})
}

func (b *filterCndBuilderSpec) compare(op gotenfilter.CompareOperator, value *AccessPoint_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		AccessPoint_FieldPathValue: NewAccessPointFieldPathBuilder().Spec().WithValue(value),
	})
}

func (b *filterCndBuilderSpec) IpAddressV4() *filterCndBuilderSpecIpAddressV4 {
	return &filterCndBuilderSpecIpAddressV4{builder: b.builder}
}

func (b *filterCndBuilderSpec) IpAddressV6() *filterCndBuilderSpecIpAddressV6 {
	return &filterCndBuilderSpecIpAddressV6{builder: b.builder}
}

type filterCndBuilderSpecIpAddressV4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecIpAddressV4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecIpAddressV4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecIpAddressV4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecIpAddressV4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecIpAddressV4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecIpAddressV4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecIpAddressV4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AccessPoint_FieldPathArrayOfValues: NewAccessPointFieldPathBuilder().Spec().IpAddressV4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecIpAddressV4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AccessPoint_FieldPathArrayOfValues: NewAccessPointFieldPathBuilder().Spec().IpAddressV4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecIpAddressV4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAccessPointFieldPathBuilder().Spec().IpAddressV4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecIpAddressV4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAccessPointFieldPathBuilder().Spec().IpAddressV4().FieldPath(),
	})
}

func (b *filterCndBuilderSpecIpAddressV4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		AccessPoint_FieldPathValue: NewAccessPointFieldPathBuilder().Spec().IpAddressV4().WithValue(value),
	})
}

type filterCndBuilderSpecIpAddressV6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderSpecIpAddressV6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderSpecIpAddressV6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderSpecIpAddressV6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderSpecIpAddressV6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderSpecIpAddressV6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderSpecIpAddressV6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderSpecIpAddressV6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AccessPoint_FieldPathArrayOfValues: NewAccessPointFieldPathBuilder().Spec().IpAddressV6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecIpAddressV6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AccessPoint_FieldPathArrayOfValues: NewAccessPointFieldPathBuilder().Spec().IpAddressV6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderSpecIpAddressV6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAccessPointFieldPathBuilder().Spec().IpAddressV6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecIpAddressV6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAccessPointFieldPathBuilder().Spec().IpAddressV6().FieldPath(),
	})
}

func (b *filterCndBuilderSpecIpAddressV6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		AccessPoint_FieldPathValue: NewAccessPointFieldPathBuilder().Spec().IpAddressV6().WithValue(value),
	})
}

type filterCndBuilderStaus struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStaus) Eq(value *AccessPoint_Status) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStaus) Neq(value *AccessPoint_Status) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStaus) Gt(value *AccessPoint_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStaus) Gte(value *AccessPoint_Status) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStaus) Lt(value *AccessPoint_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStaus) Lte(value *AccessPoint_Status) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStaus) In(values []*AccessPoint_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AccessPoint_FieldPathArrayOfValues: NewAccessPointFieldPathBuilder().Staus().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStaus) NotIn(values []*AccessPoint_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AccessPoint_FieldPathArrayOfValues: NewAccessPointFieldPathBuilder().Staus().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStaus) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAccessPointFieldPathBuilder().Staus().FieldPath(),
	})
}

func (b *filterCndBuilderStaus) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAccessPointFieldPathBuilder().Staus().FieldPath(),
	})
}

func (b *filterCndBuilderStaus) compare(op gotenfilter.CompareOperator, value *AccessPoint_Status) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		AccessPoint_FieldPathValue: NewAccessPointFieldPathBuilder().Staus().WithValue(value),
	})
}

func (b *filterCndBuilderStaus) IpAddressV4() *filterCndBuilderStausIpAddressV4 {
	return &filterCndBuilderStausIpAddressV4{builder: b.builder}
}

func (b *filterCndBuilderStaus) IpAddressV6() *filterCndBuilderStausIpAddressV6 {
	return &filterCndBuilderStausIpAddressV6{builder: b.builder}
}

type filterCndBuilderStausIpAddressV4 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStausIpAddressV4) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStausIpAddressV4) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStausIpAddressV4) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStausIpAddressV4) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStausIpAddressV4) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStausIpAddressV4) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStausIpAddressV4) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AccessPoint_FieldPathArrayOfValues: NewAccessPointFieldPathBuilder().Staus().IpAddressV4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStausIpAddressV4) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AccessPoint_FieldPathArrayOfValues: NewAccessPointFieldPathBuilder().Staus().IpAddressV4().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStausIpAddressV4) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAccessPointFieldPathBuilder().Staus().IpAddressV4().FieldPath(),
	})
}

func (b *filterCndBuilderStausIpAddressV4) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAccessPointFieldPathBuilder().Staus().IpAddressV4().FieldPath(),
	})
}

func (b *filterCndBuilderStausIpAddressV4) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		AccessPoint_FieldPathValue: NewAccessPointFieldPathBuilder().Staus().IpAddressV4().WithValue(value),
	})
}

type filterCndBuilderStausIpAddressV6 struct {
	builder *FilterBuilder
}

func (b *filterCndBuilderStausIpAddressV6) Eq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Eq, value)
}

func (b *filterCndBuilderStausIpAddressV6) Neq(value string) *FilterBuilder {
	return b.compare(gotenfilter.Neq, value)
}

func (b *filterCndBuilderStausIpAddressV6) Gt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gt, value)
}

func (b *filterCndBuilderStausIpAddressV6) Gte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Gte, value)
}

func (b *filterCndBuilderStausIpAddressV6) Lt(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lt, value)
}

func (b *filterCndBuilderStausIpAddressV6) Lte(value string) *FilterBuilder {
	return b.compare(gotenfilter.Lte, value)
}

func (b *filterCndBuilderStausIpAddressV6) In(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionIn{
		AccessPoint_FieldPathArrayOfValues: NewAccessPointFieldPathBuilder().Staus().IpAddressV6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStausIpAddressV6) NotIn(values []string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionNotIn{
		AccessPoint_FieldPathArrayOfValues: NewAccessPointFieldPathBuilder().Staus().IpAddressV6().WithArrayOfValues(values),
	})
}

func (b *filterCndBuilderStausIpAddressV6) IsNull() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNull{
		FieldPath: NewAccessPointFieldPathBuilder().Staus().IpAddressV6().FieldPath(),
	})
}

func (b *filterCndBuilderStausIpAddressV6) IsNan() *FilterBuilder {
	return b.builder.addCond(&FilterConditionIsNaN{
		FieldPath: NewAccessPointFieldPathBuilder().Staus().IpAddressV6().FieldPath(),
	})
}

func (b *filterCndBuilderStausIpAddressV6) compare(op gotenfilter.CompareOperator, value string) *FilterBuilder {
	return b.builder.addCond(&FilterConditionCompare{
		Operator:                   op,
		AccessPoint_FieldPathValue: NewAccessPointFieldPathBuilder().Staus().IpAddressV6().WithValue(value),
	})
}
