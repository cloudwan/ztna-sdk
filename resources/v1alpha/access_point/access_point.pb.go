// Code generated by protoc-gen-goten-go
// File: ztna/proto/v1alpha/access_point.proto
// DO NOT EDIT!!!

package access_point

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type AccessPoint_Spec_AddressingMode int32

const (
	// Same as Static
	AccessPoint_Spec_ADDRESSING_MODE_UNSPECIFIED AccessPoint_Spec_AddressingMode = 0
	AccessPoint_Spec_STATIC                      AccessPoint_Spec_AddressingMode = 1
	AccessPoint_Spec_DYNAMIC                     AccessPoint_Spec_AddressingMode = 2
)

var (
	AccessPoint_Spec_AddressingMode_name = map[int32]string{
		0: "ADDRESSING_MODE_UNSPECIFIED",
		1: "STATIC",
		2: "DYNAMIC",
	}

	AccessPoint_Spec_AddressingMode_value = map[string]int32{
		"ADDRESSING_MODE_UNSPECIFIED": 0,
		"STATIC":                      1,
		"DYNAMIC":                     2,
	}
)

func (x AccessPoint_Spec_AddressingMode) Enum() *AccessPoint_Spec_AddressingMode {
	p := new(AccessPoint_Spec_AddressingMode)
	*p = x
	return p
}

func (x AccessPoint_Spec_AddressingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (AccessPoint_Spec_AddressingMode) Descriptor() preflect.EnumDescriptor {
	return ztna_proto_v1alpha_access_point_proto_enumTypes[0].Descriptor()
}

func (AccessPoint_Spec_AddressingMode) Type() preflect.EnumType {
	return &ztna_proto_v1alpha_access_point_proto_enumTypes[0]
}

func (x AccessPoint_Spec_AddressingMode) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use AccessPoint_Spec_AddressingMode.ProtoReflect.Descriptor instead.
func (AccessPoint_Spec_AddressingMode) EnumDescriptor() ([]byte, []int) {
	return ztna_proto_v1alpha_access_point_proto_rawDescGZIP(), []int{0, 0, 0}
}

type AccessPoint struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of AccessPoint
	Name  *Name               `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	Spec  *AccessPoint_Status `protobuf:"bytes,2,opt,name=spec,proto3" json:"spec,omitempty" firestore:"spec"`
	Staus *AccessPoint_Status `protobuf:"bytes,3,opt,name=staus,proto3" json:"staus,omitempty" firestore:"staus"`
}

func (m *AccessPoint) Reset() {
	*m = AccessPoint{}
	if protoimpl.UnsafeEnabled {
		mi := &ztna_proto_v1alpha_access_point_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AccessPoint) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AccessPoint) ProtoMessage() {}

func (m *AccessPoint) ProtoReflect() preflect.Message {
	mi := &ztna_proto_v1alpha_access_point_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AccessPoint) GotenMessage() {}

// Deprecated, Use AccessPoint.ProtoReflect.Descriptor instead.
func (*AccessPoint) Descriptor() ([]byte, []int) {
	return ztna_proto_v1alpha_access_point_proto_rawDescGZIP(), []int{0}
}

func (m *AccessPoint) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AccessPoint) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AccessPoint) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AccessPoint) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AccessPoint) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *AccessPoint) GetSpec() *AccessPoint_Status {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *AccessPoint) GetStaus() *AccessPoint_Status {
	if m != nil {
		return m.Staus
	}
	return nil
}

func (m *AccessPoint) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "AccessPoint"))
	}
	m.Name = fv
}

func (m *AccessPoint) SetSpec(fv *AccessPoint_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "AccessPoint"))
	}
	m.Spec = fv
}

func (m *AccessPoint) SetStaus(fv *AccessPoint_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Staus", "AccessPoint"))
	}
	m.Staus = fv
}

type AccessPoint_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// AddressingMode of AccessPoint.
	// When STATIC is set, clients will use the address in spec.address.
	// When DYNAMIC is set, clients will use the self reported address in
	// status.ip_address_v4 or status.ip_address_v6. ADDRESSING_MODE_UNSPECIFIED
	// is same as STATIC.
	AddressingMode AccessPoint_Spec_AddressingMode `protobuf:"varint,1,opt,name=addressing_mode,json=addressingMode,proto3,enum=ntt.ztna.v1alpha.AccessPoint_Spec_AddressingMode" json:"addressing_mode,omitempty" firestore:"addressingMode"`
	// Address of the AccessPoint.
	// One of a FQDN, IPv4 address or IPv6 address
	// Ignored when addressing_mode is DYNAMIC
	Address string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty" firestore:"address"`
}

func (m *AccessPoint_Spec) Reset() {
	*m = AccessPoint_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &ztna_proto_v1alpha_access_point_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AccessPoint_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AccessPoint_Spec) ProtoMessage() {}

func (m *AccessPoint_Spec) ProtoReflect() preflect.Message {
	mi := &ztna_proto_v1alpha_access_point_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AccessPoint_Spec) GotenMessage() {}

// Deprecated, Use AccessPoint_Spec.ProtoReflect.Descriptor instead.
func (*AccessPoint_Spec) Descriptor() ([]byte, []int) {
	return ztna_proto_v1alpha_access_point_proto_rawDescGZIP(), []int{0, 0}
}

func (m *AccessPoint_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AccessPoint_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AccessPoint_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AccessPoint_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AccessPoint_Spec) GetAddressingMode() AccessPoint_Spec_AddressingMode {
	if m != nil {
		return m.AddressingMode
	}
	return AccessPoint_Spec_ADDRESSING_MODE_UNSPECIFIED
}

func (m *AccessPoint_Spec) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *AccessPoint_Spec) SetAddressingMode(fv AccessPoint_Spec_AddressingMode) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AddressingMode", "AccessPoint_Spec"))
	}
	m.AddressingMode = fv
}

func (m *AccessPoint_Spec) SetAddress(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Address", "AccessPoint_Spec"))
	}
	m.Address = fv
}

type AccessPoint_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Self reported IPv4 address.
	IpAddressV4 string `protobuf:"bytes,1,opt,name=ip_address_v4,json=ipAddressV4,proto3" json:"ip_address_v4,omitempty" firestore:"ipAddressV4"`
	// Self reported IPv6 address.
	IpAddressV6 string `protobuf:"bytes,2,opt,name=ip_address_v6,json=ipAddressV6,proto3" json:"ip_address_v6,omitempty" firestore:"ipAddressV6"`
}

func (m *AccessPoint_Status) Reset() {
	*m = AccessPoint_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &ztna_proto_v1alpha_access_point_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *AccessPoint_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*AccessPoint_Status) ProtoMessage() {}

func (m *AccessPoint_Status) ProtoReflect() preflect.Message {
	mi := &ztna_proto_v1alpha_access_point_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*AccessPoint_Status) GotenMessage() {}

// Deprecated, Use AccessPoint_Status.ProtoReflect.Descriptor instead.
func (*AccessPoint_Status) Descriptor() ([]byte, []int) {
	return ztna_proto_v1alpha_access_point_proto_rawDescGZIP(), []int{0, 1}
}

func (m *AccessPoint_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *AccessPoint_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *AccessPoint_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *AccessPoint_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *AccessPoint_Status) GetIpAddressV4() string {
	if m != nil {
		return m.IpAddressV4
	}
	return ""
}

func (m *AccessPoint_Status) GetIpAddressV6() string {
	if m != nil {
		return m.IpAddressV6
	}
	return ""
}

func (m *AccessPoint_Status) SetIpAddressV4(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpAddressV4", "AccessPoint_Status"))
	}
	m.IpAddressV4 = fv
}

func (m *AccessPoint_Status) SetIpAddressV6(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "IpAddressV6", "AccessPoint_Status"))
	}
	m.IpAddressV6 = fv
}

var ztna_proto_v1alpha_access_point_proto preflect.FileDescriptor

var ztna_proto_v1alpha_access_point_proto_rawDesc = []byte{
	0x0a, 0x25, 0x7a, 0x74, 0x6e, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x6e,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61,
	0x75, 0x64, 0x69, 0x74, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xe7, 0x04, 0x0a,
	0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x27, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xb2, 0xda, 0x21, 0x0f,
	0x0a, 0x0d, 0x0a, 0x0b, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x6e, 0x61, 0x2e, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69,
	0x6e, 0x74, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12,
	0x3a, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x6e, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68,
	0x61, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x75, 0x73, 0x1a, 0xc8, 0x01, 0x0a, 0x04,
	0x53, 0x70, 0x65, 0x63, 0x12, 0x5a, 0x0a, 0x0f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69,
	0x6e, 0x67, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x31, 0x2e,
	0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x6e, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61,
	0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x2e, 0x53, 0x70, 0x65,
	0x63, 0x2e, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x52, 0x0e, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x22, 0x4a, 0x0a, 0x0e, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1f, 0x0a, 0x1b,
	0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f,
	0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0a, 0x0a,
	0x06, 0x53, 0x54, 0x41, 0x54, 0x49, 0x43, 0x10, 0x01, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x59, 0x4e,
	0x41, 0x4d, 0x49, 0x43, 0x10, 0x02, 0x1a, 0x50, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x5f, 0x76,
	0x34, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x56, 0x34, 0x12, 0x22, 0x0a, 0x0d, 0x69, 0x70, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x5f, 0x76, 0x36, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x69, 0x70, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x56, 0x36, 0x3a, 0x9b, 0x01, 0xea, 0x41, 0x4d, 0x0a, 0x1b,
	0x7a, 0x74, 0x6e, 0x61, 0x2e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x2e, 0x70, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x7d, 0x2f,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x2f, 0x7b, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x7d, 0x92, 0xd9, 0x21, 0x3b, 0x0a,
	0x0c, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x12, 0x0c, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x1a, 0x17, 0x6e, 0x74, 0x74,
	0x2e, 0x69, 0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x50, 0x72, 0x6f,
	0x6a, 0x65, 0x63, 0x74, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06,
	0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x42, 0xd9, 0x02, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0,
	0x02, 0x49, 0x0a, 0x12, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74,
	0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12, 0x33, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x7a, 0x74, 0x6e, 0x61,
	0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x0a, 0x17, 0x63, 0x6f, 0x6d,
	0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x6e, 0x61, 0x2e, 0x70, 0x62, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x42, 0x10, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e,
	0x74, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x44, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x7a, 0x74,
	0x6e, 0x61, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e,
	0x74, 0x3b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0xd2, 0x84,
	0xd1, 0x02, 0x3f, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x72, 0x73, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63,
	0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x7a, 0x74, 0x6e, 0x61, 0x2f, 0x61, 0x75, 0x64,
	0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0xa2, 0x80, 0xd1, 0x02, 0x4b, 0x0a, 0x13, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x34, 0x67, 0x69,
	0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61,
	0x6e, 0x2f, 0x7a, 0x74, 0x6e, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69,
	0x6e, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	ztna_proto_v1alpha_access_point_proto_rawDescOnce sync.Once
	ztna_proto_v1alpha_access_point_proto_rawDescData = ztna_proto_v1alpha_access_point_proto_rawDesc
)

func ztna_proto_v1alpha_access_point_proto_rawDescGZIP() []byte {
	ztna_proto_v1alpha_access_point_proto_rawDescOnce.Do(func() {
		ztna_proto_v1alpha_access_point_proto_rawDescData = protoimpl.X.CompressGZIP(ztna_proto_v1alpha_access_point_proto_rawDescData)
	})
	return ztna_proto_v1alpha_access_point_proto_rawDescData
}

var ztna_proto_v1alpha_access_point_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var ztna_proto_v1alpha_access_point_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var ztna_proto_v1alpha_access_point_proto_goTypes = []interface{}{
	(AccessPoint_Spec_AddressingMode)(0), // 0: ntt.ztna.v1alpha.AccessPoint_Spec_AddressingMode
	(*AccessPoint)(nil),                  // 1: ntt.ztna.v1alpha.AccessPoint
	(*AccessPoint_Spec)(nil),             // 2: ntt.ztna.v1alpha.AccessPoint.Spec
	(*AccessPoint_Status)(nil),           // 3: ntt.ztna.v1alpha.AccessPoint.Status
}
var ztna_proto_v1alpha_access_point_proto_depIdxs = []int32{
	3, // 0: ntt.ztna.v1alpha.AccessPoint.spec:type_name -> ntt.ztna.v1alpha.AccessPoint.Status
	3, // 1: ntt.ztna.v1alpha.AccessPoint.staus:type_name -> ntt.ztna.v1alpha.AccessPoint.Status
	0, // 2: ntt.ztna.v1alpha.AccessPoint.Spec.addressing_mode:type_name -> ntt.ztna.v1alpha.AccessPoint_Spec_AddressingMode
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { ztna_proto_v1alpha_access_point_proto_init() }
func ztna_proto_v1alpha_access_point_proto_init() {
	if ztna_proto_v1alpha_access_point_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		ztna_proto_v1alpha_access_point_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoint); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		ztna_proto_v1alpha_access_point_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoint_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		ztna_proto_v1alpha_access_point_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessPoint_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: ztna_proto_v1alpha_access_point_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           ztna_proto_v1alpha_access_point_proto_goTypes,
		DependencyIndexes: ztna_proto_v1alpha_access_point_proto_depIdxs,
		EnumInfos:         ztna_proto_v1alpha_access_point_proto_enumTypes,
		MessageInfos:      ztna_proto_v1alpha_access_point_proto_msgTypes,
	}.Build()
	ztna_proto_v1alpha_access_point_proto = out.File
	ztna_proto_v1alpha_access_point_proto_rawDesc = nil
	ztna_proto_v1alpha_access_point_proto_goTypes = nil
	ztna_proto_v1alpha_access_point_proto_depIdxs = nil
}
