// Code generated by protoc-gen-goten-object
// File: ztna/proto/v1alpha/access_point.proto
// DO NOT EDIT!!!

package access_point

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
)

// ensure the imports are used
var (
	_ = fmt.Stringer(nil)
	_ = sort.Interface(nil)

	_ = proto.Message(nil)
	_ = fieldmaskpb.FieldMask{}

	_ = gotenobject.FieldPath(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
)

func (o *AccessPoint) GotenObjectExt() {}

func (o *AccessPoint) MakeFullFieldMask() *AccessPoint_FieldMask {
	return FullAccessPoint_FieldMask()
}

func (o *AccessPoint) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAccessPoint_FieldMask()
}

func (o *AccessPoint) MakeDiffFieldMask(other *AccessPoint) *AccessPoint_FieldMask {
	if o == nil && other == nil {
		return &AccessPoint_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAccessPoint_FieldMask()
	}

	res := &AccessPoint_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &AccessPoint_FieldTerminalPath{selector: AccessPoint_FieldPathSelectorName})
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AccessPoint_FieldTerminalPath{selector: AccessPoint_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AccessPoint_FieldSubPath{selector: AccessPoint_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetStaus().MakeDiffFieldMask(other.GetStaus())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &AccessPoint_FieldTerminalPath{selector: AccessPoint_FieldPathSelectorStaus})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &AccessPoint_FieldSubPath{selector: AccessPoint_FieldPathSelectorStaus, subPath: subpath})
			}
		}
	}
	return res
}

func (o *AccessPoint) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AccessPoint))
}

func (o *AccessPoint) Clone() *AccessPoint {
	if o == nil {
		return nil
	}
	result := &AccessPoint{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.Spec = o.Spec.Clone()
	result.Staus = o.Staus.Clone()
	return result
}

func (o *AccessPoint) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AccessPoint) Merge(source *AccessPoint) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(AccessPoint_Status)
		}
		o.Spec.Merge(source.GetSpec())
	}
	if source.GetStaus() != nil {
		if o.Staus == nil {
			o.Staus = new(AccessPoint_Status)
		}
		o.Staus.Merge(source.GetStaus())
	}
}

func (o *AccessPoint) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AccessPoint))
}

func (o *AccessPoint_Spec) GotenObjectExt() {}

func (o *AccessPoint_Spec) MakeFullFieldMask() *AccessPoint_Spec_FieldMask {
	return FullAccessPoint_Spec_FieldMask()
}

func (o *AccessPoint_Spec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAccessPoint_Spec_FieldMask()
}

func (o *AccessPoint_Spec) MakeDiffFieldMask(other *AccessPoint_Spec) *AccessPoint_Spec_FieldMask {
	if o == nil && other == nil {
		return &AccessPoint_Spec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAccessPoint_Spec_FieldMask()
	}

	res := &AccessPoint_Spec_FieldMask{}
	if o.GetAddressingMode() != other.GetAddressingMode() {
		res.Paths = append(res.Paths, &AccessPointSpec_FieldTerminalPath{selector: AccessPointSpec_FieldPathSelectorAddressingMode})
	}
	if o.GetAddress() != other.GetAddress() {
		res.Paths = append(res.Paths, &AccessPointSpec_FieldTerminalPath{selector: AccessPointSpec_FieldPathSelectorAddress})
	}
	return res
}

func (o *AccessPoint_Spec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AccessPoint_Spec))
}

func (o *AccessPoint_Spec) Clone() *AccessPoint_Spec {
	if o == nil {
		return nil
	}
	result := &AccessPoint_Spec{}
	result.AddressingMode = o.AddressingMode
	result.Address = o.Address
	return result
}

func (o *AccessPoint_Spec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AccessPoint_Spec) Merge(source *AccessPoint_Spec) {
	o.AddressingMode = source.GetAddressingMode()
	o.Address = source.GetAddress()
}

func (o *AccessPoint_Spec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AccessPoint_Spec))
}

func (o *AccessPoint_Status) GotenObjectExt() {}

func (o *AccessPoint_Status) MakeFullFieldMask() *AccessPoint_Status_FieldMask {
	return FullAccessPoint_Status_FieldMask()
}

func (o *AccessPoint_Status) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullAccessPoint_Status_FieldMask()
}

func (o *AccessPoint_Status) MakeDiffFieldMask(other *AccessPoint_Status) *AccessPoint_Status_FieldMask {
	if o == nil && other == nil {
		return &AccessPoint_Status_FieldMask{}
	}
	if o == nil || other == nil {
		return FullAccessPoint_Status_FieldMask()
	}

	res := &AccessPoint_Status_FieldMask{}
	if o.GetIpAddressV4() != other.GetIpAddressV4() {
		res.Paths = append(res.Paths, &AccessPointStatus_FieldTerminalPath{selector: AccessPointStatus_FieldPathSelectorIpAddressV4})
	}
	if o.GetIpAddressV6() != other.GetIpAddressV6() {
		res.Paths = append(res.Paths, &AccessPointStatus_FieldTerminalPath{selector: AccessPointStatus_FieldPathSelectorIpAddressV6})
	}
	return res
}

func (o *AccessPoint_Status) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*AccessPoint_Status))
}

func (o *AccessPoint_Status) Clone() *AccessPoint_Status {
	if o == nil {
		return nil
	}
	result := &AccessPoint_Status{}
	result.IpAddressV4 = o.IpAddressV4
	result.IpAddressV6 = o.IpAddressV6
	return result
}

func (o *AccessPoint_Status) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *AccessPoint_Status) Merge(source *AccessPoint_Status) {
	o.IpAddressV4 = source.GetIpAddressV4()
	o.IpAddressV6 = source.GetIpAddressV6()
}

func (o *AccessPoint_Status) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*AccessPoint_Status))
}
