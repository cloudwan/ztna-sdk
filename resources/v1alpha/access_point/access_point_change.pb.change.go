// Code generated by protoc-gen-goten-resource
// Resource change: AccessPointChange
// DO NOT EDIT!!!

package access_point

import (
	gotenresource "github.com/cloudwan/goten-sdk/runtime/resource"
)

// proto imports
import (
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	field_mask "google.golang.org/genproto/protobuf/field_mask"
)

// ensure the imports are used
var (
	_ = gotenresource.ListQuery(nil)
)

// make sure we're using proto imports
var (
	_ = &iam_project.Project{}
	_ = &field_mask.FieldMask{}
)

func (c *AccessPointChange) IsAdd() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*AccessPointChange_Added_)
	return ok
}

func (c *AccessPointChange) IsModify() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*AccessPointChange_Modified_)
	return ok
}

func (c *AccessPointChange) IsCurrent() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*AccessPointChange_Current_)
	return ok
}

func (c *AccessPointChange) IsDelete() bool {
	if c == nil {
		return false
	}
	_, ok := c.ChangeType.(*AccessPointChange_Removed_)
	return ok
}

func (c *AccessPointChange) GetCurrentViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *AccessPointChange_Added_:
		return cType.Added.ViewIndex
	case *AccessPointChange_Modified_:
		return cType.Modified.ViewIndex
	}
	return 0
}

func (c *AccessPointChange) GetPreviousViewIndex() int32 {
	switch cType := c.ChangeType.(type) {
	case *AccessPointChange_Removed_:
		return cType.Removed.ViewIndex
	case *AccessPointChange_Modified_:
		return cType.Modified.PreviousViewIndex
	}
	return 0
}

func (c *AccessPointChange) GetAccessPoint() *AccessPoint {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *AccessPointChange_Added_:
		return cType.Added.AccessPoint
	case *AccessPointChange_Modified_:
		return cType.Modified.AccessPoint
	case *AccessPointChange_Current_:
		return cType.Current.AccessPoint
	case *AccessPointChange_Removed_:
		return nil
	}
	return nil
}

func (c *AccessPointChange) GetRawResource() gotenresource.Resource {
	return c.GetAccessPoint()
}

func (c *AccessPointChange) GetAccessPointName() *Name {
	if c == nil {
		return nil
	}
	switch cType := c.ChangeType.(type) {
	case *AccessPointChange_Added_:
		return cType.Added.AccessPoint.GetName()
	case *AccessPointChange_Modified_:
		return cType.Modified.Name
	case *AccessPointChange_Current_:
		return cType.Current.AccessPoint.GetName()
	case *AccessPointChange_Removed_:
		return cType.Removed.Name
	}
	return nil
}

func (c *AccessPointChange) GetRawName() gotenresource.Name {
	return c.GetAccessPointName()
}

func (c *AccessPointChange) SetAddedRaw(snapshot gotenresource.Resource, idx int) {
	c.ChangeType = &AccessPointChange_Added_{
		Added: &AccessPointChange_Added{
			AccessPoint: snapshot.(*AccessPoint),
			ViewIndex:   int32(idx),
		},
	}
}

func (c *AccessPointChange) SetModifiedRaw(name gotenresource.Name, snapshot gotenresource.Resource, prevIdx int, newIdx int) {
	c.ChangeType = &AccessPointChange_Modified_{
		Modified: &AccessPointChange_Modified{
			Name:              name.(*Name),
			AccessPoint:       snapshot.(*AccessPoint),
			PreviousViewIndex: int32(prevIdx),
			ViewIndex:         int32(newIdx),
		},
	}
}

func (c *AccessPointChange) SetCurrentRaw(snapshot gotenresource.Resource) {
	c.ChangeType = &AccessPointChange_Current_{
		Current: &AccessPointChange_Current{
			AccessPoint: snapshot.(*AccessPoint),
		},
	}
}

func (c *AccessPointChange) SetDeletedRaw(name gotenresource.Name, idx int) {
	c.ChangeType = &AccessPointChange_Removed_{
		Removed: &AccessPointChange_Removed{
			Name:      name.(*Name),
			ViewIndex: int32(idx),
		},
	}
}
