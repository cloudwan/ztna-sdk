// Code generated by protoc-gen-goten-object
// File: ztna/proto/v1alpha/port_forwarding_service.proto
// DO NOT EDIT!!!

package port_forwarding_service

import (
	"encoding/json"
	"fmt"
	"reflect"
	"strings"
	"time"

	"github.com/iancoleman/strcase"
	"google.golang.org/grpc/codes"
	"google.golang.org/grpc/status"
	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/reflect/protoregistry"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	access_point "github.com/cloudwan/ztna-sdk/resources/v1alpha/access_point"
)

// ensure the imports are used
var (
	_ = new(json.Marshaler)
	_ = new(fmt.Stringer)
	_ = reflect.DeepEqual
	_ = strings.Builder{}
	_ = time.Second

	_ = strcase.ToLowerCamel
	_ = codes.NotFound
	_ = status.Status{}
	_ = protojson.UnmarshalOptions{}
	_ = new(proto.Message)
	_ = protoregistry.GlobalTypes
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_project.Project{}
	_ = &access_point.AccessPoint{}
)

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PortForwardingService_FieldPath interface {
	gotenobject.FieldPath
	Selector() PortForwardingService_FieldPathSelector
	Get(source *PortForwardingService) []interface{}
	GetSingle(source *PortForwardingService) (interface{}, bool)
	ClearValue(item *PortForwardingService)

	// Those methods build corresponding PortForwardingService_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PortForwardingService_FieldPathValue
	WithIArrayOfValues(values interface{}) PortForwardingService_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PortForwardingService_FieldPathArrayItemValue
}

type PortForwardingService_FieldPathSelector int32

const (
	PortForwardingService_FieldPathSelectorName        PortForwardingService_FieldPathSelector = 0
	PortForwardingService_FieldPathSelectorDisplayName PortForwardingService_FieldPathSelector = 1
	PortForwardingService_FieldPathSelectorMetadata    PortForwardingService_FieldPathSelector = 2
	PortForwardingService_FieldPathSelectorSpec        PortForwardingService_FieldPathSelector = 3
	PortForwardingService_FieldPathSelectorStatus      PortForwardingService_FieldPathSelector = 4
)

func (s PortForwardingService_FieldPathSelector) String() string {
	switch s {
	case PortForwardingService_FieldPathSelectorName:
		return "name"
	case PortForwardingService_FieldPathSelectorDisplayName:
		return "display_name"
	case PortForwardingService_FieldPathSelectorMetadata:
		return "metadata"
	case PortForwardingService_FieldPathSelectorSpec:
		return "spec"
	case PortForwardingService_FieldPathSelectorStatus:
		return "status"
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", s))
	}
}

func BuildPortForwardingService_FieldPath(fp gotenobject.RawFieldPath) (PortForwardingService_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object PortForwardingService")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "name":
			return &PortForwardingService_FieldTerminalPath{selector: PortForwardingService_FieldPathSelectorName}, nil
		case "display_name", "displayName", "display-name":
			return &PortForwardingService_FieldTerminalPath{selector: PortForwardingService_FieldPathSelectorDisplayName}, nil
		case "metadata":
			return &PortForwardingService_FieldTerminalPath{selector: PortForwardingService_FieldPathSelectorMetadata}, nil
		case "spec":
			return &PortForwardingService_FieldTerminalPath{selector: PortForwardingService_FieldPathSelectorSpec}, nil
		case "status":
			return &PortForwardingService_FieldTerminalPath{selector: PortForwardingService_FieldPathSelectorStatus}, nil
		}
	} else {
		switch fp[0] {
		case "metadata":
			if subpath, err := ntt_meta.BuildMeta_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &PortForwardingService_FieldSubPath{selector: PortForwardingService_FieldPathSelectorMetadata, subPath: subpath}, nil
			}
		case "spec":
			if subpath, err := BuildPortForwardingServiceSpec_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &PortForwardingService_FieldSubPath{selector: PortForwardingService_FieldPathSelectorSpec, subPath: subpath}, nil
			}
		case "status":
			if subpath, err := BuildPortForwardingServiceStatus_FieldPath(fp[1:]); err != nil {
				return nil, err
			} else {
				return &PortForwardingService_FieldSubPath{selector: PortForwardingService_FieldPathSelectorStatus, subPath: subpath}, nil
			}
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object PortForwardingService", fp)
}

func ParsePortForwardingService_FieldPath(rawField string) (PortForwardingService_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPortForwardingService_FieldPath(fp)
}

func MustParsePortForwardingService_FieldPath(rawField string) PortForwardingService_FieldPath {
	fp, err := ParsePortForwardingService_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PortForwardingService_FieldTerminalPath struct {
	selector PortForwardingService_FieldPathSelector
}

var _ PortForwardingService_FieldPath = (*PortForwardingService_FieldTerminalPath)(nil)

func (fp *PortForwardingService_FieldTerminalPath) Selector() PortForwardingService_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PortForwardingService_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PortForwardingService_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source PortForwardingService
func (fp *PortForwardingService_FieldTerminalPath) Get(source *PortForwardingService) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case PortForwardingService_FieldPathSelectorName:
			if source.Name != nil {
				values = append(values, source.Name)
			}
		case PortForwardingService_FieldPathSelectorDisplayName:
			values = append(values, source.DisplayName)
		case PortForwardingService_FieldPathSelectorMetadata:
			if source.Metadata != nil {
				values = append(values, source.Metadata)
			}
		case PortForwardingService_FieldPathSelectorSpec:
			if source.Spec != nil {
				values = append(values, source.Spec)
			}
		case PortForwardingService_FieldPathSelectorStatus:
			if source.Status != nil {
				values = append(values, source.Status)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fp.selector))
		}
	}
	return
}

func (fp *PortForwardingService_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*PortForwardingService))
}

// GetSingle returns value pointed by specific field of from source PortForwardingService
func (fp *PortForwardingService_FieldTerminalPath) GetSingle(source *PortForwardingService) (interface{}, bool) {
	switch fp.selector {
	case PortForwardingService_FieldPathSelectorName:
		res := source.GetName()
		return res, res != nil
	case PortForwardingService_FieldPathSelectorDisplayName:
		return source.GetDisplayName(), source != nil
	case PortForwardingService_FieldPathSelectorMetadata:
		res := source.GetMetadata()
		return res, res != nil
	case PortForwardingService_FieldPathSelectorSpec:
		res := source.GetSpec()
		return res, res != nil
	case PortForwardingService_FieldPathSelectorStatus:
		res := source.GetStatus()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fp.selector))
	}
}

func (fp *PortForwardingService_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*PortForwardingService))
}

// GetDefault returns a default value of the field type
func (fp *PortForwardingService_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case PortForwardingService_FieldPathSelectorName:
		return (*Name)(nil)
	case PortForwardingService_FieldPathSelectorDisplayName:
		return ""
	case PortForwardingService_FieldPathSelectorMetadata:
		return (*ntt_meta.Meta)(nil)
	case PortForwardingService_FieldPathSelectorSpec:
		return (*PortForwardingService_Spec)(nil)
	case PortForwardingService_FieldPathSelectorStatus:
		return (*PortForwardingService_Status)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fp.selector))
	}
}

func (fp *PortForwardingService_FieldTerminalPath) ClearValue(item *PortForwardingService) {
	if item != nil {
		switch fp.selector {
		case PortForwardingService_FieldPathSelectorName:
			item.Name = nil
		case PortForwardingService_FieldPathSelectorDisplayName:
			item.DisplayName = ""
		case PortForwardingService_FieldPathSelectorMetadata:
			item.Metadata = nil
		case PortForwardingService_FieldPathSelectorSpec:
			item.Spec = nil
		case PortForwardingService_FieldPathSelectorStatus:
			item.Status = nil
		default:
			panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fp.selector))
		}
	}
}

func (fp *PortForwardingService_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*PortForwardingService))
}

// IsLeaf - whether field path is holds simple value
func (fp *PortForwardingService_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == PortForwardingService_FieldPathSelectorName ||
		fp.selector == PortForwardingService_FieldPathSelectorDisplayName
}

func (fp *PortForwardingService_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *PortForwardingService_FieldTerminalPath) WithIValue(value interface{}) PortForwardingService_FieldPathValue {
	switch fp.selector {
	case PortForwardingService_FieldPathSelectorName:
		return &PortForwardingService_FieldTerminalPathValue{PortForwardingService_FieldTerminalPath: *fp, value: value.(*Name)}
	case PortForwardingService_FieldPathSelectorDisplayName:
		return &PortForwardingService_FieldTerminalPathValue{PortForwardingService_FieldTerminalPath: *fp, value: value.(string)}
	case PortForwardingService_FieldPathSelectorMetadata:
		return &PortForwardingService_FieldTerminalPathValue{PortForwardingService_FieldTerminalPath: *fp, value: value.(*ntt_meta.Meta)}
	case PortForwardingService_FieldPathSelectorSpec:
		return &PortForwardingService_FieldTerminalPathValue{PortForwardingService_FieldTerminalPath: *fp, value: value.(*PortForwardingService_Spec)}
	case PortForwardingService_FieldPathSelectorStatus:
		return &PortForwardingService_FieldTerminalPathValue{PortForwardingService_FieldTerminalPath: *fp, value: value.(*PortForwardingService_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fp.selector))
	}
}

func (fp *PortForwardingService_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PortForwardingService_FieldTerminalPath) WithIArrayOfValues(values interface{}) PortForwardingService_FieldPathArrayOfValues {
	fpaov := &PortForwardingService_FieldTerminalPathArrayOfValues{PortForwardingService_FieldTerminalPath: *fp}
	switch fp.selector {
	case PortForwardingService_FieldPathSelectorName:
		return &PortForwardingService_FieldTerminalPathArrayOfValues{PortForwardingService_FieldTerminalPath: *fp, values: values.([]*Name)}
	case PortForwardingService_FieldPathSelectorDisplayName:
		return &PortForwardingService_FieldTerminalPathArrayOfValues{PortForwardingService_FieldTerminalPath: *fp, values: values.([]string)}
	case PortForwardingService_FieldPathSelectorMetadata:
		return &PortForwardingService_FieldTerminalPathArrayOfValues{PortForwardingService_FieldTerminalPath: *fp, values: values.([]*ntt_meta.Meta)}
	case PortForwardingService_FieldPathSelectorSpec:
		return &PortForwardingService_FieldTerminalPathArrayOfValues{PortForwardingService_FieldTerminalPath: *fp, values: values.([]*PortForwardingService_Spec)}
	case PortForwardingService_FieldPathSelectorStatus:
		return &PortForwardingService_FieldTerminalPathArrayOfValues{PortForwardingService_FieldTerminalPath: *fp, values: values.([]*PortForwardingService_Status)}
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fp.selector))
	}
	return fpaov
}

func (fp *PortForwardingService_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PortForwardingService_FieldTerminalPath) WithIArrayItemValue(value interface{}) PortForwardingService_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fp.selector))
	}
}

func (fp *PortForwardingService_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

type PortForwardingService_FieldSubPath struct {
	selector PortForwardingService_FieldPathSelector
	subPath  gotenobject.FieldPath
}

var _ PortForwardingService_FieldPath = (*PortForwardingService_FieldSubPath)(nil)

func (fps *PortForwardingService_FieldSubPath) Selector() PortForwardingService_FieldPathSelector {
	return fps.selector
}
func (fps *PortForwardingService_FieldSubPath) AsMetadataSubPath() (ntt_meta.Meta_FieldPath, bool) {
	res, ok := fps.subPath.(ntt_meta.Meta_FieldPath)
	return res, ok
}
func (fps *PortForwardingService_FieldSubPath) AsSpecSubPath() (PortForwardingServiceSpec_FieldPath, bool) {
	res, ok := fps.subPath.(PortForwardingServiceSpec_FieldPath)
	return res, ok
}
func (fps *PortForwardingService_FieldSubPath) AsStatusSubPath() (PortForwardingServiceStatus_FieldPath, bool) {
	res, ok := fps.subPath.(PortForwardingServiceStatus_FieldPath)
	return res, ok
}

// String returns path representation in proto convention
func (fps *PortForwardingService_FieldSubPath) String() string {
	return fps.selector.String() + "." + fps.subPath.String()
}

// JSONString returns path representation is JSON convention
func (fps *PortForwardingService_FieldSubPath) JSONString() string {
	return strcase.ToLowerCamel(fps.selector.String()) + "." + fps.subPath.JSONString()
}

// Get returns all values pointed by selected field from source PortForwardingService
func (fps *PortForwardingService_FieldSubPath) Get(source *PortForwardingService) (values []interface{}) {
	if asMetaFieldPath, ok := fps.AsMetadataSubPath(); ok {
		values = append(values, asMetaFieldPath.Get(source.GetMetadata())...)
	} else if asSpecFieldPath, ok := fps.AsSpecSubPath(); ok {
		values = append(values, asSpecFieldPath.Get(source.GetSpec())...)
	} else if asStatusFieldPath, ok := fps.AsStatusSubPath(); ok {
		values = append(values, asStatusFieldPath.Get(source.GetStatus())...)
	} else {
		panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fps.selector))
	}
	return
}

func (fps *PortForwardingService_FieldSubPath) GetRaw(source proto.Message) []interface{} {
	return fps.Get(source.(*PortForwardingService))
}

// GetSingle returns value of selected field from source PortForwardingService
func (fps *PortForwardingService_FieldSubPath) GetSingle(source *PortForwardingService) (interface{}, bool) {
	switch fps.selector {
	case PortForwardingService_FieldPathSelectorMetadata:
		if source.GetMetadata() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetMetadata())
	case PortForwardingService_FieldPathSelectorSpec:
		if source.GetSpec() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetSpec())
	case PortForwardingService_FieldPathSelectorStatus:
		if source.GetStatus() == nil {
			return nil, false
		}
		return fps.subPath.GetSingleRaw(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fps.selector))
	}
}

func (fps *PortForwardingService_FieldSubPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fps.GetSingle(source.(*PortForwardingService))
}

// GetDefault returns a default value of the field type
func (fps *PortForwardingService_FieldSubPath) GetDefault() interface{} {
	return fps.subPath.GetDefault()
}

func (fps *PortForwardingService_FieldSubPath) ClearValue(item *PortForwardingService) {
	if item != nil {
		switch fps.selector {
		case PortForwardingService_FieldPathSelectorMetadata:
			fps.subPath.ClearValueRaw(item.Metadata)
		case PortForwardingService_FieldPathSelectorSpec:
			fps.subPath.ClearValueRaw(item.Spec)
		case PortForwardingService_FieldPathSelectorStatus:
			fps.subPath.ClearValueRaw(item.Status)
		default:
			panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fps.selector))
		}
	}
}

func (fps *PortForwardingService_FieldSubPath) ClearValueRaw(item proto.Message) {
	fps.ClearValue(item.(*PortForwardingService))
}

// IsLeaf - whether field path is holds simple value
func (fps *PortForwardingService_FieldSubPath) IsLeaf() bool {
	return fps.subPath.IsLeaf()
}

func (fps *PortForwardingService_FieldSubPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	iPaths := []gotenobject.FieldPath{&PortForwardingService_FieldTerminalPath{selector: fps.selector}}
	iPaths = append(iPaths, fps.subPath.SplitIntoTerminalIPaths()...)
	return iPaths
}

func (fps *PortForwardingService_FieldSubPath) WithIValue(value interface{}) PortForwardingService_FieldPathValue {
	return &PortForwardingService_FieldSubPathValue{fps, fps.subPath.WithRawIValue(value)}
}

func (fps *PortForwardingService_FieldSubPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fps.WithIValue(value)
}

func (fps *PortForwardingService_FieldSubPath) WithIArrayOfValues(values interface{}) PortForwardingService_FieldPathArrayOfValues {
	return &PortForwardingService_FieldSubPathArrayOfValues{fps, fps.subPath.WithRawIArrayOfValues(values)}
}

func (fps *PortForwardingService_FieldSubPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fps.WithIArrayOfValues(values)
}

func (fps *PortForwardingService_FieldSubPath) WithIArrayItemValue(value interface{}) PortForwardingService_FieldPathArrayItemValue {
	return &PortForwardingService_FieldSubPathArrayItemValue{fps, fps.subPath.WithRawIArrayItemValue(value)}
}

func (fps *PortForwardingService_FieldSubPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fps.WithIArrayItemValue(value)
}

// PortForwardingService_FieldPathValue allows storing values for PortForwardingService fields according to their type
type PortForwardingService_FieldPathValue interface {
	PortForwardingService_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **PortForwardingService)
	CompareWith(*PortForwardingService) (cmp int, comparable bool)
}

func ParsePortForwardingService_FieldPathValue(pathStr, valueStr string) (PortForwardingService_FieldPathValue, error) {
	fp, err := ParsePortForwardingService_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PortForwardingService field path value from %s: %v", valueStr, err)
	}
	return fpv.(PortForwardingService_FieldPathValue), nil
}

func MustParsePortForwardingService_FieldPathValue(pathStr, valueStr string) PortForwardingService_FieldPathValue {
	fpv, err := ParsePortForwardingService_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PortForwardingService_FieldTerminalPathValue struct {
	PortForwardingService_FieldTerminalPath
	value interface{}
}

var _ PortForwardingService_FieldPathValue = (*PortForwardingService_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'PortForwardingService' as interface{}
func (fpv *PortForwardingService_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *PortForwardingService_FieldTerminalPathValue) AsNameValue() (*Name, bool) {
	res, ok := fpv.value.(*Name)
	return res, ok
}
func (fpv *PortForwardingService_FieldTerminalPathValue) AsDisplayNameValue() (string, bool) {
	res, ok := fpv.value.(string)
	return res, ok
}
func (fpv *PortForwardingService_FieldTerminalPathValue) AsMetadataValue() (*ntt_meta.Meta, bool) {
	res, ok := fpv.value.(*ntt_meta.Meta)
	return res, ok
}
func (fpv *PortForwardingService_FieldTerminalPathValue) AsSpecValue() (*PortForwardingService_Spec, bool) {
	res, ok := fpv.value.(*PortForwardingService_Spec)
	return res, ok
}
func (fpv *PortForwardingService_FieldTerminalPathValue) AsStatusValue() (*PortForwardingService_Status, bool) {
	res, ok := fpv.value.(*PortForwardingService_Status)
	return res, ok
}

// SetTo stores value for selected field for object PortForwardingService
func (fpv *PortForwardingService_FieldTerminalPathValue) SetTo(target **PortForwardingService) {
	if *target == nil {
		*target = new(PortForwardingService)
	}
	switch fpv.selector {
	case PortForwardingService_FieldPathSelectorName:
		(*target).Name = fpv.value.(*Name)
	case PortForwardingService_FieldPathSelectorDisplayName:
		(*target).DisplayName = fpv.value.(string)
	case PortForwardingService_FieldPathSelectorMetadata:
		(*target).Metadata = fpv.value.(*ntt_meta.Meta)
	case PortForwardingService_FieldPathSelectorSpec:
		(*target).Spec = fpv.value.(*PortForwardingService_Spec)
	case PortForwardingService_FieldPathSelectorStatus:
		(*target).Status = fpv.value.(*PortForwardingService_Status)
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fpv.selector))
	}
}

func (fpv *PortForwardingService_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*PortForwardingService)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PortForwardingService_FieldTerminalPathValue' with the value under path in 'PortForwardingService'.
func (fpv *PortForwardingService_FieldTerminalPathValue) CompareWith(source *PortForwardingService) (int, bool) {
	switch fpv.selector {
	case PortForwardingService_FieldPathSelectorName:
		leftValue := fpv.value.(*Name)
		rightValue := source.GetName()
		if leftValue == nil {
			if rightValue != nil {
				return -1, true
			}
			return 0, true
		}
		if rightValue == nil {
			return 1, true
		}
		if leftValue.String() == rightValue.String() {
			return 0, true
		} else if leftValue.String() < rightValue.String() {
			return -1, true
		} else {
			return 1, true
		}
	case PortForwardingService_FieldPathSelectorDisplayName:
		leftValue := fpv.value.(string)
		rightValue := source.GetDisplayName()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PortForwardingService_FieldPathSelectorMetadata:
		return 0, false
	case PortForwardingService_FieldPathSelectorSpec:
		return 0, false
	case PortForwardingService_FieldPathSelectorStatus:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fpv.selector))
	}
}

func (fpv *PortForwardingService_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*PortForwardingService))
}

type PortForwardingService_FieldSubPathValue struct {
	PortForwardingService_FieldPath
	subPathValue gotenobject.FieldPathValue
}

var _ PortForwardingService_FieldPathValue = (*PortForwardingService_FieldSubPathValue)(nil)

func (fpvs *PortForwardingService_FieldSubPathValue) AsMetadataPathValue() (ntt_meta.Meta_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue)
	return res, ok
}
func (fpvs *PortForwardingService_FieldSubPathValue) AsSpecPathValue() (PortForwardingServiceSpec_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(PortForwardingServiceSpec_FieldPathValue)
	return res, ok
}
func (fpvs *PortForwardingService_FieldSubPathValue) AsStatusPathValue() (PortForwardingServiceStatus_FieldPathValue, bool) {
	res, ok := fpvs.subPathValue.(PortForwardingServiceStatus_FieldPathValue)
	return res, ok
}

func (fpvs *PortForwardingService_FieldSubPathValue) SetTo(target **PortForwardingService) {
	if *target == nil {
		*target = new(PortForwardingService)
	}
	switch fpvs.Selector() {
	case PortForwardingService_FieldPathSelectorMetadata:
		fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).SetTo(&(*target).Metadata)
	case PortForwardingService_FieldPathSelectorSpec:
		fpvs.subPathValue.(PortForwardingServiceSpec_FieldPathValue).SetTo(&(*target).Spec)
	case PortForwardingService_FieldPathSelectorStatus:
		fpvs.subPathValue.(PortForwardingServiceStatus_FieldPathValue).SetTo(&(*target).Status)
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fpvs.Selector()))
	}
}

func (fpvs *PortForwardingService_FieldSubPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*PortForwardingService)
	fpvs.SetTo(&typedObject)
}

func (fpvs *PortForwardingService_FieldSubPathValue) GetRawValue() interface{} {
	return fpvs.subPathValue.GetRawValue()
}

func (fpvs *PortForwardingService_FieldSubPathValue) CompareWith(source *PortForwardingService) (int, bool) {
	switch fpvs.Selector() {
	case PortForwardingService_FieldPathSelectorMetadata:
		return fpvs.subPathValue.(ntt_meta.Meta_FieldPathValue).CompareWith(source.GetMetadata())
	case PortForwardingService_FieldPathSelectorSpec:
		return fpvs.subPathValue.(PortForwardingServiceSpec_FieldPathValue).CompareWith(source.GetSpec())
	case PortForwardingService_FieldPathSelectorStatus:
		return fpvs.subPathValue.(PortForwardingServiceStatus_FieldPathValue).CompareWith(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fpvs.Selector()))
	}
}

func (fpvs *PortForwardingService_FieldSubPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpvs.CompareWith(source.(*PortForwardingService))
}

// PortForwardingService_FieldPathArrayItemValue allows storing single item in Path-specific values for PortForwardingService according to their type
// Present only for array (repeated) types.
type PortForwardingService_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PortForwardingService_FieldPath
	ContainsValue(*PortForwardingService) bool
}

// ParsePortForwardingService_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePortForwardingService_FieldPathArrayItemValue(pathStr, valueStr string) (PortForwardingService_FieldPathArrayItemValue, error) {
	fp, err := ParsePortForwardingService_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PortForwardingService field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PortForwardingService_FieldPathArrayItemValue), nil
}

func MustParsePortForwardingService_FieldPathArrayItemValue(pathStr, valueStr string) PortForwardingService_FieldPathArrayItemValue {
	fpaiv, err := ParsePortForwardingService_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PortForwardingService_FieldTerminalPathArrayItemValue struct {
	PortForwardingService_FieldTerminalPath
	value interface{}
}

var _ PortForwardingService_FieldPathArrayItemValue = (*PortForwardingService_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object PortForwardingService as interface{}
func (fpaiv *PortForwardingService_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *PortForwardingService_FieldTerminalPathArrayItemValue) GetSingle(source *PortForwardingService) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PortForwardingService_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*PortForwardingService))
}

// Contains returns a boolean indicating if value that is being held is present in given 'PortForwardingService'
func (fpaiv *PortForwardingService_FieldTerminalPathArrayItemValue) ContainsValue(source *PortForwardingService) bool {
	slice := fpaiv.PortForwardingService_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

type PortForwardingService_FieldSubPathArrayItemValue struct {
	PortForwardingService_FieldPath
	subPathItemValue gotenobject.FieldPathArrayItemValue
}

// GetRawValue returns stored array item value
func (fpaivs *PortForwardingService_FieldSubPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaivs.subPathItemValue.GetRawItemValue()
}
func (fpaivs *PortForwardingService_FieldSubPathArrayItemValue) AsMetadataPathItemValue() (ntt_meta.Meta_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *PortForwardingService_FieldSubPathArrayItemValue) AsSpecPathItemValue() (PortForwardingServiceSpec_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(PortForwardingServiceSpec_FieldPathArrayItemValue)
	return res, ok
}
func (fpaivs *PortForwardingService_FieldSubPathArrayItemValue) AsStatusPathItemValue() (PortForwardingServiceStatus_FieldPathArrayItemValue, bool) {
	res, ok := fpaivs.subPathItemValue.(PortForwardingServiceStatus_FieldPathArrayItemValue)
	return res, ok
}

// Contains returns a boolean indicating if value that is being held is present in given 'PortForwardingService'
func (fpaivs *PortForwardingService_FieldSubPathArrayItemValue) ContainsValue(source *PortForwardingService) bool {
	switch fpaivs.Selector() {
	case PortForwardingService_FieldPathSelectorMetadata:
		return fpaivs.subPathItemValue.(ntt_meta.Meta_FieldPathArrayItemValue).ContainsValue(source.GetMetadata())
	case PortForwardingService_FieldPathSelectorSpec:
		return fpaivs.subPathItemValue.(PortForwardingServiceSpec_FieldPathArrayItemValue).ContainsValue(source.GetSpec())
	case PortForwardingService_FieldPathSelectorStatus:
		return fpaivs.subPathItemValue.(PortForwardingServiceStatus_FieldPathArrayItemValue).ContainsValue(source.GetStatus())
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService: %d", fpaivs.Selector()))
	}
}

// PortForwardingService_FieldPathArrayOfValues allows storing slice of values for PortForwardingService fields according to their type
type PortForwardingService_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PortForwardingService_FieldPath
}

func ParsePortForwardingService_FieldPathArrayOfValues(pathStr, valuesStr string) (PortForwardingService_FieldPathArrayOfValues, error) {
	fp, err := ParsePortForwardingService_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing PortForwardingService field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PortForwardingService_FieldPathArrayOfValues), nil
}

func MustParsePortForwardingService_FieldPathArrayOfValues(pathStr, valuesStr string) PortForwardingService_FieldPathArrayOfValues {
	fpaov, err := ParsePortForwardingService_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PortForwardingService_FieldTerminalPathArrayOfValues struct {
	PortForwardingService_FieldTerminalPath
	values interface{}
}

var _ PortForwardingService_FieldPathArrayOfValues = (*PortForwardingService_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PortForwardingService_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case PortForwardingService_FieldPathSelectorName:
		for _, v := range fpaov.values.([]*Name) {
			values = append(values, v)
		}
	case PortForwardingService_FieldPathSelectorDisplayName:
		for _, v := range fpaov.values.([]string) {
			values = append(values, v)
		}
	case PortForwardingService_FieldPathSelectorMetadata:
		for _, v := range fpaov.values.([]*ntt_meta.Meta) {
			values = append(values, v)
		}
	case PortForwardingService_FieldPathSelectorSpec:
		for _, v := range fpaov.values.([]*PortForwardingService_Spec) {
			values = append(values, v)
		}
	case PortForwardingService_FieldPathSelectorStatus:
		for _, v := range fpaov.values.([]*PortForwardingService_Status) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *PortForwardingService_FieldTerminalPathArrayOfValues) AsNameArrayOfValues() ([]*Name, bool) {
	res, ok := fpaov.values.([]*Name)
	return res, ok
}
func (fpaov *PortForwardingService_FieldTerminalPathArrayOfValues) AsDisplayNameArrayOfValues() ([]string, bool) {
	res, ok := fpaov.values.([]string)
	return res, ok
}
func (fpaov *PortForwardingService_FieldTerminalPathArrayOfValues) AsMetadataArrayOfValues() ([]*ntt_meta.Meta, bool) {
	res, ok := fpaov.values.([]*ntt_meta.Meta)
	return res, ok
}
func (fpaov *PortForwardingService_FieldTerminalPathArrayOfValues) AsSpecArrayOfValues() ([]*PortForwardingService_Spec, bool) {
	res, ok := fpaov.values.([]*PortForwardingService_Spec)
	return res, ok
}
func (fpaov *PortForwardingService_FieldTerminalPathArrayOfValues) AsStatusArrayOfValues() ([]*PortForwardingService_Status, bool) {
	res, ok := fpaov.values.([]*PortForwardingService_Status)
	return res, ok
}

type PortForwardingService_FieldSubPathArrayOfValues struct {
	PortForwardingService_FieldPath
	subPathArrayOfValues gotenobject.FieldPathArrayOfValues
}

var _ PortForwardingService_FieldPathArrayOfValues = (*PortForwardingService_FieldSubPathArrayOfValues)(nil)

func (fpsaov *PortForwardingService_FieldSubPathArrayOfValues) GetRawValues() []interface{} {
	return fpsaov.subPathArrayOfValues.GetRawValues()
}
func (fpsaov *PortForwardingService_FieldSubPathArrayOfValues) AsMetadataPathArrayOfValues() (ntt_meta.Meta_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(ntt_meta.Meta_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *PortForwardingService_FieldSubPathArrayOfValues) AsSpecPathArrayOfValues() (PortForwardingServiceSpec_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(PortForwardingServiceSpec_FieldPathArrayOfValues)
	return res, ok
}
func (fpsaov *PortForwardingService_FieldSubPathArrayOfValues) AsStatusPathArrayOfValues() (PortForwardingServiceStatus_FieldPathArrayOfValues, bool) {
	res, ok := fpsaov.subPathArrayOfValues.(PortForwardingServiceStatus_FieldPathArrayOfValues)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PortForwardingServiceSpec_FieldPath interface {
	gotenobject.FieldPath
	Selector() PortForwardingServiceSpec_FieldPathSelector
	Get(source *PortForwardingService_Spec) []interface{}
	GetSingle(source *PortForwardingService_Spec) (interface{}, bool)
	ClearValue(item *PortForwardingService_Spec)

	// Those methods build corresponding PortForwardingServiceSpec_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PortForwardingServiceSpec_FieldPathValue
	WithIArrayOfValues(values interface{}) PortForwardingServiceSpec_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PortForwardingServiceSpec_FieldPathArrayItemValue
}

type PortForwardingServiceSpec_FieldPathSelector int32

const (
	PortForwardingServiceSpec_FieldPathSelectorAddresses                 PortForwardingServiceSpec_FieldPathSelector = 0
	PortForwardingServiceSpec_FieldPathSelectorProviderLoadBalancingMode PortForwardingServiceSpec_FieldPathSelector = 1
	PortForwardingServiceSpec_FieldPathSelectorTargetLoadBalancingMode   PortForwardingServiceSpec_FieldPathSelector = 2
	PortForwardingServiceSpec_FieldPathSelectorDisabled                  PortForwardingServiceSpec_FieldPathSelector = 3
	PortForwardingServiceSpec_FieldPathSelectorAccessPoints              PortForwardingServiceSpec_FieldPathSelector = 4
)

func (s PortForwardingServiceSpec_FieldPathSelector) String() string {
	switch s {
	case PortForwardingServiceSpec_FieldPathSelectorAddresses:
		return "addresses"
	case PortForwardingServiceSpec_FieldPathSelectorProviderLoadBalancingMode:
		return "provider_load_balancing_mode"
	case PortForwardingServiceSpec_FieldPathSelectorTargetLoadBalancingMode:
		return "target_load_balancing_mode"
	case PortForwardingServiceSpec_FieldPathSelectorDisabled:
		return "disabled"
	case PortForwardingServiceSpec_FieldPathSelectorAccessPoints:
		return "access_points"
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Spec: %d", s))
	}
}

func BuildPortForwardingServiceSpec_FieldPath(fp gotenobject.RawFieldPath) (PortForwardingServiceSpec_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object PortForwardingService_Spec")
	}
	if len(fp) == 1 {
		switch fp[0] {
		case "addresses":
			return &PortForwardingServiceSpec_FieldTerminalPath{selector: PortForwardingServiceSpec_FieldPathSelectorAddresses}, nil
		case "provider_load_balancing_mode", "providerLoadBalancingMode", "provider-load-balancing-mode":
			return &PortForwardingServiceSpec_FieldTerminalPath{selector: PortForwardingServiceSpec_FieldPathSelectorProviderLoadBalancingMode}, nil
		case "target_load_balancing_mode", "targetLoadBalancingMode", "target-load-balancing-mode":
			return &PortForwardingServiceSpec_FieldTerminalPath{selector: PortForwardingServiceSpec_FieldPathSelectorTargetLoadBalancingMode}, nil
		case "disabled":
			return &PortForwardingServiceSpec_FieldTerminalPath{selector: PortForwardingServiceSpec_FieldPathSelectorDisabled}, nil
		case "access_points", "accessPoints", "access-points":
			return &PortForwardingServiceSpec_FieldTerminalPath{selector: PortForwardingServiceSpec_FieldPathSelectorAccessPoints}, nil
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object PortForwardingService_Spec", fp)
}

func ParsePortForwardingServiceSpec_FieldPath(rawField string) (PortForwardingServiceSpec_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPortForwardingServiceSpec_FieldPath(fp)
}

func MustParsePortForwardingServiceSpec_FieldPath(rawField string) PortForwardingServiceSpec_FieldPath {
	fp, err := ParsePortForwardingServiceSpec_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PortForwardingServiceSpec_FieldTerminalPath struct {
	selector PortForwardingServiceSpec_FieldPathSelector
}

var _ PortForwardingServiceSpec_FieldPath = (*PortForwardingServiceSpec_FieldTerminalPath)(nil)

func (fp *PortForwardingServiceSpec_FieldTerminalPath) Selector() PortForwardingServiceSpec_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PortForwardingServiceSpec_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PortForwardingServiceSpec_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source PortForwardingService_Spec
func (fp *PortForwardingServiceSpec_FieldTerminalPath) Get(source *PortForwardingService_Spec) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		case PortForwardingServiceSpec_FieldPathSelectorAddresses:
			for _, value := range source.GetAddresses() {
				values = append(values, value)
			}
		case PortForwardingServiceSpec_FieldPathSelectorProviderLoadBalancingMode:
			values = append(values, source.ProviderLoadBalancingMode)
		case PortForwardingServiceSpec_FieldPathSelectorTargetLoadBalancingMode:
			values = append(values, source.TargetLoadBalancingMode)
		case PortForwardingServiceSpec_FieldPathSelectorDisabled:
			values = append(values, source.Disabled)
		case PortForwardingServiceSpec_FieldPathSelectorAccessPoints:
			for _, value := range source.GetAccessPoints() {
				values = append(values, value)
			}
		default:
			panic(fmt.Sprintf("Invalid selector for PortForwardingService_Spec: %d", fp.selector))
		}
	}
	return
}

func (fp *PortForwardingServiceSpec_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*PortForwardingService_Spec))
}

// GetSingle returns value pointed by specific field of from source PortForwardingService_Spec
func (fp *PortForwardingServiceSpec_FieldTerminalPath) GetSingle(source *PortForwardingService_Spec) (interface{}, bool) {
	switch fp.selector {
	case PortForwardingServiceSpec_FieldPathSelectorAddresses:
		res := source.GetAddresses()
		return res, res != nil
	case PortForwardingServiceSpec_FieldPathSelectorProviderLoadBalancingMode:
		return source.GetProviderLoadBalancingMode(), source != nil
	case PortForwardingServiceSpec_FieldPathSelectorTargetLoadBalancingMode:
		return source.GetTargetLoadBalancingMode(), source != nil
	case PortForwardingServiceSpec_FieldPathSelectorDisabled:
		return source.GetDisabled(), source != nil
	case PortForwardingServiceSpec_FieldPathSelectorAccessPoints:
		res := source.GetAccessPoints()
		return res, res != nil
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Spec: %d", fp.selector))
	}
}

func (fp *PortForwardingServiceSpec_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*PortForwardingService_Spec))
}

// GetDefault returns a default value of the field type
func (fp *PortForwardingServiceSpec_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	case PortForwardingServiceSpec_FieldPathSelectorAddresses:
		return ([]string)(nil)
	case PortForwardingServiceSpec_FieldPathSelectorProviderLoadBalancingMode:
		return PortForwardingService_Spec_PROVIDER_LOAD_BALANCING_MODE_UNSPECIFIED
	case PortForwardingServiceSpec_FieldPathSelectorTargetLoadBalancingMode:
		return PortForwardingService_Spec_PROVIDER_LOAD_BALANCING_MODE_UNSPECIFIED
	case PortForwardingServiceSpec_FieldPathSelectorDisabled:
		return false
	case PortForwardingServiceSpec_FieldPathSelectorAccessPoints:
		return ([]*access_point.Name)(nil)
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Spec: %d", fp.selector))
	}
}

func (fp *PortForwardingServiceSpec_FieldTerminalPath) ClearValue(item *PortForwardingService_Spec) {
	if item != nil {
		switch fp.selector {
		case PortForwardingServiceSpec_FieldPathSelectorAddresses:
			item.Addresses = nil
		case PortForwardingServiceSpec_FieldPathSelectorProviderLoadBalancingMode:
			item.ProviderLoadBalancingMode = PortForwardingService_Spec_PROVIDER_LOAD_BALANCING_MODE_UNSPECIFIED
		case PortForwardingServiceSpec_FieldPathSelectorTargetLoadBalancingMode:
			item.TargetLoadBalancingMode = PortForwardingService_Spec_PROVIDER_LOAD_BALANCING_MODE_UNSPECIFIED
		case PortForwardingServiceSpec_FieldPathSelectorDisabled:
			item.Disabled = false
		case PortForwardingServiceSpec_FieldPathSelectorAccessPoints:
			item.AccessPoints = nil
		default:
			panic(fmt.Sprintf("Invalid selector for PortForwardingService_Spec: %d", fp.selector))
		}
	}
}

func (fp *PortForwardingServiceSpec_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*PortForwardingService_Spec))
}

// IsLeaf - whether field path is holds simple value
func (fp *PortForwardingServiceSpec_FieldTerminalPath) IsLeaf() bool {
	return fp.selector == PortForwardingServiceSpec_FieldPathSelectorAddresses ||
		fp.selector == PortForwardingServiceSpec_FieldPathSelectorProviderLoadBalancingMode ||
		fp.selector == PortForwardingServiceSpec_FieldPathSelectorTargetLoadBalancingMode ||
		fp.selector == PortForwardingServiceSpec_FieldPathSelectorDisabled ||
		fp.selector == PortForwardingServiceSpec_FieldPathSelectorAccessPoints
}

func (fp *PortForwardingServiceSpec_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *PortForwardingServiceSpec_FieldTerminalPath) WithIValue(value interface{}) PortForwardingServiceSpec_FieldPathValue {
	switch fp.selector {
	case PortForwardingServiceSpec_FieldPathSelectorAddresses:
		return &PortForwardingServiceSpec_FieldTerminalPathValue{PortForwardingServiceSpec_FieldTerminalPath: *fp, value: value.([]string)}
	case PortForwardingServiceSpec_FieldPathSelectorProviderLoadBalancingMode:
		return &PortForwardingServiceSpec_FieldTerminalPathValue{PortForwardingServiceSpec_FieldTerminalPath: *fp, value: value.(PortForwardingService_Spec_LoadBalancingMode)}
	case PortForwardingServiceSpec_FieldPathSelectorTargetLoadBalancingMode:
		return &PortForwardingServiceSpec_FieldTerminalPathValue{PortForwardingServiceSpec_FieldTerminalPath: *fp, value: value.(PortForwardingService_Spec_LoadBalancingMode)}
	case PortForwardingServiceSpec_FieldPathSelectorDisabled:
		return &PortForwardingServiceSpec_FieldTerminalPathValue{PortForwardingServiceSpec_FieldTerminalPath: *fp, value: value.(bool)}
	case PortForwardingServiceSpec_FieldPathSelectorAccessPoints:
		return &PortForwardingServiceSpec_FieldTerminalPathValue{PortForwardingServiceSpec_FieldTerminalPath: *fp, value: value.([]*access_point.Name)}
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Spec: %d", fp.selector))
	}
}

func (fp *PortForwardingServiceSpec_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PortForwardingServiceSpec_FieldTerminalPath) WithIArrayOfValues(values interface{}) PortForwardingServiceSpec_FieldPathArrayOfValues {
	fpaov := &PortForwardingServiceSpec_FieldTerminalPathArrayOfValues{PortForwardingServiceSpec_FieldTerminalPath: *fp}
	switch fp.selector {
	case PortForwardingServiceSpec_FieldPathSelectorAddresses:
		return &PortForwardingServiceSpec_FieldTerminalPathArrayOfValues{PortForwardingServiceSpec_FieldTerminalPath: *fp, values: values.([][]string)}
	case PortForwardingServiceSpec_FieldPathSelectorProviderLoadBalancingMode:
		return &PortForwardingServiceSpec_FieldTerminalPathArrayOfValues{PortForwardingServiceSpec_FieldTerminalPath: *fp, values: values.([]PortForwardingService_Spec_LoadBalancingMode)}
	case PortForwardingServiceSpec_FieldPathSelectorTargetLoadBalancingMode:
		return &PortForwardingServiceSpec_FieldTerminalPathArrayOfValues{PortForwardingServiceSpec_FieldTerminalPath: *fp, values: values.([]PortForwardingService_Spec_LoadBalancingMode)}
	case PortForwardingServiceSpec_FieldPathSelectorDisabled:
		return &PortForwardingServiceSpec_FieldTerminalPathArrayOfValues{PortForwardingServiceSpec_FieldTerminalPath: *fp, values: values.([]bool)}
	case PortForwardingServiceSpec_FieldPathSelectorAccessPoints:
		return &PortForwardingServiceSpec_FieldTerminalPathArrayOfValues{PortForwardingServiceSpec_FieldTerminalPath: *fp, values: values.([][]*access_point.Name)}
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Spec: %d", fp.selector))
	}
	return fpaov
}

func (fp *PortForwardingServiceSpec_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PortForwardingServiceSpec_FieldTerminalPath) WithIArrayItemValue(value interface{}) PortForwardingServiceSpec_FieldPathArrayItemValue {
	switch fp.selector {
	case PortForwardingServiceSpec_FieldPathSelectorAddresses:
		return &PortForwardingServiceSpec_FieldTerminalPathArrayItemValue{PortForwardingServiceSpec_FieldTerminalPath: *fp, value: value.(string)}
	case PortForwardingServiceSpec_FieldPathSelectorAccessPoints:
		return &PortForwardingServiceSpec_FieldTerminalPathArrayItemValue{PortForwardingServiceSpec_FieldTerminalPath: *fp, value: value.(*access_point.Name)}
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Spec: %d", fp.selector))
	}
}

func (fp *PortForwardingServiceSpec_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// PortForwardingServiceSpec_FieldPathValue allows storing values for Spec fields according to their type
type PortForwardingServiceSpec_FieldPathValue interface {
	PortForwardingServiceSpec_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **PortForwardingService_Spec)
	CompareWith(*PortForwardingService_Spec) (cmp int, comparable bool)
}

func ParsePortForwardingServiceSpec_FieldPathValue(pathStr, valueStr string) (PortForwardingServiceSpec_FieldPathValue, error) {
	fp, err := ParsePortForwardingServiceSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path value from %s: %v", valueStr, err)
	}
	return fpv.(PortForwardingServiceSpec_FieldPathValue), nil
}

func MustParsePortForwardingServiceSpec_FieldPathValue(pathStr, valueStr string) PortForwardingServiceSpec_FieldPathValue {
	fpv, err := ParsePortForwardingServiceSpec_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PortForwardingServiceSpec_FieldTerminalPathValue struct {
	PortForwardingServiceSpec_FieldTerminalPath
	value interface{}
}

var _ PortForwardingServiceSpec_FieldPathValue = (*PortForwardingServiceSpec_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Spec' as interface{}
func (fpv *PortForwardingServiceSpec_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}
func (fpv *PortForwardingServiceSpec_FieldTerminalPathValue) AsAddressesValue() ([]string, bool) {
	res, ok := fpv.value.([]string)
	return res, ok
}
func (fpv *PortForwardingServiceSpec_FieldTerminalPathValue) AsProviderLoadBalancingModeValue() (PortForwardingService_Spec_LoadBalancingMode, bool) {
	res, ok := fpv.value.(PortForwardingService_Spec_LoadBalancingMode)
	return res, ok
}
func (fpv *PortForwardingServiceSpec_FieldTerminalPathValue) AsTargetLoadBalancingModeValue() (PortForwardingService_Spec_LoadBalancingMode, bool) {
	res, ok := fpv.value.(PortForwardingService_Spec_LoadBalancingMode)
	return res, ok
}
func (fpv *PortForwardingServiceSpec_FieldTerminalPathValue) AsDisabledValue() (bool, bool) {
	res, ok := fpv.value.(bool)
	return res, ok
}
func (fpv *PortForwardingServiceSpec_FieldTerminalPathValue) AsAccessPointsValue() ([]*access_point.Name, bool) {
	res, ok := fpv.value.([]*access_point.Name)
	return res, ok
}

// SetTo stores value for selected field for object Spec
func (fpv *PortForwardingServiceSpec_FieldTerminalPathValue) SetTo(target **PortForwardingService_Spec) {
	if *target == nil {
		*target = new(PortForwardingService_Spec)
	}
	switch fpv.selector {
	case PortForwardingServiceSpec_FieldPathSelectorAddresses:
		(*target).Addresses = fpv.value.([]string)
	case PortForwardingServiceSpec_FieldPathSelectorProviderLoadBalancingMode:
		(*target).ProviderLoadBalancingMode = fpv.value.(PortForwardingService_Spec_LoadBalancingMode)
	case PortForwardingServiceSpec_FieldPathSelectorTargetLoadBalancingMode:
		(*target).TargetLoadBalancingMode = fpv.value.(PortForwardingService_Spec_LoadBalancingMode)
	case PortForwardingServiceSpec_FieldPathSelectorDisabled:
		(*target).Disabled = fpv.value.(bool)
	case PortForwardingServiceSpec_FieldPathSelectorAccessPoints:
		(*target).AccessPoints = fpv.value.([]*access_point.Name)
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Spec: %d", fpv.selector))
	}
}

func (fpv *PortForwardingServiceSpec_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*PortForwardingService_Spec)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PortForwardingServiceSpec_FieldTerminalPathValue' with the value under path in 'PortForwardingService_Spec'.
func (fpv *PortForwardingServiceSpec_FieldTerminalPathValue) CompareWith(source *PortForwardingService_Spec) (int, bool) {
	switch fpv.selector {
	case PortForwardingServiceSpec_FieldPathSelectorAddresses:
		return 0, false
	case PortForwardingServiceSpec_FieldPathSelectorProviderLoadBalancingMode:
		leftValue := fpv.value.(PortForwardingService_Spec_LoadBalancingMode)
		rightValue := source.GetProviderLoadBalancingMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PortForwardingServiceSpec_FieldPathSelectorTargetLoadBalancingMode:
		leftValue := fpv.value.(PortForwardingService_Spec_LoadBalancingMode)
		rightValue := source.GetTargetLoadBalancingMode()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if (leftValue) < (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PortForwardingServiceSpec_FieldPathSelectorDisabled:
		leftValue := fpv.value.(bool)
		rightValue := source.GetDisabled()
		if (leftValue) == (rightValue) {
			return 0, true
		} else if !(leftValue) && (rightValue) {
			return -1, true
		} else {
			return 1, true
		}
	case PortForwardingServiceSpec_FieldPathSelectorAccessPoints:
		return 0, false
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Spec: %d", fpv.selector))
	}
}

func (fpv *PortForwardingServiceSpec_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*PortForwardingService_Spec))
}

// PortForwardingServiceSpec_FieldPathArrayItemValue allows storing single item in Path-specific values for Spec according to their type
// Present only for array (repeated) types.
type PortForwardingServiceSpec_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PortForwardingServiceSpec_FieldPath
	ContainsValue(*PortForwardingService_Spec) bool
}

// ParsePortForwardingServiceSpec_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePortForwardingServiceSpec_FieldPathArrayItemValue(pathStr, valueStr string) (PortForwardingServiceSpec_FieldPathArrayItemValue, error) {
	fp, err := ParsePortForwardingServiceSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PortForwardingServiceSpec_FieldPathArrayItemValue), nil
}

func MustParsePortForwardingServiceSpec_FieldPathArrayItemValue(pathStr, valueStr string) PortForwardingServiceSpec_FieldPathArrayItemValue {
	fpaiv, err := ParsePortForwardingServiceSpec_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PortForwardingServiceSpec_FieldTerminalPathArrayItemValue struct {
	PortForwardingServiceSpec_FieldTerminalPath
	value interface{}
}

var _ PortForwardingServiceSpec_FieldPathArrayItemValue = (*PortForwardingServiceSpec_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object PortForwardingService_Spec as interface{}
func (fpaiv *PortForwardingServiceSpec_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}
func (fpaiv *PortForwardingServiceSpec_FieldTerminalPathArrayItemValue) AsAddressesItemValue() (string, bool) {
	res, ok := fpaiv.value.(string)
	return res, ok
}
func (fpaiv *PortForwardingServiceSpec_FieldTerminalPathArrayItemValue) AsAccessPointsItemValue() (*access_point.Name, bool) {
	res, ok := fpaiv.value.(*access_point.Name)
	return res, ok
}

func (fpaiv *PortForwardingServiceSpec_FieldTerminalPathArrayItemValue) GetSingle(source *PortForwardingService_Spec) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PortForwardingServiceSpec_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*PortForwardingService_Spec))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Spec'
func (fpaiv *PortForwardingServiceSpec_FieldTerminalPathArrayItemValue) ContainsValue(source *PortForwardingService_Spec) bool {
	slice := fpaiv.PortForwardingServiceSpec_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// PortForwardingServiceSpec_FieldPathArrayOfValues allows storing slice of values for Spec fields according to their type
type PortForwardingServiceSpec_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PortForwardingServiceSpec_FieldPath
}

func ParsePortForwardingServiceSpec_FieldPathArrayOfValues(pathStr, valuesStr string) (PortForwardingServiceSpec_FieldPathArrayOfValues, error) {
	fp, err := ParsePortForwardingServiceSpec_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Spec field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PortForwardingServiceSpec_FieldPathArrayOfValues), nil
}

func MustParsePortForwardingServiceSpec_FieldPathArrayOfValues(pathStr, valuesStr string) PortForwardingServiceSpec_FieldPathArrayOfValues {
	fpaov, err := ParsePortForwardingServiceSpec_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PortForwardingServiceSpec_FieldTerminalPathArrayOfValues struct {
	PortForwardingServiceSpec_FieldTerminalPath
	values interface{}
}

var _ PortForwardingServiceSpec_FieldPathArrayOfValues = (*PortForwardingServiceSpec_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PortForwardingServiceSpec_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	case PortForwardingServiceSpec_FieldPathSelectorAddresses:
		for _, v := range fpaov.values.([][]string) {
			values = append(values, v)
		}
	case PortForwardingServiceSpec_FieldPathSelectorProviderLoadBalancingMode:
		for _, v := range fpaov.values.([]PortForwardingService_Spec_LoadBalancingMode) {
			values = append(values, v)
		}
	case PortForwardingServiceSpec_FieldPathSelectorTargetLoadBalancingMode:
		for _, v := range fpaov.values.([]PortForwardingService_Spec_LoadBalancingMode) {
			values = append(values, v)
		}
	case PortForwardingServiceSpec_FieldPathSelectorDisabled:
		for _, v := range fpaov.values.([]bool) {
			values = append(values, v)
		}
	case PortForwardingServiceSpec_FieldPathSelectorAccessPoints:
		for _, v := range fpaov.values.([][]*access_point.Name) {
			values = append(values, v)
		}
	}
	return
}
func (fpaov *PortForwardingServiceSpec_FieldTerminalPathArrayOfValues) AsAddressesArrayOfValues() ([][]string, bool) {
	res, ok := fpaov.values.([][]string)
	return res, ok
}
func (fpaov *PortForwardingServiceSpec_FieldTerminalPathArrayOfValues) AsProviderLoadBalancingModeArrayOfValues() ([]PortForwardingService_Spec_LoadBalancingMode, bool) {
	res, ok := fpaov.values.([]PortForwardingService_Spec_LoadBalancingMode)
	return res, ok
}
func (fpaov *PortForwardingServiceSpec_FieldTerminalPathArrayOfValues) AsTargetLoadBalancingModeArrayOfValues() ([]PortForwardingService_Spec_LoadBalancingMode, bool) {
	res, ok := fpaov.values.([]PortForwardingService_Spec_LoadBalancingMode)
	return res, ok
}
func (fpaov *PortForwardingServiceSpec_FieldTerminalPathArrayOfValues) AsDisabledArrayOfValues() ([]bool, bool) {
	res, ok := fpaov.values.([]bool)
	return res, ok
}
func (fpaov *PortForwardingServiceSpec_FieldTerminalPathArrayOfValues) AsAccessPointsArrayOfValues() ([][]*access_point.Name, bool) {
	res, ok := fpaov.values.([][]*access_point.Name)
	return res, ok
}

// FieldPath provides implementation to handle
// https://github.com/protocolbuffers/protobuf/blob/master/src/google/protobuf/field_mask.proto
type PortForwardingServiceStatus_FieldPath interface {
	gotenobject.FieldPath
	Selector() PortForwardingServiceStatus_FieldPathSelector
	Get(source *PortForwardingService_Status) []interface{}
	GetSingle(source *PortForwardingService_Status) (interface{}, bool)
	ClearValue(item *PortForwardingService_Status)

	// Those methods build corresponding PortForwardingServiceStatus_FieldPathValue
	// (or array of values) and holds passed value. Panics if injected type is incorrect.
	WithIValue(value interface{}) PortForwardingServiceStatus_FieldPathValue
	WithIArrayOfValues(values interface{}) PortForwardingServiceStatus_FieldPathArrayOfValues
	WithIArrayItemValue(value interface{}) PortForwardingServiceStatus_FieldPathArrayItemValue
}

type PortForwardingServiceStatus_FieldPathSelector int32

func (s PortForwardingServiceStatus_FieldPathSelector) String() string {
	switch s {
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Status: %d", s))
	}
}

func BuildPortForwardingServiceStatus_FieldPath(fp gotenobject.RawFieldPath) (PortForwardingServiceStatus_FieldPath, error) {
	if len(fp) == 0 {
		return nil, status.Error(codes.InvalidArgument, "empty field path for object PortForwardingService_Status")
	}
	if len(fp) == 1 {
		switch fp[0] {
		}
	}
	return nil, status.Errorf(codes.InvalidArgument, "unknown field path '%s' for object PortForwardingService_Status", fp)
}

func ParsePortForwardingServiceStatus_FieldPath(rawField string) (PortForwardingServiceStatus_FieldPath, error) {
	fp, err := gotenobject.ParseRawFieldPath(rawField)
	if err != nil {
		return nil, err
	}
	return BuildPortForwardingServiceStatus_FieldPath(fp)
}

func MustParsePortForwardingServiceStatus_FieldPath(rawField string) PortForwardingServiceStatus_FieldPath {
	fp, err := ParsePortForwardingServiceStatus_FieldPath(rawField)
	if err != nil {
		panic(err)
	}
	return fp
}

type PortForwardingServiceStatus_FieldTerminalPath struct {
	selector PortForwardingServiceStatus_FieldPathSelector
}

var _ PortForwardingServiceStatus_FieldPath = (*PortForwardingServiceStatus_FieldTerminalPath)(nil)

func (fp *PortForwardingServiceStatus_FieldTerminalPath) Selector() PortForwardingServiceStatus_FieldPathSelector {
	return fp.selector
}

// String returns path representation in proto convention
func (fp *PortForwardingServiceStatus_FieldTerminalPath) String() string {
	return fp.selector.String()
}

// JSONString returns path representation is JSON convention
func (fp *PortForwardingServiceStatus_FieldTerminalPath) JSONString() string {
	return strcase.ToLowerCamel(fp.String())
}

// Get returns all values pointed by specific field from source PortForwardingService_Status
func (fp *PortForwardingServiceStatus_FieldTerminalPath) Get(source *PortForwardingService_Status) (values []interface{}) {
	if source != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for PortForwardingService_Status: %d", fp.selector))
		}
	}
	return
}

func (fp *PortForwardingServiceStatus_FieldTerminalPath) GetRaw(source proto.Message) []interface{} {
	return fp.Get(source.(*PortForwardingService_Status))
}

// GetSingle returns value pointed by specific field of from source PortForwardingService_Status
func (fp *PortForwardingServiceStatus_FieldTerminalPath) GetSingle(source *PortForwardingService_Status) (interface{}, bool) {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Status: %d", fp.selector))
	}
}

func (fp *PortForwardingServiceStatus_FieldTerminalPath) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fp.GetSingle(source.(*PortForwardingService_Status))
}

// GetDefault returns a default value of the field type
func (fp *PortForwardingServiceStatus_FieldTerminalPath) GetDefault() interface{} {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Status: %d", fp.selector))
	}
}

func (fp *PortForwardingServiceStatus_FieldTerminalPath) ClearValue(item *PortForwardingService_Status) {
	if item != nil {
		switch fp.selector {
		default:
			panic(fmt.Sprintf("Invalid selector for PortForwardingService_Status: %d", fp.selector))
		}
	}
}

func (fp *PortForwardingServiceStatus_FieldTerminalPath) ClearValueRaw(item proto.Message) {
	fp.ClearValue(item.(*PortForwardingService_Status))
}

// IsLeaf - whether field path is holds simple value
func (fp *PortForwardingServiceStatus_FieldTerminalPath) IsLeaf() bool {
	return false
}

func (fp *PortForwardingServiceStatus_FieldTerminalPath) SplitIntoTerminalIPaths() []gotenobject.FieldPath {
	return []gotenobject.FieldPath{fp}
}

func (fp *PortForwardingServiceStatus_FieldTerminalPath) WithIValue(value interface{}) PortForwardingServiceStatus_FieldPathValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Status: %d", fp.selector))
	}
}

func (fp *PortForwardingServiceStatus_FieldTerminalPath) WithRawIValue(value interface{}) gotenobject.FieldPathValue {
	return fp.WithIValue(value)
}

func (fp *PortForwardingServiceStatus_FieldTerminalPath) WithIArrayOfValues(values interface{}) PortForwardingServiceStatus_FieldPathArrayOfValues {
	fpaov := &PortForwardingServiceStatus_FieldTerminalPathArrayOfValues{PortForwardingServiceStatus_FieldTerminalPath: *fp}
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Status: %d", fp.selector))
	}
	return fpaov
}

func (fp *PortForwardingServiceStatus_FieldTerminalPath) WithRawIArrayOfValues(values interface{}) gotenobject.FieldPathArrayOfValues {
	return fp.WithIArrayOfValues(values)
}

func (fp *PortForwardingServiceStatus_FieldTerminalPath) WithIArrayItemValue(value interface{}) PortForwardingServiceStatus_FieldPathArrayItemValue {
	switch fp.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Status: %d", fp.selector))
	}
}

func (fp *PortForwardingServiceStatus_FieldTerminalPath) WithRawIArrayItemValue(value interface{}) gotenobject.FieldPathArrayItemValue {
	return fp.WithIArrayItemValue(value)
}

// PortForwardingServiceStatus_FieldPathValue allows storing values for Status fields according to their type
type PortForwardingServiceStatus_FieldPathValue interface {
	PortForwardingServiceStatus_FieldPath
	gotenobject.FieldPathValue
	SetTo(target **PortForwardingService_Status)
	CompareWith(*PortForwardingService_Status) (cmp int, comparable bool)
}

func ParsePortForwardingServiceStatus_FieldPathValue(pathStr, valueStr string) (PortForwardingServiceStatus_FieldPathValue, error) {
	fp, err := ParsePortForwardingServiceStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpv, err := gotenobject.ParseFieldPathValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path value from %s: %v", valueStr, err)
	}
	return fpv.(PortForwardingServiceStatus_FieldPathValue), nil
}

func MustParsePortForwardingServiceStatus_FieldPathValue(pathStr, valueStr string) PortForwardingServiceStatus_FieldPathValue {
	fpv, err := ParsePortForwardingServiceStatus_FieldPathValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpv
}

type PortForwardingServiceStatus_FieldTerminalPathValue struct {
	PortForwardingServiceStatus_FieldTerminalPath
	value interface{}
}

var _ PortForwardingServiceStatus_FieldPathValue = (*PortForwardingServiceStatus_FieldTerminalPathValue)(nil)

// GetRawValue returns raw value stored under selected path for 'Status' as interface{}
func (fpv *PortForwardingServiceStatus_FieldTerminalPathValue) GetRawValue() interface{} {
	return fpv.value
}

// SetTo stores value for selected field for object Status
func (fpv *PortForwardingServiceStatus_FieldTerminalPathValue) SetTo(target **PortForwardingService_Status) {
	if *target == nil {
		*target = new(PortForwardingService_Status)
	}
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Status: %d", fpv.selector))
	}
}

func (fpv *PortForwardingServiceStatus_FieldTerminalPathValue) SetToRaw(target proto.Message) {
	typedObject := target.(*PortForwardingService_Status)
	fpv.SetTo(&typedObject)
}

// CompareWith compares value in the 'PortForwardingServiceStatus_FieldTerminalPathValue' with the value under path in 'PortForwardingService_Status'.
func (fpv *PortForwardingServiceStatus_FieldTerminalPathValue) CompareWith(source *PortForwardingService_Status) (int, bool) {
	switch fpv.selector {
	default:
		panic(fmt.Sprintf("Invalid selector for PortForwardingService_Status: %d", fpv.selector))
	}
}

func (fpv *PortForwardingServiceStatus_FieldTerminalPathValue) CompareWithRaw(source proto.Message) (int, bool) {
	return fpv.CompareWith(source.(*PortForwardingService_Status))
}

// PortForwardingServiceStatus_FieldPathArrayItemValue allows storing single item in Path-specific values for Status according to their type
// Present only for array (repeated) types.
type PortForwardingServiceStatus_FieldPathArrayItemValue interface {
	gotenobject.FieldPathArrayItemValue
	PortForwardingServiceStatus_FieldPath
	ContainsValue(*PortForwardingService_Status) bool
}

// ParsePortForwardingServiceStatus_FieldPathArrayItemValue parses string and JSON-encoded value to its Value
func ParsePortForwardingServiceStatus_FieldPathArrayItemValue(pathStr, valueStr string) (PortForwardingServiceStatus_FieldPathArrayItemValue, error) {
	fp, err := ParsePortForwardingServiceStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaiv, err := gotenobject.ParseFieldPathArrayItemValue(fp, valueStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array item value from %s: %v", valueStr, err)
	}
	return fpaiv.(PortForwardingServiceStatus_FieldPathArrayItemValue), nil
}

func MustParsePortForwardingServiceStatus_FieldPathArrayItemValue(pathStr, valueStr string) PortForwardingServiceStatus_FieldPathArrayItemValue {
	fpaiv, err := ParsePortForwardingServiceStatus_FieldPathArrayItemValue(pathStr, valueStr)
	if err != nil {
		panic(err)
	}
	return fpaiv
}

type PortForwardingServiceStatus_FieldTerminalPathArrayItemValue struct {
	PortForwardingServiceStatus_FieldTerminalPath
	value interface{}
}

var _ PortForwardingServiceStatus_FieldPathArrayItemValue = (*PortForwardingServiceStatus_FieldTerminalPathArrayItemValue)(nil)

// GetRawValue returns stored element value for array in object PortForwardingService_Status as interface{}
func (fpaiv *PortForwardingServiceStatus_FieldTerminalPathArrayItemValue) GetRawItemValue() interface{} {
	return fpaiv.value
}

func (fpaiv *PortForwardingServiceStatus_FieldTerminalPathArrayItemValue) GetSingle(source *PortForwardingService_Status) (interface{}, bool) {
	return nil, false
}

func (fpaiv *PortForwardingServiceStatus_FieldTerminalPathArrayItemValue) GetSingleRaw(source proto.Message) (interface{}, bool) {
	return fpaiv.GetSingle(source.(*PortForwardingService_Status))
}

// Contains returns a boolean indicating if value that is being held is present in given 'Status'
func (fpaiv *PortForwardingServiceStatus_FieldTerminalPathArrayItemValue) ContainsValue(source *PortForwardingService_Status) bool {
	slice := fpaiv.PortForwardingServiceStatus_FieldTerminalPath.Get(source)
	for _, v := range slice {
		if asProtoMsg, ok := fpaiv.value.(proto.Message); ok {
			if proto.Equal(asProtoMsg, v.(proto.Message)) {
				return true
			}
		} else if reflect.DeepEqual(v, fpaiv.value) {
			return true
		}
	}
	return false
}

// PortForwardingServiceStatus_FieldPathArrayOfValues allows storing slice of values for Status fields according to their type
type PortForwardingServiceStatus_FieldPathArrayOfValues interface {
	gotenobject.FieldPathArrayOfValues
	PortForwardingServiceStatus_FieldPath
}

func ParsePortForwardingServiceStatus_FieldPathArrayOfValues(pathStr, valuesStr string) (PortForwardingServiceStatus_FieldPathArrayOfValues, error) {
	fp, err := ParsePortForwardingServiceStatus_FieldPath(pathStr)
	if err != nil {
		return nil, err
	}
	fpaov, err := gotenobject.ParseFieldPathArrayOfValues(fp, valuesStr)
	if err != nil {
		return nil, status.Errorf(codes.InvalidArgument, "error parsing Status field path array of values from %s: %v", valuesStr, err)
	}
	return fpaov.(PortForwardingServiceStatus_FieldPathArrayOfValues), nil
}

func MustParsePortForwardingServiceStatus_FieldPathArrayOfValues(pathStr, valuesStr string) PortForwardingServiceStatus_FieldPathArrayOfValues {
	fpaov, err := ParsePortForwardingServiceStatus_FieldPathArrayOfValues(pathStr, valuesStr)
	if err != nil {
		panic(err)
	}
	return fpaov
}

type PortForwardingServiceStatus_FieldTerminalPathArrayOfValues struct {
	PortForwardingServiceStatus_FieldTerminalPath
	values interface{}
}

var _ PortForwardingServiceStatus_FieldPathArrayOfValues = (*PortForwardingServiceStatus_FieldTerminalPathArrayOfValues)(nil)

func (fpaov *PortForwardingServiceStatus_FieldTerminalPathArrayOfValues) GetRawValues() (values []interface{}) {
	switch fpaov.selector {
	}
	return
}
