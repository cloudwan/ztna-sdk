// Code generated by protoc-gen-goten-go
// File: ztna/proto/v1alpha/port_forwarding_service.proto
// DO NOT EDIT!!!

package port_forwarding_service

import (
	"fmt"
	"reflect"
	"sync"

	"google.golang.org/protobuf/encoding/protojson"
	"google.golang.org/protobuf/proto"
	preflect "google.golang.org/protobuf/reflect/protoreflect"
	"google.golang.org/protobuf/runtime/protoimpl"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	access_point "github.com/cloudwan/ztna-sdk/resources/v1alpha/access_point"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = fmt.Errorf
	_ = reflect.Method{}
	_ = sync.Once{}

	_ = protojson.MarshalOptions{}
	_ = proto.MarshalOptions{}
	_ = preflect.Value{}
	_ = protoimpl.DescBuilder{}
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_project.Project{}
	_ = &access_point.AccessPoint{}
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type PortForwardingService_Spec_LoadBalancingMode int32

const (
	PortForwardingService_Spec_PROVIDER_LOAD_BALANCING_MODE_UNSPECIFIED PortForwardingService_Spec_LoadBalancingMode = 0
	PortForwardingService_Spec_ROUND_ROBIN                              PortForwardingService_Spec_LoadBalancingMode = 2
	PortForwardingService_Spec_RANDOM                                   PortForwardingService_Spec_LoadBalancingMode = 3
)

var (
	PortForwardingService_Spec_LoadBalancingMode_name = map[int32]string{
		0: "PROVIDER_LOAD_BALANCING_MODE_UNSPECIFIED",
		2: "ROUND_ROBIN",
		3: "RANDOM",
	}

	PortForwardingService_Spec_LoadBalancingMode_value = map[string]int32{
		"PROVIDER_LOAD_BALANCING_MODE_UNSPECIFIED": 0,
		"ROUND_ROBIN": 2,
		"RANDOM":      3,
	}
)

func (x PortForwardingService_Spec_LoadBalancingMode) Enum() *PortForwardingService_Spec_LoadBalancingMode {
	p := new(PortForwardingService_Spec_LoadBalancingMode)
	*p = x
	return p
}

func (x PortForwardingService_Spec_LoadBalancingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), preflect.EnumNumber(x))
}

func (PortForwardingService_Spec_LoadBalancingMode) Descriptor() preflect.EnumDescriptor {
	return ztna_proto_v1alpha_port_forwarding_service_proto_enumTypes[0].Descriptor()
}

func (PortForwardingService_Spec_LoadBalancingMode) Type() preflect.EnumType {
	return &ztna_proto_v1alpha_port_forwarding_service_proto_enumTypes[0]
}

func (x PortForwardingService_Spec_LoadBalancingMode) Number() preflect.EnumNumber {
	return preflect.EnumNumber(x)
}

// Deprecated, Use PortForwardingService_Spec_LoadBalancingMode.ProtoReflect.Descriptor instead.
func (PortForwardingService_Spec_LoadBalancingMode) EnumDescriptor() ([]byte, []int) {
	return ztna_proto_v1alpha_port_forwarding_service_proto_rawDescGZIP(), []int{0, 0, 0}
}

type PortForwardingService struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// Name of PortForwardingService
	Name *Name `protobuf:"bytes,1,opt,customtype=Name,name=name,proto3" json:"name,omitempty" firestore:"name"`
	// Display name of Pod
	DisplayName string                        `protobuf:"bytes,2,opt,name=display_name,json=displayName,proto3" json:"display_name,omitempty" firestore:"displayName"`
	Metadata    *ntt_meta.Meta                `protobuf:"bytes,3,opt,name=metadata,proto3" json:"metadata,omitempty" firestore:"metadata"`
	Spec        *PortForwardingService_Spec   `protobuf:"bytes,4,opt,name=spec,proto3" json:"spec,omitempty" firestore:"spec"`
	Status      *PortForwardingService_Status `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty" firestore:"status"`
}

func (m *PortForwardingService) Reset() {
	*m = PortForwardingService{}
	if protoimpl.UnsafeEnabled {
		mi := &ztna_proto_v1alpha_port_forwarding_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PortForwardingService) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PortForwardingService) ProtoMessage() {}

func (m *PortForwardingService) ProtoReflect() preflect.Message {
	mi := &ztna_proto_v1alpha_port_forwarding_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PortForwardingService) GotenMessage() {}

// Deprecated, Use PortForwardingService.ProtoReflect.Descriptor instead.
func (*PortForwardingService) Descriptor() ([]byte, []int) {
	return ztna_proto_v1alpha_port_forwarding_service_proto_rawDescGZIP(), []int{0}
}

func (m *PortForwardingService) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PortForwardingService) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PortForwardingService) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PortForwardingService) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PortForwardingService) GetName() *Name {
	if m != nil {
		return m.Name
	}
	return nil
}

func (m *PortForwardingService) GetDisplayName() string {
	if m != nil {
		return m.DisplayName
	}
	return ""
}

func (m *PortForwardingService) GetMetadata() *ntt_meta.Meta {
	if m != nil {
		return m.Metadata
	}
	return nil
}

func (m *PortForwardingService) GetSpec() *PortForwardingService_Spec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *PortForwardingService) GetStatus() *PortForwardingService_Status {
	if m != nil {
		return m.Status
	}
	return nil
}

func (m *PortForwardingService) SetName(fv *Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Name", "PortForwardingService"))
	}
	m.Name = fv
}

func (m *PortForwardingService) SetDisplayName(fv string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "DisplayName", "PortForwardingService"))
	}
	m.DisplayName = fv
}

func (m *PortForwardingService) SetMetadata(fv *ntt_meta.Meta) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Metadata", "PortForwardingService"))
	}
	m.Metadata = fv
}

func (m *PortForwardingService) SetSpec(fv *PortForwardingService_Spec) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Spec", "PortForwardingService"))
	}
	m.Spec = fv
}

func (m *PortForwardingService) SetStatus(fv *PortForwardingService_Status) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Status", "PortForwardingService"))
	}
	m.Status = fv
}

// The addresses that requests will be redirected to.
// For TCP connections use `tcp://<IP>:<PORT>` format.
type PortForwardingService_Spec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
	// The target addresses sessions should be redirected to.
	Addresses []string `protobuf:"bytes,1,rep,name=addresses,proto3" json:"addresses,omitempty" firestore:"addresses"`
	// How traffic is load balanced when there's two or more
	// providers are available for the service.
	ProviderLoadBalancingMode PortForwardingService_Spec_LoadBalancingMode `protobuf:"varint,3,opt,name=provider_load_balancing_mode,json=providerLoadBalancingMode,proto3,enum=ntt.ztna.v1alpha.PortForwardingService_Spec_LoadBalancingMode" json:"provider_load_balancing_mode,omitempty" firestore:"providerLoadBalancingMode"`
	// How traffic is load balanced when there's two or more
	// IP addresses are available for the service in a provider.
	TargetLoadBalancingMode PortForwardingService_Spec_LoadBalancingMode `protobuf:"varint,4,opt,name=target_load_balancing_mode,json=targetLoadBalancingMode,proto3,enum=ntt.ztna.v1alpha.PortForwardingService_Spec_LoadBalancingMode" json:"target_load_balancing_mode,omitempty" firestore:"targetLoadBalancingMode"`
	// Temporary disabling the portforwarding.
	// Note that changing this value won't close ongoing port
	// forwarding sessions.
	Disabled bool `protobuf:"varint,5,opt,name=disabled,proto3" json:"disabled,omitempty" firestore:"disabled"`
	// Custom access points for clients to connect to.
	// When not set, clients will use default access points.
	AccessPoints []*access_point.Name `protobuf:"bytes,6,rep,customtype=Name,name=access_points,json=accessPoints,proto3" json:"access_points,omitempty" firestore:"accessPoints"`
}

func (m *PortForwardingService_Spec) Reset() {
	*m = PortForwardingService_Spec{}
	if protoimpl.UnsafeEnabled {
		mi := &ztna_proto_v1alpha_port_forwarding_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PortForwardingService_Spec) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PortForwardingService_Spec) ProtoMessage() {}

func (m *PortForwardingService_Spec) ProtoReflect() preflect.Message {
	mi := &ztna_proto_v1alpha_port_forwarding_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PortForwardingService_Spec) GotenMessage() {}

// Deprecated, Use PortForwardingService_Spec.ProtoReflect.Descriptor instead.
func (*PortForwardingService_Spec) Descriptor() ([]byte, []int) {
	return ztna_proto_v1alpha_port_forwarding_service_proto_rawDescGZIP(), []int{0, 0}
}

func (m *PortForwardingService_Spec) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PortForwardingService_Spec) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PortForwardingService_Spec) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PortForwardingService_Spec) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

func (m *PortForwardingService_Spec) GetAddresses() []string {
	if m != nil {
		return m.Addresses
	}
	return nil
}

func (m *PortForwardingService_Spec) GetProviderLoadBalancingMode() PortForwardingService_Spec_LoadBalancingMode {
	if m != nil {
		return m.ProviderLoadBalancingMode
	}
	return PortForwardingService_Spec_PROVIDER_LOAD_BALANCING_MODE_UNSPECIFIED
}

func (m *PortForwardingService_Spec) GetTargetLoadBalancingMode() PortForwardingService_Spec_LoadBalancingMode {
	if m != nil {
		return m.TargetLoadBalancingMode
	}
	return PortForwardingService_Spec_PROVIDER_LOAD_BALANCING_MODE_UNSPECIFIED
}

func (m *PortForwardingService_Spec) GetDisabled() bool {
	if m != nil {
		return m.Disabled
	}
	return false
}

func (m *PortForwardingService_Spec) GetAccessPoints() []*access_point.Name {
	if m != nil {
		return m.AccessPoints
	}
	return nil
}

func (m *PortForwardingService_Spec) SetAddresses(fv []string) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Addresses", "PortForwardingService_Spec"))
	}
	m.Addresses = fv
}

func (m *PortForwardingService_Spec) SetProviderLoadBalancingMode(fv PortForwardingService_Spec_LoadBalancingMode) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "ProviderLoadBalancingMode", "PortForwardingService_Spec"))
	}
	m.ProviderLoadBalancingMode = fv
}

func (m *PortForwardingService_Spec) SetTargetLoadBalancingMode(fv PortForwardingService_Spec_LoadBalancingMode) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "TargetLoadBalancingMode", "PortForwardingService_Spec"))
	}
	m.TargetLoadBalancingMode = fv
}

func (m *PortForwardingService_Spec) SetDisabled(fv bool) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "Disabled", "PortForwardingService_Spec"))
	}
	m.Disabled = fv
}

func (m *PortForwardingService_Spec) SetAccessPoints(fv []*access_point.Name) {
	if m == nil {
		panic(fmt.Errorf("can't set %s on nil %s", "AccessPoints", "PortForwardingService_Spec"))
	}
	m.AccessPoints = fv
}

type PortForwardingService_Status struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (m *PortForwardingService_Status) Reset() {
	*m = PortForwardingService_Status{}
	if protoimpl.UnsafeEnabled {
		mi := &ztna_proto_v1alpha_port_forwarding_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		ms.StoreMessageInfo(mi)
	}
}

func (m *PortForwardingService_Status) String() string {
	return protoimpl.X.MessageStringOf(m)
}

func (*PortForwardingService_Status) ProtoMessage() {}

func (m *PortForwardingService_Status) ProtoReflect() preflect.Message {
	mi := &ztna_proto_v1alpha_port_forwarding_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && m != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(m))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(m)
}

func (*PortForwardingService_Status) GotenMessage() {}

// Deprecated, Use PortForwardingService_Status.ProtoReflect.Descriptor instead.
func (*PortForwardingService_Status) Descriptor() ([]byte, []int) {
	return ztna_proto_v1alpha_port_forwarding_service_proto_rawDescGZIP(), []int{0, 1}
}

func (m *PortForwardingService_Status) Unmarshal(b []byte) error {
	return proto.Unmarshal(b, m)
}

func (m *PortForwardingService_Status) Marshal() ([]byte, error) {
	return proto.Marshal(m)
}

func (m *PortForwardingService_Status) MarshalJSON() ([]byte, error) {
	return protojson.MarshalOptions{}.Marshal(m)
}

func (m *PortForwardingService_Status) UnmarshalJSON(data []byte) error {
	return protojson.Unmarshal(data, m)
}

var ztna_proto_v1alpha_port_forwarding_service_proto preflect.FileDescriptor

var ztna_proto_v1alpha_port_forwarding_service_proto_rawDesc = []byte{
	0x0a, 0x30, 0x7a, 0x74, 0x6e, 0x61, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x10, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x6e, 0x61, 0x2e, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x1a, 0x19, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x1a, 0x20, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x1a, 0x1d, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x74, 0x65, 0x6e, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x63, 0x6f, 0x6d, 0x6d, 0x6f, 0x6e,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x6d, 0x65, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x24, 0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x2f,
	0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x75, 0x64, 0x69,
	0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xda, 0x07, 0x0a, 0x15, 0x50, 0x6f, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x31, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1d, 0xb2, 0xda, 0x21, 0x19, 0x0a, 0x17, 0x0a, 0x15, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x70, 0x6c, 0x61, 0x79, 0x5f,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x64, 0x69, 0x73, 0x70,
	0x6c, 0x61, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6e, 0x74, 0x74, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x12, 0x40, 0x0a, 0x04, 0x73, 0x70, 0x65, 0x63, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x6e, 0x61, 0x2e, 0x76, 0x31,
	0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x73, 0x70, 0x65, 0x63, 0x12, 0x46, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x6e,
	0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x1a, 0xd8,
	0x03, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x64, 0x64, 0x72, 0x65,
	0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x65, 0x73, 0x12, 0x7f, 0x0a, 0x1c, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67,
	0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6e, 0x74,
	0x74, 0x2e, 0x7a, 0x74, 0x6e, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50,
	0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61,
	0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x19, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x7b, 0x0a, 0x1a, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74,
	0x5f, 0x6c, 0x6f, 0x61, 0x64, 0x5f, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x5f,
	0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x3e, 0x2e, 0x6e, 0x74, 0x74,
	0x2e, 0x7a, 0x74, 0x6e, 0x61, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2e, 0x50, 0x6f,
	0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x53, 0x70, 0x65, 0x63, 0x2e, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c,
	0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x17, 0x74, 0x61, 0x72, 0x67,
	0x65, 0x74, 0x4c, 0x6f, 0x61, 0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x64, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12,
	0x38, 0x0a, 0x0d, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x5f, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x73,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xb2, 0xda, 0x21, 0x0f, 0x0a, 0x0d, 0x0a, 0x0b,
	0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x52, 0x0c, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x50, 0x6f, 0x69, 0x6e, 0x74, 0x73, 0x22, 0x5e, 0x0a, 0x11, 0x4c, 0x6f, 0x61,
	0x64, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c,
	0x0a, 0x28, 0x50, 0x52, 0x4f, 0x56, 0x49, 0x44, 0x45, 0x52, 0x5f, 0x4c, 0x4f, 0x41, 0x44, 0x5f,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x49, 0x4e, 0x47, 0x5f, 0x4d, 0x4f, 0x44, 0x45, 0x5f, 0x55,
	0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49, 0x45, 0x44, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b,
	0x52, 0x4f, 0x55, 0x4e, 0x44, 0x5f, 0x52, 0x4f, 0x42, 0x49, 0x4e, 0x10, 0x02, 0x12, 0x0a, 0x0a,
	0x06, 0x52, 0x41, 0x4e, 0x44, 0x4f, 0x4d, 0x10, 0x03, 0x1a, 0x08, 0x0a, 0x06, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x3a, 0xce, 0x01, 0xea, 0x41, 0x6c, 0x0a, 0x25, 0x7a, 0x74, 0x6e, 0x61, 0x2e,
	0x65, 0x64, 0x67, 0x65, 0x6c, 0x71, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x50, 0x6f, 0x72, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x43, 0x70, 0x72, 0x6f, 0x6a, 0x65, 0x63, 0x74, 0x73, 0x2f, 0x7b, 0x70, 0x72, 0x6f, 0x6a,
	0x65, 0x63, 0x74, 0x7d, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x2f, 0x7b, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x7d, 0x92, 0xd9, 0x21, 0x4f, 0x0a, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x46,
	0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x73, 0x12, 0x16, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x1a, 0x17, 0x6e, 0x74, 0x74, 0x2e, 0x69,
	0x61, 0x6d, 0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x50, 0x72, 0x6f, 0x6a, 0x65,
	0x63, 0x74, 0x22, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0xda, 0x94, 0x23, 0x08, 0x12, 0x06, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x42, 0xa5, 0x03, 0xe8, 0xde, 0x21, 0x01, 0xd2, 0xff, 0xd0, 0x02, 0x5f,
	0x0a, 0x1d, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x12,
	0x3e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75,
	0x64, 0x77, 0x61, 0x6e, 0x2f, 0x7a, 0x74, 0x6e, 0x61, 0x2f, 0x73, 0x74, 0x6f, 0x72, 0x65, 0x2f,
	0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x0a,
	0x17, 0x63, 0x6f, 0x6d, 0x2e, 0x6e, 0x74, 0x74, 0x2e, 0x7a, 0x74, 0x6e, 0x61, 0x2e, 0x70, 0x62,
	0x2e, 0x76, 0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x42, 0x1a, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01, 0x5a, 0x5a, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x7a, 0x74, 0x6e, 0x61,
	0x2f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x2f, 0x76, 0x31, 0x61, 0x6c, 0x70,
	0x68, 0x61, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x3b, 0x70, 0x6f, 0x72, 0x74, 0x5f,
	0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0xd2, 0x84, 0xd1, 0x02, 0x3f, 0x0a, 0x0d, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61,
	0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x12, 0x2e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63,
	0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e, 0x2f, 0x7a, 0x74, 0x6e, 0x61,
	0x2f, 0x61, 0x75, 0x64, 0x69, 0x74, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x72, 0x73, 0x2f, 0x76,
	0x31, 0x61, 0x6c, 0x70, 0x68, 0x61, 0xa2, 0x80, 0xd1, 0x02, 0x61, 0x0a, 0x1e, 0x70, 0x6f, 0x72,
	0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x3f, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x77, 0x61, 0x6e,
	0x2f, 0x7a, 0x74, 0x6e, 0x61, 0x2f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2f, 0x76, 0x31, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x2f, 0x70, 0x6f, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x69, 0x6e, 0x67, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	ztna_proto_v1alpha_port_forwarding_service_proto_rawDescOnce sync.Once
	ztna_proto_v1alpha_port_forwarding_service_proto_rawDescData = ztna_proto_v1alpha_port_forwarding_service_proto_rawDesc
)

func ztna_proto_v1alpha_port_forwarding_service_proto_rawDescGZIP() []byte {
	ztna_proto_v1alpha_port_forwarding_service_proto_rawDescOnce.Do(func() {
		ztna_proto_v1alpha_port_forwarding_service_proto_rawDescData = protoimpl.X.CompressGZIP(ztna_proto_v1alpha_port_forwarding_service_proto_rawDescData)
	})
	return ztna_proto_v1alpha_port_forwarding_service_proto_rawDescData
}

var ztna_proto_v1alpha_port_forwarding_service_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var ztna_proto_v1alpha_port_forwarding_service_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var ztna_proto_v1alpha_port_forwarding_service_proto_goTypes = []interface{}{
	(PortForwardingService_Spec_LoadBalancingMode)(0), // 0: ntt.ztna.v1alpha.PortForwardingService_Spec_LoadBalancingMode
	(*PortForwardingService)(nil),                     // 1: ntt.ztna.v1alpha.PortForwardingService
	(*PortForwardingService_Spec)(nil),                // 2: ntt.ztna.v1alpha.PortForwardingService.Spec
	(*PortForwardingService_Status)(nil),              // 3: ntt.ztna.v1alpha.PortForwardingService.Status
	(*ntt_meta.Meta)(nil),                             // 4: ntt.types.Meta
}
var ztna_proto_v1alpha_port_forwarding_service_proto_depIdxs = []int32{
	4, // 0: ntt.ztna.v1alpha.PortForwardingService.metadata:type_name -> ntt.types.Meta
	2, // 1: ntt.ztna.v1alpha.PortForwardingService.spec:type_name -> ntt.ztna.v1alpha.PortForwardingService.Spec
	3, // 2: ntt.ztna.v1alpha.PortForwardingService.status:type_name -> ntt.ztna.v1alpha.PortForwardingService.Status
	0, // 3: ntt.ztna.v1alpha.PortForwardingService.Spec.provider_load_balancing_mode:type_name -> ntt.ztna.v1alpha.PortForwardingService_Spec_LoadBalancingMode
	0, // 4: ntt.ztna.v1alpha.PortForwardingService.Spec.target_load_balancing_mode:type_name -> ntt.ztna.v1alpha.PortForwardingService_Spec_LoadBalancingMode
	5, // [5:5] is the sub-list for method output_type
	5, // [5:5] is the sub-list for method input_type
	5, // [5:5] is the sub-list for extension type_name
	5, // [5:5] is the sub-list for extension extendee
	0, // [0:5] is the sub-list for field type_name
}

func init() { ztna_proto_v1alpha_port_forwarding_service_proto_init() }
func ztna_proto_v1alpha_port_forwarding_service_proto_init() {
	if ztna_proto_v1alpha_port_forwarding_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {

		ztna_proto_v1alpha_port_forwarding_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortForwardingService); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		ztna_proto_v1alpha_port_forwarding_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortForwardingService_Spec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		ztna_proto_v1alpha_port_forwarding_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PortForwardingService_Status); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}

	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: ztna_proto_v1alpha_port_forwarding_service_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           ztna_proto_v1alpha_port_forwarding_service_proto_goTypes,
		DependencyIndexes: ztna_proto_v1alpha_port_forwarding_service_proto_depIdxs,
		EnumInfos:         ztna_proto_v1alpha_port_forwarding_service_proto_enumTypes,
		MessageInfos:      ztna_proto_v1alpha_port_forwarding_service_proto_msgTypes,
	}.Build()
	ztna_proto_v1alpha_port_forwarding_service_proto = out.File
	ztna_proto_v1alpha_port_forwarding_service_proto_rawDesc = nil
	ztna_proto_v1alpha_port_forwarding_service_proto_goTypes = nil
	ztna_proto_v1alpha_port_forwarding_service_proto_depIdxs = nil
}
