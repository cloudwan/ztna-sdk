// Code generated by protoc-gen-goten-object
// File: ztna/proto/v1alpha/port_forwarding_service.proto
// DO NOT EDIT!!!

package port_forwarding_service

import (
	"fmt"
	"sort"

	"google.golang.org/protobuf/proto"
	"google.golang.org/protobuf/types/known/fieldmaskpb"

	gotenobject "github.com/cloudwan/goten-sdk/runtime/object"
)

// proto imports
import (
	ntt_meta "github.com/cloudwan/edgelq-sdk/common/types/meta"
	iam_project "github.com/cloudwan/edgelq-sdk/iam/resources/v1alpha/project"
	access_point "github.com/cloudwan/ztna-sdk/resources/v1alpha/access_point"
)

// ensure the imports are used
var (
	_ = new(fmt.Stringer)
	_ = new(sort.Interface)

	_ = new(proto.Message)
	_ = fieldmaskpb.FieldMask{}

	_ = new(gotenobject.FieldPath)
)

// make sure we're using proto imports
var (
	_ = &ntt_meta.Meta{}
	_ = &iam_project.Project{}
	_ = &access_point.AccessPoint{}
)

func (o *PortForwardingService) GotenObjectExt() {}

func (o *PortForwardingService) MakeFullFieldMask() *PortForwardingService_FieldMask {
	return FullPortForwardingService_FieldMask()
}

func (o *PortForwardingService) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPortForwardingService_FieldMask()
}

func (o *PortForwardingService) MakeDiffFieldMask(other *PortForwardingService) *PortForwardingService_FieldMask {
	if o == nil && other == nil {
		return &PortForwardingService_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPortForwardingService_FieldMask()
	}

	res := &PortForwardingService_FieldMask{}
	if o.GetName().String() != other.GetName().String() {
		res.Paths = append(res.Paths, &PortForwardingService_FieldTerminalPath{selector: PortForwardingService_FieldPathSelectorName})
	}
	if o.GetDisplayName() != other.GetDisplayName() {
		res.Paths = append(res.Paths, &PortForwardingService_FieldTerminalPath{selector: PortForwardingService_FieldPathSelectorDisplayName})
	}
	{
		subMask := o.GetMetadata().MakeDiffFieldMask(other.GetMetadata())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PortForwardingService_FieldTerminalPath{selector: PortForwardingService_FieldPathSelectorMetadata})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PortForwardingService_FieldSubPath{selector: PortForwardingService_FieldPathSelectorMetadata, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetSpec().MakeDiffFieldMask(other.GetSpec())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PortForwardingService_FieldTerminalPath{selector: PortForwardingService_FieldPathSelectorSpec})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PortForwardingService_FieldSubPath{selector: PortForwardingService_FieldPathSelectorSpec, subPath: subpath})
			}
		}
	}
	{
		subMask := o.GetStatus().MakeDiffFieldMask(other.GetStatus())
		if subMask.IsFull() {
			res.Paths = append(res.Paths, &PortForwardingService_FieldTerminalPath{selector: PortForwardingService_FieldPathSelectorStatus})
		} else {
			for _, subpath := range subMask.Paths {
				res.Paths = append(res.Paths, &PortForwardingService_FieldSubPath{selector: PortForwardingService_FieldPathSelectorStatus, subPath: subpath})
			}
		}
	}
	return res
}

func (o *PortForwardingService) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PortForwardingService))
}

func (o *PortForwardingService) Clone() *PortForwardingService {
	if o == nil {
		return nil
	}
	result := &PortForwardingService{}
	if o.Name == nil {
		result.Name = nil
	} else if data, err := o.Name.ProtoString(); err != nil {
		panic(err)
	} else {
		result.Name = &Name{}
		if err := result.Name.ParseProtoString(data); err != nil {
			panic(err)
		}
	}
	result.DisplayName = o.DisplayName
	result.Metadata = o.Metadata.Clone()
	result.Spec = o.Spec.Clone()
	result.Status = o.Status.Clone()
	return result
}

func (o *PortForwardingService) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PortForwardingService) Merge(source *PortForwardingService) {
	if source.GetName() != nil {
		if data, err := source.GetName().ProtoString(); err != nil {
			panic(err)
		} else {
			o.Name = &Name{}
			if err := o.Name.ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	} else {
		o.Name = nil
	}
	o.DisplayName = source.GetDisplayName()
	if source.GetMetadata() != nil {
		if o.Metadata == nil {
			o.Metadata = new(ntt_meta.Meta)
		}
		o.Metadata.Merge(source.GetMetadata())
	}
	if source.GetSpec() != nil {
		if o.Spec == nil {
			o.Spec = new(PortForwardingService_Spec)
		}
		o.Spec.Merge(source.GetSpec())
	}
	if source.GetStatus() != nil {
		if o.Status == nil {
			o.Status = new(PortForwardingService_Status)
		}
		o.Status.Merge(source.GetStatus())
	}
}

func (o *PortForwardingService) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PortForwardingService))
}

func (o *PortForwardingService_Spec) GotenObjectExt() {}

func (o *PortForwardingService_Spec) MakeFullFieldMask() *PortForwardingService_Spec_FieldMask {
	return FullPortForwardingService_Spec_FieldMask()
}

func (o *PortForwardingService_Spec) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPortForwardingService_Spec_FieldMask()
}

func (o *PortForwardingService_Spec) MakeDiffFieldMask(other *PortForwardingService_Spec) *PortForwardingService_Spec_FieldMask {
	if o == nil && other == nil {
		return &PortForwardingService_Spec_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPortForwardingService_Spec_FieldMask()
	}

	res := &PortForwardingService_Spec_FieldMask{}

	if len(o.GetAddresses()) == len(other.GetAddresses()) {
		for i, lValue := range o.GetAddresses() {
			rValue := other.GetAddresses()[i]
			if lValue != rValue {
				res.Paths = append(res.Paths, &PortForwardingServiceSpec_FieldTerminalPath{selector: PortForwardingServiceSpec_FieldPathSelectorAddresses})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PortForwardingServiceSpec_FieldTerminalPath{selector: PortForwardingServiceSpec_FieldPathSelectorAddresses})
	}
	if o.GetProviderLoadBalancingMode() != other.GetProviderLoadBalancingMode() {
		res.Paths = append(res.Paths, &PortForwardingServiceSpec_FieldTerminalPath{selector: PortForwardingServiceSpec_FieldPathSelectorProviderLoadBalancingMode})
	}
	if o.GetTargetLoadBalancingMode() != other.GetTargetLoadBalancingMode() {
		res.Paths = append(res.Paths, &PortForwardingServiceSpec_FieldTerminalPath{selector: PortForwardingServiceSpec_FieldPathSelectorTargetLoadBalancingMode})
	}
	if o.GetDisabled() != other.GetDisabled() {
		res.Paths = append(res.Paths, &PortForwardingServiceSpec_FieldTerminalPath{selector: PortForwardingServiceSpec_FieldPathSelectorDisabled})
	}

	if len(o.GetAccessPoints()) == len(other.GetAccessPoints()) {
		for i, lValue := range o.GetAccessPoints() {
			rValue := other.GetAccessPoints()[i]
			if lValue.String() != rValue.String() {
				res.Paths = append(res.Paths, &PortForwardingServiceSpec_FieldTerminalPath{selector: PortForwardingServiceSpec_FieldPathSelectorAccessPoints})
				break
			}
		}
	} else {
		res.Paths = append(res.Paths, &PortForwardingServiceSpec_FieldTerminalPath{selector: PortForwardingServiceSpec_FieldPathSelectorAccessPoints})
	}
	return res
}

func (o *PortForwardingService_Spec) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PortForwardingService_Spec))
}

func (o *PortForwardingService_Spec) Clone() *PortForwardingService_Spec {
	if o == nil {
		return nil
	}
	result := &PortForwardingService_Spec{}
	result.Addresses = make([]string, len(o.Addresses))
	for i, sourceValue := range o.Addresses {
		result.Addresses[i] = sourceValue
	}
	result.ProviderLoadBalancingMode = o.ProviderLoadBalancingMode
	result.TargetLoadBalancingMode = o.TargetLoadBalancingMode
	result.Disabled = o.Disabled
	result.AccessPoints = make([]*access_point.Name, len(o.AccessPoints))
	for i, sourceValue := range o.AccessPoints {
		if sourceValue == nil {
			result.AccessPoints[i] = nil
		} else if data, err := sourceValue.ProtoString(); err != nil {
			panic(err)
		} else {
			result.AccessPoints[i] = &access_point.Name{}
			if err := result.AccessPoints[i].ParseProtoString(data); err != nil {
				panic(err)
			}
		}
	}
	return result
}

func (o *PortForwardingService_Spec) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PortForwardingService_Spec) Merge(source *PortForwardingService_Spec) {
	for _, sourceValue := range source.GetAddresses() {
		exists := false
		for _, currentValue := range o.Addresses {
			if currentValue == sourceValue {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement string
			newDstElement = sourceValue
			o.Addresses = append(o.Addresses, newDstElement)
		}
	}

	o.ProviderLoadBalancingMode = source.GetProviderLoadBalancingMode()
	o.TargetLoadBalancingMode = source.GetTargetLoadBalancingMode()
	o.Disabled = source.GetDisabled()
	for _, sourceValue := range source.GetAccessPoints() {
		exists := false
		for _, currentValue := range o.AccessPoints {
			leftProtoStr, _ := currentValue.ProtoString()
			rightProtoStr, _ := sourceValue.ProtoString()
			if leftProtoStr == rightProtoStr {
				exists = true
				break
			}
		}
		if !exists {
			var newDstElement *access_point.Name
			if sourceValue != nil {
				if data, err := sourceValue.ProtoString(); err != nil {
					panic(err)
				} else {
					newDstElement = &access_point.Name{}
					if err := newDstElement.ParseProtoString(data); err != nil {
						panic(err)
					}
				}
			}
			o.AccessPoints = append(o.AccessPoints, newDstElement)
		}
	}

}

func (o *PortForwardingService_Spec) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PortForwardingService_Spec))
}

func (o *PortForwardingService_Status) GotenObjectExt() {}

func (o *PortForwardingService_Status) MakeFullFieldMask() *PortForwardingService_Status_FieldMask {
	return FullPortForwardingService_Status_FieldMask()
}

func (o *PortForwardingService_Status) MakeRawFullFieldMask() gotenobject.FieldMask {
	return FullPortForwardingService_Status_FieldMask()
}

func (o *PortForwardingService_Status) MakeDiffFieldMask(other *PortForwardingService_Status) *PortForwardingService_Status_FieldMask {
	if o == nil && other == nil {
		return &PortForwardingService_Status_FieldMask{}
	}
	if o == nil || other == nil {
		return FullPortForwardingService_Status_FieldMask()
	}

	res := &PortForwardingService_Status_FieldMask{}
	return res
}

func (o *PortForwardingService_Status) MakeRawDiffFieldMask(other gotenobject.GotenObjectExt) gotenobject.FieldMask {
	return o.MakeDiffFieldMask(other.(*PortForwardingService_Status))
}

func (o *PortForwardingService_Status) Clone() *PortForwardingService_Status {
	if o == nil {
		return nil
	}
	result := &PortForwardingService_Status{}
	return result
}

func (o *PortForwardingService_Status) CloneRaw() gotenobject.GotenObjectExt {
	return o.Clone()
}

func (o *PortForwardingService_Status) Merge(source *PortForwardingService_Status) {
}

func (o *PortForwardingService_Status) MergeRaw(source gotenobject.GotenObjectExt) {
	o.Merge(source.(*PortForwardingService_Status))
}
